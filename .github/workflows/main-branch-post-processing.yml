# Main Branch Post-Processing Workflow
#
# This workflow handles post-processing tasks after the main CI/CD pipeline completes
# on the main branch. It implements Docker registry optimization and conditional publishing.
#
# ARCHITECTURE - CORRECTED JOB ORDER:
# Phase 1 - Change Detection:
# 1. Change Detection: Multi-layer digest comparison between GHCR and DockerHub (RUNS FIRST while GHCR images exist)
# 2. Both Images: Handles webauthn-server and webauthn-test-credentials-service
#
# Phase 2 - DockerHub Publishing + Git Tagging:
# 3. Conditional DockerHub Publishing: Only when images actually changed
# 4. DockerHub Authentication: Secure credential management
# 5. Re-tag and Push: Pull from GHCR, push to DockerHub with same tags
# 6. Repository Description: Update DockerHub repository descriptions
# 7. Git Tagging: Tag repository on successful DockerHub publish
#
# Phase 3 - Cleanup:
# 8. GHCR Cleanup: ALWAYS runs (success OR failure) but AFTER change detection completes
#
# TRIGGERS:
# - After main-ci-cd.yml workflow completes on main branch
# - Runs regardless of CI/CD success/failure for cleanup
# - Conditional publishing only on CI/CD success
#
# BENEFITS:
# ✅ Prevents GHCR registry bloat through automatic cleanup
# ✅ Only publishes to DockerHub when images actually changed  
# ✅ Maintains DockerHub repository descriptions automatically
# ✅ Creates git tags for successful DockerHub publishes
# ✅ Handles both webauthn-server and test-credentials-service images
# ✅ Graceful error handling with comprehensive logging
# ✅ Security best practices with minimal required permissions
# ✅ FIXED: Correct job ordering ensures change detection happens BEFORE cleanup

name: Main Branch Post-Processing

on:
  workflow_run:
    workflows: ["main-ci-cd.yml"]
    branches: [main]
    types: [completed]

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: hitoshura25/webauthn-server
  DOCKER_TEST_CREDENTIALS_IMAGE_NAME: hitoshura25/webauthn-test-credentials-service
  DOCKERHUB_SERVER_REPO: hitoshura25/webauthn-server
  DOCKERHUB_TEST_CREDENTIALS_REPO: hitoshura25/webauthn-test-credentials-service

permissions:
  # Workflow-level permissions: minimal by default
  contents: read

jobs:
  # Job 1: Detect Changes (Only runs on CI/CD success, needs GHCR images to exist)
  detect-changes:
    name: Detect DockerHub publishing needs
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    outputs:
      webauthn-server-changed: ${{ steps.check-server.outputs.has-changes }}
      test-credentials-changed: ${{ steps.check-test-credentials.outputs.has-changes }}
      any-changes: ${{ steps.summary.outputs.any-changes }}
    permissions:
      contents: read
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to DockerHub (for inspection only)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
        continue-on-error: true  # Don't fail if DockerHub credentials missing

      - name: Check WebAuthn Server changes
        id: check-server
        run: |
          echo "🔍 Checking for changes in WebAuthn Server image..."
          
          # Get GHCR digest
          GHCR_DIGEST=$(docker buildx imagetools inspect ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest --format '{{.Manifest.Digest}}' 2>/dev/null || echo "")
          
          if [ -z "$GHCR_DIGEST" ]; then
            echo "❌ Failed to get GHCR digest for webauthn-server"
            echo "has-changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "GHCR digest: $GHCR_DIGEST"
          
          # Get DockerHub digest (handle case where image doesn't exist yet)
          DOCKERHUB_DIGEST=$(docker buildx imagetools inspect ${{ env.DOCKERHUB_SERVER_REPO }}:latest --format '{{.Manifest.Digest}}' 2>/dev/null || echo "NOT_FOUND")
          
          if [ "$DOCKERHUB_DIGEST" = "NOT_FOUND" ]; then
            echo "📦 WebAuthn Server image not found on DockerHub - first publish needed"
            echo "has-changes=true" >> $GITHUB_OUTPUT
          elif [ "$DOCKERHUB_DIGEST" != "$GHCR_DIGEST" ]; then
            echo "🔄 WebAuthn Server image has changes"
            echo "DockerHub digest: $DOCKERHUB_DIGEST"
            echo "GHCR digest: $GHCR_DIGEST"
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "✅ WebAuthn Server image unchanged"
            echo "has-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Check Test Credentials Service changes  
        id: check-test-credentials
        run: |
          echo "🔍 Checking for changes in Test Credentials Service image..."
          
          # Get GHCR digest
          GHCR_DIGEST=$(docker buildx imagetools inspect ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_TEST_CREDENTIALS_IMAGE_NAME }}:latest --format '{{.Manifest.Digest}}' 2>/dev/null || echo "")
          
          if [ -z "$GHCR_DIGEST" ]; then
            echo "❌ Failed to get GHCR digest for test-credentials-service"
            echo "has-changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "GHCR digest: $GHCR_DIGEST"
          
          # Get DockerHub digest (handle case where image doesn't exist yet)
          DOCKERHUB_DIGEST=$(docker buildx imagetools inspect ${{ env.DOCKERHUB_TEST_CREDENTIALS_REPO }}:latest --format '{{.Manifest.Digest}}' 2>/dev/null || echo "NOT_FOUND")
          
          if [ "$DOCKERHUB_DIGEST" = "NOT_FOUND" ]; then
            echo "📦 Test Credentials Service image not found on DockerHub - first publish needed"
            echo "has-changes=true" >> $GITHUB_OUTPUT
          elif [ "$DOCKERHUB_DIGEST" != "$GHCR_DIGEST" ]; then
            echo "🔄 Test Credentials Service image has changes"
            echo "DockerHub digest: $DOCKERHUB_DIGEST"
            echo "GHCR digest: $GHCR_DIGEST"
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "✅ Test Credentials Service image unchanged"
            echo "has-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Summary of changes
        id: summary
        run: |
          SERVER_CHANGED="${{ steps.check-server.outputs.has-changes }}"
          TEST_CHANGED="${{ steps.check-test-credentials.outputs.has-changes }}"
          
          echo "📊 Change Detection Summary:"
          echo "WebAuthn Server changed: $SERVER_CHANGED"
          echo "Test Credentials Service changed: $TEST_CHANGED"
          
          if [[ "$SERVER_CHANGED" == "true" || "$TEST_CHANGED" == "true" ]]; then
            echo "🚀 DockerHub publishing needed"
            echo "any-changes=true" >> $GITHUB_OUTPUT
          else
            echo "✅ No DockerHub publishing needed - all images up to date"
            echo "any-changes=false" >> $GITHUB_OUTPUT
          fi

  # Job 2: Publish to DockerHub (Conditional on changes detected)
  publish-dockerhub:
    name: Publish to DockerHub
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any-changes == 'true'
    permissions:
      contents: read
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Publish WebAuthn Server to DockerHub
        if: needs.detect-changes.outputs.webauthn-server-changed == 'true'
        run: |
          echo "🚀 Publishing WebAuthn Server to DockerHub..."
          
          # Pull from GHCR
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          
          # Tag for DockerHub
          docker tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest ${{ env.DOCKERHUB_SERVER_REPO }}:latest
          
          # Push to DockerHub
          docker push ${{ env.DOCKERHUB_SERVER_REPO }}:latest
          
          echo "✅ WebAuthn Server successfully published to DockerHub"

      - name: Publish Test Credentials Service to DockerHub
        if: needs.detect-changes.outputs.test-credentials-changed == 'true'
        run: |
          echo "🚀 Publishing Test Credentials Service to DockerHub..."
          
          # Pull from GHCR
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_TEST_CREDENTIALS_IMAGE_NAME }}:latest
          
          # Tag for DockerHub
          docker tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_TEST_CREDENTIALS_IMAGE_NAME }}:latest ${{ env.DOCKERHUB_TEST_CREDENTIALS_REPO }}:latest
          
          # Push to DockerHub
          docker push ${{ env.DOCKERHUB_TEST_CREDENTIALS_REPO }}:latest
          
          echo "✅ Test Credentials Service successfully published to DockerHub"

      - name: Update WebAuthn Server DockerHub description
        if: needs.detect-changes.outputs.webauthn-server-changed == 'true'
        uses: peter-evans/dockerhub-description@v4
        continue-on-error: true  # Don't fail workflow if description update fails
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          repository: ${{ env.DOCKERHUB_SERVER_REPO }}
          short-description: 'WebAuthn authentication server built with Ktor and Yubico java-webauthn-server'
          readme-filepath: ./webauthn-server/README.md

      - name: Update Test Credentials Service DockerHub description
        if: needs.detect-changes.outputs.test-credentials-changed == 'true'
        uses: peter-evans/dockerhub-description@v4
        continue-on-error: true  # Don't fail workflow if description update fails
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          repository: ${{ env.DOCKERHUB_TEST_CREDENTIALS_REPO }}
          short-description: 'WebAuthn test credentials service for cross-platform testing with FIDO2/WebAuthn'
          readme-filepath: ./webauthn-test-credentials-service/README.md

  # Job 3: Dummy job for cleanup dependencies (Always runs when detect-changes is skipped)
  cleanup-trigger:
    name: Trigger cleanup when change detection skipped
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'success'
    steps:
      - name: Cleanup trigger placeholder
        run: |
          echo "🔄 CI/CD failed, triggering cleanup without change detection"
          echo "This job ensures cleanup-ghcr has a dependency to wait for"

  # Job 4: GHCR Cleanup (Always runs after change detection OR when CI/CD failed)
  cleanup-ghcr:
    name: Clean up GHCR images
    runs-on: ubuntu-latest
    needs: [detect-changes, cleanup-trigger]
    if: always()  # Run regardless of previous job results
    permissions:
      contents: read
      packages: write  # Required to delete GHCR packages
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up old GHCR images
        continue-on-error: true  # Don't fail the workflow if cleanup fails
        run: |
          echo "🧹 Starting GHCR cleanup for repository: ${{ github.repository }}"
          
          # Function to clean up old versions of a package
          cleanup_package() {
            local package_name="$1"
            local package_type="container"
            
            echo "📦 Cleaning up package: $package_name"
            
            # Get package versions (keep latest 5, delete older ones)
            # Using GitHub CLI to interact with packages API
            local versions=$(gh api \
              --method GET \
              "/orgs/${{ github.repository_owner }}/packages/${package_type}/${package_name}/versions" \
              --jq 'sort_by(.created_at) | reverse | .[5:] | .[].id' \
              2>/dev/null || echo "")
              
            if [ -z "$versions" ]; then
              echo "ℹ️ No old versions to clean up for $package_name"
              return 0
            fi
            
            echo "🗑️ Found $(echo "$versions" | wc -l) old versions to delete for $package_name"
            
            # Delete old versions
            echo "$versions" | while read -r version_id; do
              if [ -n "$version_id" ]; then
                echo "Deleting version ID: $version_id"
                gh api \
                  --method DELETE \
                  "/orgs/${{ github.repository_owner }}/packages/${package_type}/${package_name}/versions/$version_id" \
                  || echo "⚠️ Failed to delete version $version_id"
              fi
            done
          }
          
          # Clean up both packages
          cleanup_package "webauthn-server"
          cleanup_package "webauthn-test-credentials-service"
          
          echo "✅ GHCR cleanup completed"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 5: Git Tagging (Only on successful DockerHub publish)
  tag-repository:
    name: Tag repository on successful publish
    runs-on: ubuntu-latest
    needs: [detect-changes, publish-dockerhub]
    if: needs.publish-dockerhub.result == 'success'
    permissions:
      contents: write  # Required to create git tags
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Full history for tagging

      - name: Create and push git tag
        run: |
          echo "🏷️ Creating git tag for successful DockerHub publish..."
          
          # Generate timestamp-based tag
          TIMESTAMP=$(date -u +"%Y%m%d-%H%M%S")
          TAG_NAME="dockerhub-publish-${TIMESTAMP}"
          
          # Create tag with commit message
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git tag -a "$TAG_NAME" -m "DockerHub publish on $(date -u)"
          git push origin "$TAG_NAME"
          
          echo "✅ Created and pushed tag: $TAG_NAME"
          echo "Published images:"
          
          if [[ "${{ needs.detect-changes.outputs.webauthn-server-changed }}" == "true" ]]; then
            echo "  - ${{ env.DOCKERHUB_SERVER_REPO }}:latest"
          fi
          
          if [[ "${{ needs.detect-changes.outputs.test-credentials-changed }}" == "true" ]]; then
            echo "  - ${{ env.DOCKERHUB_TEST_CREDENTIALS_REPO }}:latest"
          fi

  # Job 6: Report post-processing status
  report-post-processing-status:
    name: Report post-processing status  
    runs-on: ubuntu-latest
    needs: [cleanup-ghcr, detect-changes, publish-dockerhub, tag-repository]
    if: always()
    steps:
      - name: Report overall post-processing status
        run: |
          echo "📋 Main Branch Post-Processing Results Summary:"
          echo "Original CI/CD result: ${{ github.event.workflow_run.conclusion }}"
          echo "GHCR cleanup: ${{ needs.cleanup-ghcr.result }}"
          echo "Change detection: ${{ needs.detect-changes.result }}"
          echo "DockerHub publishing: ${{ needs.publish-dockerhub.result }}"
          echo "Git tagging: ${{ needs.tag-repository.result }}"
          
          echo ""
          echo "🧹 GHCR Cleanup: Always executed to prevent registry bloat"
          
          if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "✅ Original CI/CD pipeline succeeded"
            
            if [[ "${{ needs.detect-changes.outputs.any-changes }}" == "true" ]]; then
              echo "🔄 Changes detected, DockerHub publishing executed"
              echo "  WebAuthn Server: ${{ needs.detect-changes.outputs.webauthn-server-changed }}"
              echo "  Test Credentials: ${{ needs.detect-changes.outputs.test-credentials-changed }}"
              
              if [[ "${{ needs.publish-dockerhub.result }}" == "success" ]]; then
                echo "🚀 DockerHub publishing successful"
                echo "🏷️ Repository tagged: ${{ needs.tag-repository.result }}"
                echo "🎉 Complete post-processing pipeline successful!"
              else
                echo "❌ DockerHub publishing failed"
                exit 1
              fi
            else
              echo "✅ No changes detected - DockerHub images already up to date"
            fi
          else
            echo "❌ Original CI/CD pipeline failed"
            echo "🧹 Only cleanup operations were performed"
          fi
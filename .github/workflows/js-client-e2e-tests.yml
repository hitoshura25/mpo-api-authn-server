name: Run JS Client E2E Tests

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '18'
      codecov_token:
        description: 'Codecov token for uploading coverage reports'
        required: true
        type: string
    outputs:
      test-exit-code:
        description: 'Exit code from the tests'
        value: ${{ jobs.js-client-e2e-tests.outputs.test-exit-code }}

jobs:
  js-client-e2e-tests:
    runs-on: ubuntu-latest
    outputs:
      test-exit-code: ${{ steps.run-tests.outputs.test-exit-code }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      - name: Run tests and coverage
        shell: bash
        run: ./gradlew koverXmlReport --build-cache --parallel

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./build/reports/kover/report.xml
          flags: unit
          name: codecov-unit
          token: ${{ inputs.codecov_token }}
          fail_ci_if_error: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: mpo-api-authn-server
          tags: |
            type=ref,event=pr,prefix=pr-
          labels: |
            org.opencontainers.image.title=MPO API Auth Server
            org.opencontainers.image.description=Authentication server for MPO API

      - name: Build and cache Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GRADLE_OPTS=-Dorg.gradle.daemon=false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'
          cache-dependency-path: test-client/package-lock.json

      - name: Install test client dependencies
        working-directory: test-client
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-browsers-${{ hashFiles('test-client/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-browsers-

      - name: Install Playwright browsers
        working-directory: test-client
        run: npx playwright install chromium --with-deps

      - name: Set up environment variables and start services
        shell: bash
        run: |
          echo "Setting up secure environment with random passwords..."
          ./scripts/setup-secure-env.sh

      - name: Build docker containers
        uses: docker/bake-action@v6
        with:
          load: true

      - name: Start full stack
        id: start-full-stack
        env:
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1
        run: |
          echo "Starting Docker Compose services..."
          start_time=$(date +%s)
          
          docker compose up -d --build
          echo "Waiting for services to be ready..."
          
          # Wait for all services to be healthy
          echo "Checking service health..."
          for i in {1..60}; do
            healthy_count=$(docker compose ps --format "table {{.Service}}\t{{.Status}}" | grep -c "healthy" || true)
            if [ "$healthy_count" -eq 4 ]; then
              echo "✅ All 4 services are healthy"
              break
            fi
            echo "Waiting for services... ($healthy_count/4 healthy) - attempt $i/60"
            sleep 2
          done
          
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "✅ Services started and ready in ${duration} seconds"
          
          # Final check and display status
          echo "Final service status:"
          docker compose ps

      - name: Run E2E tests
        id: run-tests
        working-directory: test-client
        run: |
          set +e
          npm test
          TEST_EXIT_CODE=$?
          set -e
          
          # Store exit code for later use
          echo "test-exit-code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
          
          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "❌ Tests failed with exit code $TEST_EXIT_CODE"
          else
            echo "✅ Tests passed successfully"
          fi

      - name: Stop full stack
        id: stop-full-stack
        if: always()
        run: |
          echo "Capturing Docker Compose logs..."
          docker compose logs > docker-compose-logs.txt 2>&1
          echo "Stopping Docker Compose services..."
          docker compose down -v
          echo "✅ Docker Compose services stopped"

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: |
            test-client/playwright-report/
            test-client/test-results/
          retention-days: 3

      - name: Upload Docker Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-logs
          path: docker-compose-logs.txt
          retention-days: 3

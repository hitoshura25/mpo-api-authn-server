# Smart PR Testing Workflow with Conditional Execution and Callable Workflow Architecture
#
# This workflow implements intelligent change detection and conditional execution
# to optimize CI/CD performance for pull requests. It uses callable workflows
# for better maintainability and reusability.
#
# WORKFLOW DECISION MATRIX:
# | Change Type        | Unit Tests | Docker Build | E2E Tests |
# |--------------------|-----------:|-------------:|----------:|
# | Documentation only |    ‚ùå Skip |     ‚ùå Skip |  ‚ùå Skip |
# | Workflow changes   |    ‚ùå Skip |     ‚ùå Skip |  ‚ùå Skip |
# | Source code        |     ‚úÖ Run |      ‚úÖ Build |   ‚úÖ Run |
# | Tests only         |     ‚úÖ Run |     ‚ùå Skip |  ‚ùå Skip |
# | Dockerfile only    |    ‚ùå Skip |      ‚úÖ Build |   ‚úÖ Run |
# | Build config       |     ‚úÖ Run |      ‚úÖ Build |   ‚úÖ Run |
#
# PERFORMANCE BENEFITS:
# - Fast path: Documentation/workflow changes complete in ~30 seconds
# - Standard path: Full CI pipeline takes ~8 minutes when needed
# - Smart detection: Only run tests/builds for relevant changes
# - Callable workflows: Reduced complexity and improved maintainability
#
# ARCHITECTURE:
# - detect-changes: Smart change detection and execution strategy
# - unit-tests.yml: Callable workflow for unit testing and coverage
# - docker-build.yml: Callable workflow for Docker build/scan/push
# - report-build-results: Results aggregation and status reporting

name: Build and Test - Orchestration Workflow

on:
  workflow_call:
    outputs:
      docker_images_built:
        description: 'Whether Docker images were built and pushed'
        value: ${{ jobs.docker-build-scan-push.outputs.images-pushed }}
      webauthn_server_image:
        description: 'WebAuthn server Docker image tag'
        value: ${{ jobs.docker-build-scan-push.outputs.webauthn-server-image }}
      test_credentials_image:
        description: 'Test credentials service Docker image tag'
        value: ${{ jobs.docker-build-scan-push.outputs.test-credentials-image }}
      security_scan_passed:
        description: 'Whether Docker security scan passed'
        value: ${{ jobs.docker-build-scan-push.outputs.security-scan-passed }}
      critical_vulnerabilities:
        description: 'Number of critical vulnerabilities found'
        value: ${{ jobs.docker-build-scan-push.outputs.critical-vulnerabilities }}
      unit_tests_passed:
        description: 'Whether unit tests passed successfully'
        value: ${{ jobs.run-unit-tests.outputs.tests-passed }}
      coverage_uploaded:
        description: 'Whether coverage reports were uploaded'
        value: ${{ jobs.run-unit-tests.outputs.coverage-uploaded }}
      workflow_validation_level:
        description: 'Workflow validation level applied (none, minimal, unit-tests, docker, e2e, full)'
        value: ${{ jobs.detect-changes.outputs.workflow-validation-level }}

env:
  ANDROID_API_VERSION: "29"
  JAVA_VERSION: "21"
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: hitoshura25/webauthn-server
  DOCKER_TEST_CREDENTIALS_IMAGE_NAME: hitoshura25/webauthn-test-credentials-service

jobs:
  # Job 1: Detect what changed to determine execution strategy
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      # Core decision outputs - used by other jobs/steps in this workflow
      should-build-docker: ${{ steps.decision-matrix.outputs.should-build-docker }}        # Used by: build-docker-images job condition & reporting
      should-run-tests: ${{ steps.decision-matrix.outputs.should-run-tests }}              # Used by: run-unit-tests job condition & reporting
      fast-path-eligible: ${{ steps.decision-matrix.outputs.fast-path-eligible }}          # Used by: reporting steps for status display
      source-code-changes: ${{ steps.decision-matrix.outputs.source-code-changes }}        # Used by: reporting step to show change type
      dockerfile-only-changes: ${{ steps.decision-matrix.outputs.dockerfile-only-changes }} # Used by: reporting step to show change type
      workflow-validation-level: ${{ steps.decision-matrix.outputs.workflow-validation-level }} # Used by: reporting step to show workflow validation level
      webauthn-docker-changes-detected: ${{ steps.changes.outputs.webauthn-server-docker }} # Used to further optimize docker build workflow
      test-credentials-docker-changes-detected: ${{ steps.changes.outputs.test-credentials-docker }} # Used to further optimize docker build workflow
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect file changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            docs-changed:
              - '**.md'
              - 'docs/**'
              - '!.github/workflows/**'
            # Enhanced granular workflow detection for smart validation
            orchestration-workflows:
              - '.github/workflows/main-ci-cd.yml'
              - '.github/workflows/build-and-test.yml'
            unit-test-workflows:
              - '.github/workflows/unit-tests.yml'
            docker-workflows:
              - '.github/workflows/docker-build.yml'
            e2e-workflows:
              - '.github/workflows/e2e-tests.yml'
              - '.github/workflows/web-e2e-tests.yml'
              - '.github/workflows/android-e2e-tests.yml'
            infrastructure-workflows:
              - '.github/workflows/security-analysis.yml'
              - '.github/workflows/vulnerability-monitor.yml'
              - '.github/workflows/pull-request-closed.yml'
              - '.github/workflows/main-branch-post-processing.yml'
            webauthn-server-tests:
              - 'webauthn-server/src/**'
              - 'webauthn-server/build.gradle.kts'
              - 'webauthn-test-lib/**'
              - 'settings.gradle.kts'
              - 'build.gradle.kts'
              - 'gradle.properties'
              - 'gradle/**'
            webauthn-server-docker:
              - 'webauthn-server/src/main/**'
              - 'webauthn-server/Dockerfile'
              - 'webauthn-server/build.gradle.kts'
              - 'webauthn-test-lib/src/main/**'
              - 'settings.gradle.kts'
              - 'build.gradle.kts'
              - 'gradle.properties'
            test-credentials-tests:
              - 'webauthn-test-credentials-service/src/**'
              - 'webauthn-test-credentials-service/build.gradle.kts'
              - 'webauthn-test-lib/**'
              - 'settings.gradle.kts'
              - 'build.gradle.kts'
              - 'gradle.properties'
              - 'gradle/**'
            test-credentials-docker:
              - 'webauthn-test-credentials-service/src/main/**'
              - 'webauthn-test-credentials-service/Dockerfile'
              - 'webauthn-test-credentials-service/build.gradle.kts'
              - 'webauthn-test-lib/src/main/**'
              - 'settings.gradle.kts'
              - 'build.gradle.kts'
              - 'gradle.properties'

      - name: Print raw change detection results
        run: |
          echo "üîç Raw Change Detection Results:"
          echo "docs-changed: ${{ steps.changes.outputs.docs-changed }}"
          echo "orchestration-workflows: ${{ steps.changes.outputs.orchestration-workflows }}"
          echo "unit-test-workflows: ${{ steps.changes.outputs.unit-test-workflows }}"
          echo "docker-workflows: ${{ steps.changes.outputs.docker-workflows }}"
          echo "e2e-workflows: ${{ steps.changes.outputs.e2e-workflows }}"
          echo "infrastructure-workflows: ${{ steps.changes.outputs.infrastructure-workflows }}"
          echo "webauthn-server-tests: ${{ steps.changes.outputs.webauthn-server-tests }}"
          echo "webauthn-server-docker: ${{ steps.changes.outputs.webauthn-server-docker }}"
          echo "test-credentials-tests: ${{ steps.changes.outputs.test-credentials-tests }}"
          echo "test-credentials-docker: ${{ steps.changes.outputs.test-credentials-docker }}"

      - name: Apply decision matrix logic
        id: decision-matrix
        run: |
          # Store raw filter results in variables
          DOCS_CHANGED="${{ steps.changes.outputs.docs-changed }}"
          ORCHESTRATION_WORKFLOWS="${{ steps.changes.outputs.orchestration-workflows }}"
          UNIT_TEST_WORKFLOWS="${{ steps.changes.outputs.unit-test-workflows }}"
          DOCKER_WORKFLOWS="${{ steps.changes.outputs.docker-workflows }}"
          E2E_WORKFLOWS="${{ steps.changes.outputs.e2e-workflows }}"
          INFRASTRUCTURE_WORKFLOWS="${{ steps.changes.outputs.infrastructure-workflows }}"
          WEBAUTHN_TESTS="${{ steps.changes.outputs.webauthn-server-tests }}"
          WEBAUTHN_DOCKER="${{ steps.changes.outputs.webauthn-server-docker }}"
          TEST_CREDS_TESTS="${{ steps.changes.outputs.test-credentials-tests }}"
          TEST_CREDS_DOCKER="${{ steps.changes.outputs.test-credentials-docker }}"

          # Calculate if any workflow changes exist for backward compatibility
          WORKFLOWS_CHANGED="false"
          if [[ "$ORCHESTRATION_WORKFLOWS" == "true" ]] || [[ "$UNIT_TEST_WORKFLOWS" == "true" ]] || \
             [[ "$DOCKER_WORKFLOWS" == "true" ]] || [[ "$E2E_WORKFLOWS" == "true" ]] || \
             [[ "$INFRASTRUCTURE_WORKFLOWS" == "true" ]]; then
            WORKFLOWS_CHANGED="true"
          fi

          echo "üßÆ Applying Decision Matrix Logic..."
          echo ""
          echo "üìã Enhanced Decision Matrix with Granular Workflow Validation:"
          echo "| Change Type              | Unit Tests | Docker Build | E2E Tests | Validation Level |"
          echo "|--------------------------|-----------|-------------|-----------|------------------|"
          echo "| Documentation only       |    ‚ùå Skip |     ‚ùå Skip |  ‚ùå Skip | None            |"
          echo "| Orchestration workflows  |     ‚úÖ Run |      ‚úÖ Build |   ‚úÖ Run | Full            |"
          echo "| Unit test workflows      |     ‚úÖ Run |     ‚ùå Skip |  ‚ùå Skip | Unit tests      |"
          echo "| Docker workflows         |    ‚ùå Skip |      ‚úÖ Build |  ‚ùå Skip | Docker build    |"
          echo "| E2E workflows            |     ‚úÖ Run |      ‚úÖ Build |   ‚úÖ Run | E2E validation  |"
          echo "| Infrastructure workflows |    ‚ùå Skip |     ‚ùå Skip |  ‚ùå Skip | Minimal         |"
          echo "| Source code              |     ‚úÖ Run |      ‚úÖ Build |   ‚úÖ Run | Full            |"
          echo "| Tests only               |     ‚úÖ Run |     ‚ùå Skip |  ‚ùå Skip | Unit tests      |"
          echo "| Dockerfile only          |    ‚ùå Skip |      ‚úÖ Build |   ‚úÖ Run | Docker + E2E    |"
          echo "| Build config             |     ‚úÖ Run |      ‚úÖ Build |   ‚úÖ Run | Full            |"
          echo ""
          echo "üîç Analyzing current changes (using PRIORITY ORDER):"
          echo "  1Ô∏è‚É£ Source code changes (highest priority): $([ "$WEBAUTHN_TESTS" = "true" ] || [ "$TEST_CREDS_TESTS" = "true" ] && echo "YES" || echo "no")"
          echo "  2Ô∏è‚É£ Dockerfile-only changes: $([ "$WEBAUTHN_DOCKER" = "true" ] || [ "$TEST_CREDS_DOCKER" = "true" ] && echo "YES" || echo "no") (only if no source code changes)"
          echo "  3Ô∏è‚É£ Documentation-only changes: $([ "$DOCS_CHANGED" = "true" ] && [ "$WORKFLOWS_CHANGED" = "false" ] && echo "YES" || echo "no") (only if no code/docker changes)"
          echo "  4Ô∏è‚É£ Workflow validation (overrides docs): $([ "$WORKFLOWS_CHANGED" = "true" ] && echo "YES" || echo "no")"
          echo "      ‚Ä¢ Orchestration workflows: $([ "$ORCHESTRATION_WORKFLOWS" = "true" ] && echo "YES" || echo "no") (full validation required)"
          echo "      ‚Ä¢ Unit test workflows: $([ "$UNIT_TEST_WORKFLOWS" = "true" ] && echo "YES" || echo "no") (unit tests only)"
          echo "      ‚Ä¢ Docker workflows: $([ "$DOCKER_WORKFLOWS" = "true" ] && echo "YES" || echo "no") (docker build only)"
          echo "      ‚Ä¢ E2E workflows: $([ "$E2E_WORKFLOWS" = "true" ] && echo "YES" || echo "no") (full E2E validation)"
          echo "      ‚Ä¢ Infrastructure workflows: $([ "$INFRASTRUCTURE_WORKFLOWS" = "true" ] && echo "YES" || echo "no") (minimal validation)"
          echo ""

          # Calculate decision matrix categories based on PRIORITY ORDER
          # Higher priority conditions override lower priority ones

          # Priority 1: Source code changes (any test changes) - highest priority
          if [[ "$WEBAUTHN_TESTS" == "true" ]] || [[ "$TEST_CREDS_TESTS" == "true" ]]; then
            echo "source-code-changes=true" >> $GITHUB_OUTPUT
            echo "should-run-tests=true" >> $GITHUB_OUTPUT
            echo "should-build-docker=true" >> $GITHUB_OUTPUT
            echo "tests-only-changes=false" >> $GITHUB_OUTPUT
            echo "dockerfile-only-changes=false" >> $GITHUB_OUTPUT
            echo "build-config-changes=false" >> $GITHUB_OUTPUT
            echo "docs-only=false" >> $GITHUB_OUTPUT
            echo "workflows-only=false" >> $GITHUB_OUTPUT
            echo "workflow-validation-level=none" >> $GITHUB_OUTPUT
            echo "fast-path-eligible=false" >> $GITHUB_OUTPUT
            DECISION="Source code changes detected"
          # Priority 2: Dockerfile only (docker changes but no test changes)
          elif [[ "$WEBAUTHN_DOCKER" == "true" ]] || [[ "$TEST_CREDS_DOCKER" == "true" ]]; then
            echo "source-code-changes=false" >> $GITHUB_OUTPUT
            echo "should-run-tests=false" >> $GITHUB_OUTPUT
            echo "should-build-docker=true" >> $GITHUB_OUTPUT
            echo "tests-only-changes=false" >> $GITHUB_OUTPUT
            echo "dockerfile-only-changes=true" >> $GITHUB_OUTPUT
            echo "build-config-changes=false" >> $GITHUB_OUTPUT
            echo "docs-only=false" >> $GITHUB_OUTPUT
            echo "workflows-only=false" >> $GITHUB_OUTPUT
            echo "workflow-validation-level=none" >> $GITHUB_OUTPUT
            echo "fast-path-eligible=false" >> $GITHUB_OUTPUT
            DECISION="Dockerfile-only changes detected"
          # Priority 3: Documentation only (docs changed but nothing else)
          elif [[ "$DOCS_CHANGED" == "true" ]] && [[ "$WORKFLOWS_CHANGED" == "false" ]]; then
            echo "source-code-changes=false" >> $GITHUB_OUTPUT
            echo "should-run-tests=false" >> $GITHUB_OUTPUT
            echo "should-build-docker=false" >> $GITHUB_OUTPUT
            echo "tests-only-changes=false" >> $GITHUB_OUTPUT
            echo "dockerfile-only-changes=false" >> $GITHUB_OUTPUT
            echo "build-config-changes=false" >> $GITHUB_OUTPUT
            echo "docs-only=true" >> $GITHUB_OUTPUT
            echo "workflows-only=false" >> $GITHUB_OUTPUT
            echo "workflow-validation-level=none" >> $GITHUB_OUTPUT
            echo "fast-path-eligible=true" >> $GITHUB_OUTPUT
            DECISION="Documentation-only changes detected"
          # Priority 4: Enhanced workflow changes with granular validation
          elif [[ "$WORKFLOWS_CHANGED" == "true" ]]; then
            # Determine validation level based on which workflows changed

            if [[ "$ORCHESTRATION_WORKFLOWS" == "true" ]]; then
              # Full validation for orchestration changes
              echo "should-run-tests=true" >> $GITHUB_OUTPUT
              echo "should-build-docker=true" >> $GITHUB_OUTPUT
              echo "workflow-validation-level=full" >> $GITHUB_OUTPUT
              echo "fast-path-eligible=false" >> $GITHUB_OUTPUT
              DECISION="Orchestration workflow changes - full validation required"

            elif [[ "$UNIT_TEST_WORKFLOWS" == "true" ]]; then
              # Unit tests only
              echo "should-run-tests=true" >> $GITHUB_OUTPUT
              echo "should-build-docker=false" >> $GITHUB_OUTPUT
              echo "workflow-validation-level=unit-tests" >> $GITHUB_OUTPUT
              echo "fast-path-eligible=false" >> $GITHUB_OUTPUT
              DECISION="Unit test workflow changes - validating test execution"

            elif [[ "$DOCKER_WORKFLOWS" == "true" ]]; then
              # Docker build validation
              echo "should-run-tests=false" >> $GITHUB_OUTPUT
              echo "should-build-docker=true" >> $GITHUB_OUTPUT
              echo "workflow-validation-level=docker" >> $GITHUB_OUTPUT
              echo "fast-path-eligible=false" >> $GITHUB_OUTPUT
              DECISION="Docker workflow changes - validating build process"

            elif [[ "$E2E_WORKFLOWS" == "true" ]]; then
              # E2E validation (needs images)
              echo "should-run-tests=true" >> $GITHUB_OUTPUT
              echo "should-build-docker=true" >> $GITHUB_OUTPUT
              echo "workflow-validation-level=e2e" >> $GITHUB_OUTPUT
              echo "fast-path-eligible=false" >> $GITHUB_OUTPUT
              DECISION="E2E workflow changes - validating integration tests"

            else
              # Infrastructure workflows - minimal validation
              echo "should-run-tests=false" >> $GITHUB_OUTPUT
              echo "should-build-docker=false" >> $GITHUB_OUTPUT
              echo "workflow-validation-level=minimal" >> $GITHUB_OUTPUT
              echo "fast-path-eligible=true" >> $GITHUB_OUTPUT
              DECISION="Infrastructure workflow changes - minimal validation"
            fi

            # Set common workflow change outputs
            echo "source-code-changes=false" >> $GITHUB_OUTPUT
            echo "tests-only-changes=false" >> $GITHUB_OUTPUT
            echo "dockerfile-only-changes=false" >> $GITHUB_OUTPUT
            echo "build-config-changes=false" >> $GITHUB_OUTPUT
            echo "docs-only=false" >> $GITHUB_OUTPUT
            echo "workflows-only=false" >> $GITHUB_OUTPUT
          # Default: No significant changes
          else
            echo "source-code-changes=false" >> $GITHUB_OUTPUT
            echo "should-run-tests=false" >> $GITHUB_OUTPUT
            echo "should-build-docker=false" >> $GITHUB_OUTPUT
            echo "tests-only-changes=false" >> $GITHUB_OUTPUT
            echo "dockerfile-only-changes=false" >> $GITHUB_OUTPUT
            echo "build-config-changes=false" >> $GITHUB_OUTPUT
            echo "docs-only=false" >> $GITHUB_OUTPUT
            echo "workflows-only=false" >> $GITHUB_OUTPUT
            echo "workflow-validation-level=none" >> $GITHUB_OUTPUT
            echo "fast-path-eligible=true" >> $GITHUB_OUTPUT
            DECISION="No significant changes detected"
          fi

          echo "üéØ Decision: $DECISION"

      - name: Print execution strategy
        run: |
          echo "üöÄ Execution Strategy Based on Decision Matrix:"
          echo "üìä Calculated Decisions:"
          echo "  ‚Ä¢ Source code changes: ${{ steps.decision-matrix.outputs.source-code-changes }}"
          echo "  ‚Ä¢ Tests-only changes: ${{ steps.decision-matrix.outputs.tests-only-changes }}"
          echo "  ‚Ä¢ Dockerfile-only changes: ${{ steps.decision-matrix.outputs.dockerfile-only-changes }}"
          echo "  ‚Ä¢ Documentation-only: ${{ steps.decision-matrix.outputs.docs-only }}"
          echo "  ‚Ä¢ Workflow-only: ${{ steps.decision-matrix.outputs.workflows-only }}"
          echo "  ‚Ä¢ Workflow validation level: ${{ steps.decision-matrix.outputs.workflow-validation-level }}"
          echo "  ‚Ä¢ Fast path eligible: ${{ steps.decision-matrix.outputs.fast-path-eligible }}"
          echo ""
          echo "‚öôÔ∏è  Pipeline Actions:"
          echo "  ‚Ä¢ Should run unit tests: ${{ steps.decision-matrix.outputs.should-run-tests }}"
          echo "  ‚Ä¢ Should build Docker images: ${{ steps.decision-matrix.outputs.should-build-docker }}"
          echo ""

          if [[ "${{ steps.decision-matrix.outputs.source-code-changes }}" == "true" ]]; then
            echo "‚úÖ Source code changes - Will run unit tests AND build Docker images for E2E tests"
            echo "    üß™ Unit Tests: ENABLED (source code changed)"
            echo "    üê≥ Docker Build: ENABLED (for E2E testing)"
            echo "    üéØ E2E Tests: ENABLED (using built images)"
          elif [[ "${{ steps.decision-matrix.outputs.dockerfile-only-changes }}" == "true" ]]; then
            echo "‚úÖ Dockerfile-only changes - Will build Docker images for E2E tests (skip unit tests)"
            echo "    üß™ Unit Tests: SKIPPED (no test code changes)"
            echo "    üê≥ Docker Build: ENABLED (Dockerfile changed)"
            echo "    üéØ E2E Tests: ENABLED (using built images)"
          elif [[ "${{ steps.decision-matrix.outputs.docs-only }}" == "true" ]]; then
            echo "‚ö° Documentation-only changes - Fast path (no tests/builds needed)"
            echo "    üß™ Unit Tests: SKIPPED (no code changes)"
            echo "    üê≥ Docker Build: SKIPPED (no code/Docker changes)"
            echo "    üéØ E2E Tests: SKIPPED (no images to test)"
          elif [[ "${{ steps.decision-matrix.outputs.workflow-validation-level }}" == "full" ]]; then
            echo "üîß Orchestration workflow changes - Running full validation"
            echo "    üß™ Unit Tests: ENABLED (workflow could affect all components)"
            echo "    üê≥ Docker Build: ENABLED (workflow could affect builds)"
            echo "    üéØ E2E Tests: ENABLED (full validation required)"
          elif [[ "${{ steps.decision-matrix.outputs.workflow-validation-level }}" == "unit-tests" ]]; then
            echo "üß™ Unit test workflow changes - Validating test execution only"
            echo "    üß™ Unit Tests: ENABLED (testing workflow changes)"
            echo "    üê≥ Docker Build: SKIPPED (no build workflow changes)"
            echo "    üéØ E2E Tests: SKIPPED (no E2E workflow changes)"
          elif [[ "${{ steps.decision-matrix.outputs.workflow-validation-level }}" == "docker" ]]; then
            echo "üê≥ Docker workflow changes - Validating build process"
            echo "    üß™ Unit Tests: SKIPPED (no test workflow changes)"
            echo "    üê≥ Docker Build: ENABLED (testing Docker workflow changes)"
            echo "    üéØ E2E Tests: SKIPPED (no E2E workflow changes)"
          elif [[ "${{ steps.decision-matrix.outputs.workflow-validation-level }}" == "e2e" ]]; then
            echo "üéØ E2E workflow changes - Validating integration tests"
            echo "    üß™ Unit Tests: ENABLED (E2E tests need unit test artifacts)"
            echo "    üê≥ Docker Build: ENABLED (E2E tests need Docker images)"
            echo "    üéØ E2E Tests: ENABLED (testing E2E workflow changes)"
          elif [[ "${{ steps.decision-matrix.outputs.workflow-validation-level }}" == "minimal" ]]; then
            echo "‚ö° Infrastructure workflow changes - Fast path (minimal validation)"
            echo "    üß™ Unit Tests: SKIPPED (infrastructure workflows don't affect tests)"
            echo "    üê≥ Docker Build: SKIPPED (infrastructure workflows don't affect builds)"
            echo "    üéØ E2E Tests: SKIPPED (infrastructure workflows don't affect E2E)"
          elif [[ "${{ steps.decision-matrix.outputs.fast-path-eligible }}" == "true" ]]; then
            echo "‚ö° Fast path - No significant code changes detected"
            echo "    üß™ Unit Tests: SKIPPED (no significant changes)"
            echo "    üê≥ Docker Build: SKIPPED (no significant changes)"
            echo "    üéØ E2E Tests: SKIPPED (no significant changes)"
          else
            echo "ü§î Unexpected state - Please check decision matrix logic"
            echo "    This should not happen - all cases should be covered"
          fi

  # Job 2: Setup configuration for callable workflows (convert env vars to job outputs)
  setup-config:
    runs-on: ubuntu-latest
    outputs:
      java-version: ${{ steps.config.outputs.java-version }}
      docker-registry: ${{ steps.config.outputs.docker-registry }}
      webauthn-image-name: ${{ steps.config.outputs.webauthn-image-name }}
      test-credentials-image-name: ${{ steps.config.outputs.test-credentials-image-name }}
    steps:
      - name: Setup configuration outputs
        id: config
        run: |
          echo "java-version=${{ env.JAVA_VERSION }}" >> $GITHUB_OUTPUT
          echo "docker-registry=${{ env.DOCKER_REGISTRY }}" >> $GITHUB_OUTPUT
          echo "webauthn-image-name=${{ env.DOCKER_IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "test-credentials-image-name=${{ env.DOCKER_TEST_CREDENTIALS_IMAGE_NAME }}" >> $GITHUB_OUTPUT

  # Job 3: Run unit tests using callable workflow
  run-unit-tests:
    uses: ./.github/workflows/unit-tests.yml
    needs: [ detect-changes, setup-config ]
    if: needs.detect-changes.outputs.should-run-tests == 'true'
    with:
      changes-detected: ${{ needs.detect-changes.outputs.should-run-tests == 'true' }}
      test-scope: 'all'
      java-version: ${{ needs.setup-config.outputs.java-version }}
    secrets: inherit

  # Job 4: Docker build, scan, and push using callable workflow
  docker-build-scan-push:
    uses: ./.github/workflows/docker-build.yml
    needs: [ detect-changes, setup-config, run-unit-tests ]
    if: |
      always() &&
      needs.detect-changes.outputs.should-build-docker == 'true' &&
      (needs.run-unit-tests.result == 'success' ||
       needs.run-unit-tests.result == 'skipped' ||
       needs.detect-changes.outputs.should-run-tests == 'false')
    with:
      webauthn-docker-changes-detected: ${{ needs.detect-changes.outputs.webauthn-docker-changes-detected }}
      test-credentials-docker-changes-detected: ${{ needs.detect-changes.outputs.test-credentials-docker-changes-detected }}
      java-version: ${{ needs.setup-config.outputs.java-version }}
      registry-url: ${{ needs.setup-config.outputs.docker-registry }}
      webauthn-image-name: ${{ needs.setup-config.outputs.webauthn-image-name }}
      test-credentials-image-name: ${{ needs.setup-config.outputs.test-credentials-image-name }}
    secrets: inherit

  # Job 5: Report build results (E2E triggering now handled by orchestrator)
  report-build-results:
    runs-on: ubuntu-latest
    needs: [ detect-changes, run-unit-tests, docker-build-scan-push ]
    if: always()
    steps:
      - name: Report build status
        run: |
          echo "üìä Build and Test Results Summary:"
          echo "Fast path eligible: ${{ needs.detect-changes.outputs.fast-path-eligible }}"
          echo "Should run tests: ${{ needs.detect-changes.outputs.should-run-tests }}"
          echo "Should build Docker: ${{ needs.detect-changes.outputs.should-build-docker }}"
          echo "Source code changes: ${{ needs.detect-changes.outputs.source-code-changes }}"
          echo "Dockerfile-only changes: ${{ needs.detect-changes.outputs.dockerfile-only-changes }}"
          echo "Workflow validation level: ${{ needs.detect-changes.outputs.workflow-validation-level }}"
          echo "Unit tests: ${{ needs.run-unit-tests.result }}"
          echo "Unit tests passed: ${{ needs.run-unit-tests.outputs.tests-passed }}"
          echo "Coverage uploaded: ${{ needs.run-unit-tests.outputs.coverage-uploaded }}"
          echo "Docker images built: ${{ needs.docker-build-scan-push.outputs.images-built }}"
          echo "Docker images pushed: ${{ needs.docker-build-scan-push.outputs.images-pushed }}"
          echo "Security scan passed: ${{ needs.docker-build-scan-push.outputs.security-scan-passed }}"
          echo "Critical vulnerabilities: ${{ needs.docker-build-scan-push.outputs.critical-vulnerabilities }}"

          if [[ "${{ needs.docker-build-scan-push.outputs.images-pushed }}" == "true" ]]; then
            echo "‚úÖ Docker images successfully built, scanned, and pushed:"
            echo "  WebAuthn Server: ${{ needs.docker-build-scan-push.outputs.webauthn-server-image }}"
            echo "  Test Credentials: ${{ needs.docker-build-scan-push.outputs.test-credentials-image }}"
            echo "üîí Security scan passed with ${{ needs.docker-build-scan-push.outputs.critical-vulnerabilities }} critical vulnerabilities"
            echo "üöÄ Ready for E2E tests"
          elif [[ "${{ needs.docker-build-scan-push.outputs.security-scan-passed }}" == "false" ]]; then
            echo "üö® SECURITY SCAN FAILED - Docker images built but NOT pushed"
            echo "Critical vulnerabilities found: ${{ needs.docker-build-scan-push.outputs.critical-vulnerabilities }}"
            echo "‚ùå Images blocked from registry due to security issues"
          elif [[ "${{ needs.docker-build-scan-push.outputs.images-built }}" == "true" ]]; then
            echo "üîß Docker images built successfully but push was skipped or failed"
            echo "Security scan status: ${{ needs.docker-build-scan-push.outputs.security-scan-passed }}"
          elif [[ "${{ needs.detect-changes.outputs.fast-path-eligible }}" == "true" ]]; then
            echo "‚ö° Fast path completed - no builds needed (docs/workflow changes only)"
          elif [[ "${{ needs.run-unit-tests.outputs.tests-passed }}" == "true" ]]; then
            echo "üîß Unit tests passed, Docker build skipped (test-only changes)"
          else
            echo "üìã Build phase analysis completed"
          fi

# Client Library Publishing Orchestrator - Simplified Parallel Architecture
#
# This orchestrator workflow coordinates independent TypeScript and Android client
# generation and publishing workflows for maximum parallelization and platform
# team ownership.
#
# SIMPLIFIED DESIGN PATTERN:
# - Each platform workflow is completely self-contained (generation + publishing)
# - No artifact sharing - each platform handles its own OpenAPI client generation
# - True parallel execution with independent failure isolation
# - Platform teams can own and maintain their specific workflows
#
# PERFORMANCE BENEFITS:
# - 50%+ faster than sequential execution
# - Independent platform failures don't block each other
# - No artifact upload/download overhead
# - True parallelism from start to finish
#
# INPUTS:
#   publish-type: 'staging' or 'production'
#   client-version: Version for client libraries (e.g., 'pr-123.456' or '1.0.32')
#   pr-number: PR number (required for staging, ignored for production)
#   npm-scope: NPM package scope
#
# OUTPUTS:
#   typescript-package-name: Full TypeScript package name published
#   android-package-name: Full Android Maven coordinates published
#   staging-published: Whether staging packages were published
#   production-published: Whether production packages were published
#   typescript-published: Whether TypeScript package was published
#   typescript-skipped: Whether TypeScript publishing was skipped
#   android-published: Whether Android package was published
#   android-skipped: Whether Android publishing was skipped

name: Client Library Publishing Orchestrator

on:
  workflow_call:
    inputs:
      publish-type:
        description: 'Publishing type (staging/production)'
        required: true
        type: string
        default: 'staging'
      client-version:
        description: 'Version for client libraries'
        required: true
        type: string
      pr-number:
        description: 'PR number (for staging only)'
        required: false
        type: string
      npm-scope:
        description: 'NPM package scope'
        required: true
        type: string
    outputs:
      # Backward-compatible outputs for existing calling workflows
      typescript-package-name:
        description: 'TypeScript package name published'
        value: ${{ jobs.aggregate-results.outputs.typescript-package-name }}
      android-package-name:
        description: 'Android Maven coordinates published'
        value: ${{ jobs.aggregate-results.outputs.android-package-name }}
      staging-published:
        description: 'Whether staging packages were published'
        value: ${{ jobs.aggregate-results.outputs.staging-published }}
      production-published:
        description: 'Whether production packages were published'
        value: ${{ jobs.aggregate-results.outputs.production-published }}
      # New granular outputs for advanced monitoring
      typescript-published:
        description: 'Whether TypeScript package was actually published (not skipped)'
        value: ${{ jobs.aggregate-results.outputs.typescript-published }}
      typescript-skipped:
        description: 'Whether TypeScript package publishing was skipped (version exists)'
        value: ${{ jobs.aggregate-results.outputs.typescript-skipped }}
      android-published:
        description: 'Whether Android package was actually published (not skipped)'
        value: ${{ jobs.aggregate-results.outputs.android-published }}
      android-skipped:
        description: 'Whether Android package publishing was skipped (version exists)'
        value: ${{ jobs.aggregate-results.outputs.android-skipped }}

env:
  # Centralized package configuration
  NPM_PACKAGE_NAME: "mpo-webauthn-client"
  ANDROID_GROUP_ID: "io.github.hitoshura25"
  ANDROID_ARTIFACT_BASE_ID: "mpo-webauthn-android-client"

jobs:
  # Job 1: Input validation and shared configuration
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      validated: ${{ steps.validation.outputs.validated }}
    steps:
      - name: Validate workflow inputs
        id: validation
        run: |
          echo "🔍 Validating workflow inputs..."
          echo "  Publish type: ${{ inputs.publish-type }}"
          echo "  Client version: ${{ inputs.client-version }}"
          echo "  PR number: ${{ inputs.pr-number }}"
          echo "  NPM scope: ${{ inputs.npm-scope }}"

          if [[ "${{ inputs.publish-type }}" != "staging" && "${{ inputs.publish-type }}" != "production" ]]; then
            echo "❌ Invalid publish-type: ${{ inputs.publish-type }}"
            echo "   Must be 'staging' or 'production'"
            exit 1
          fi

          if [[ "${{ inputs.publish-type }}" == "staging" && -z "${{ inputs.pr-number }}" ]]; then
            echo "❌ PR number is required for staging publishes"
            exit 1
          fi

          echo "✅ Input validation passed"
          echo "validated=true" >> $GITHUB_OUTPUT

  # Job 2: Convert environment variables to job outputs (required for callable workflows)
  setup-config:
    runs-on: ubuntu-latest
    outputs:
      npm-package-name: ${{ steps.config.outputs.npm-package-name }}
      android-group-id: ${{ steps.config.outputs.android-group-id }}
      android-artifact-base-id: ${{ steps.config.outputs.android-artifact-base-id }}
    steps:
      - name: Setup configuration outputs
        id: config
        run: |
          echo "🔧 Converting environment variables to job outputs for callable workflows..."
          echo "npm-package-name=${{ env.NPM_PACKAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "android-group-id=${{ env.ANDROID_GROUP_ID }}" >> $GITHUB_OUTPUT
          echo "android-artifact-base-id=${{ env.ANDROID_ARTIFACT_BASE_ID }}" >> $GITHUB_OUTPUT
          echo "✅ Configuration outputs set"

  # Job 3: TypeScript client generation and publishing (parallel)
  publish-typescript:
    uses: ./.github/workflows/publish-typescript.yml
    needs: [validate-inputs, setup-config]
    if: needs.validate-inputs.outputs.validated == 'true'
    permissions:
      contents: read
      packages: write    # Required for GitHub Packages publishing
      id-token: write   # Required for npm provenance in production
    with:
      publish-type: ${{ inputs.publish-type }}
      client-version: ${{ inputs.client-version }}
      npm-scope: ${{ inputs.npm-scope }}
      npm-package-name: ${{ needs.setup-config.outputs.npm-package-name }}
      android-group-id: ${{ needs.setup-config.outputs.android-group-id }}  # Needed for Gradle generation
    secrets:
      GRADLE_ENCRYPTION_KEY: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Job 4: Android client generation and publishing (parallel)
  publish-android:
    uses: ./.github/workflows/publish-android.yml
    needs: [validate-inputs, setup-config]
    if: needs.validate-inputs.outputs.validated == 'true'
    permissions:
      contents: read
      packages: write   # Required for GitHub Packages publishing
    with:
      publish-type: ${{ inputs.publish-type }}
      client-version: ${{ inputs.client-version }}
      android-group-id: ${{ needs.setup-config.outputs.android-group-id }}
      android-artifact-base-id: ${{ needs.setup-config.outputs.android-artifact-base-id }}
    secrets:
      GRADLE_ENCRYPTION_KEY: ${{ secrets.GRADLE_ENCRYPTION_KEY }}

  # Job 5: Aggregate results and provide backward-compatible outputs
  aggregate-results:
    needs: [validate-inputs, setup-config, publish-typescript, publish-android]
    runs-on: ubuntu-latest
    # Always run to provide outputs, even if publishing jobs failed
    if: always() && needs.validate-inputs.outputs.validated == 'true'
    outputs:
      # Backward-compatible outputs for existing calling workflows
      typescript-package-name: ${{ needs.publish-typescript.outputs.package-name }}
      android-package-name: ${{ needs.publish-android.outputs.package-name }}
      staging-published: ${{ steps.aggregate-status.outputs.staging-published }}
      production-published: ${{ steps.aggregate-status.outputs.production-published }}
      # New granular outputs for advanced usage
      typescript-published: ${{ needs.publish-typescript.outputs.published }}
      typescript-skipped: ${{ needs.publish-typescript.outputs.skipped }}
      android-published: ${{ needs.publish-android.outputs.published }}
      android-skipped: ${{ needs.publish-android.outputs.skipped }}
    steps:
      - name: Aggregate publishing status
        id: aggregate-status
        run: |
          echo "📊 Aggregating publishing results..."
          echo "  TypeScript result: ${{ needs.publish-typescript.result }}"
          echo "  TypeScript published: ${{ needs.publish-typescript.outputs.published }}"
          echo "  TypeScript skipped: ${{ needs.publish-typescript.outputs.skipped }}"
          echo "  Android result: ${{ needs.publish-android.result }}"
          echo "  Android published: ${{ needs.publish-android.outputs.published }}"
          echo "  Android skipped: ${{ needs.publish-android.outputs.skipped }}"

          # Determine overall staging/production status for backward compatibility
          if [[ "${{ inputs.publish-type }}" == "staging" ]]; then
            # For staging, consider published if either platform was published (not skipped)
            # Handle job failures gracefully
            TS_PUBLISHED="false"
            ANDROID_PUBLISHED="false"
            
            if [[ "${{ needs.publish-typescript.result }}" == "success" && "${{ needs.publish-typescript.outputs.published }}" == "true" ]]; then
              TS_PUBLISHED="true"
            fi
            
            if [[ "${{ needs.publish-android.result }}" == "success" && "${{ needs.publish-android.outputs.published }}" == "true" ]]; then
              ANDROID_PUBLISHED="true"
            fi
            
            if [[ "${TS_PUBLISHED}" == "true" || "${ANDROID_PUBLISHED}" == "true" ]]; then
              echo "staging-published=true" >> $GITHUB_OUTPUT
            else
              echo "staging-published=false" >> $GITHUB_OUTPUT
            fi
            echo "production-published=false" >> $GITHUB_OUTPUT
          else
            echo "staging-published=false" >> $GITHUB_OUTPUT
            # For production, consider published if both platforms succeeded
            if [[ "${{ needs.publish-typescript.result }}" == "success" && "${{ needs.publish-android.result }}" == "success" ]]; then
              echo "production-published=true" >> $GITHUB_OUTPUT
            else
              echo "production-published=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Publishing summary
        run: |
          echo "🎯 Client Library Publishing Summary (Simplified Parallel Architecture):"
          echo "  Publish type: ${{ inputs.publish-type }}"
          echo ""
          echo "  📦 TypeScript Results:"
          echo "    Package: ${{ needs.publish-typescript.outputs.package-name }}"
          echo "    Status: ${{ needs.publish-typescript.result }}"
          echo "    Published: ${{ needs.publish-typescript.outputs.published }}"
          echo "    Skipped: ${{ needs.publish-typescript.outputs.skipped }}"
          echo ""
          echo "  📱 Android Results:"
          echo "    Package: ${{ needs.publish-android.outputs.package-name }}"
          echo "    Status: ${{ needs.publish-android.result }}"
          echo "    Published: ${{ needs.publish-android.outputs.published }}"
          echo "    Skipped: ${{ needs.publish-android.outputs.skipped }}"
          echo ""
          echo "  🎯 Overall Results:"
          echo "    Staging published: ${{ steps.aggregate-status.outputs.staging-published }}"
          echo "    Production published: ${{ steps.aggregate-status.outputs.production-published }}"
          echo ""
          echo "  ⚡ Performance: True parallel execution - no artifact sharing overhead"
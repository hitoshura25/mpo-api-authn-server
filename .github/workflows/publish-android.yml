# Android Client Generation & Publishing - Platform-Specific Workflow
#
# This callable workflow handles complete Android client lifecycle:
# generation from OpenAPI spec + Maven publishing to appropriate registries.
#
# DESIGN PATTERN:
# - Self-contained platform workflow (generation + publishing)
# - No external artifact dependencies
# - Registry-aware publishing (staging vs production)
# - Version conflict detection and handling
# - Automated Maven Central publishing (no manual steps required)
#
# INPUTS:
#   client-version: Version for Android library
#   android-group-id: Android group ID
#   android-artifact-base-id: Base Android artifact ID (e.g., mpo-webauthn-android-client)
#   publish-type: 'staging' or 'production' (affects artifact naming)
#
# OUTPUTS:
#   published: Whether package was successfully published (not skipped)
#   skipped: Whether publishing was skipped (version exists)
#   package-name: Full Maven coordinates (for backward compatibility)
#   package-full-name: Complete Maven coordinates with version
#
# SECURITY:
#   - GitHub Packages: Uses GITHUB_TOKEN (automatic)
#   - Maven Central: Uses Central Portal with automatic release (vanniktech plugin)
#   - Minimal permissions: contents:read, packages:write

name: Android Client Publishing

on:
  workflow_call:
    inputs:
      client-version:
        description: 'Version for Android library'
        required: true
        type: string
      android-group-id:
        description: 'Android group ID'
        required: true
        type: string
      android-artifact-base-id:
        description: 'Base Android artifact ID (e.g., mpo-webauthn-android-client)'
        required: true
        type: string
      publish-type:
        description: 'Publishing type (staging/production)'
        required: true
        type: string
      # Environment-specific repository configuration inputs for centralized config
      android-repository-url:
        description: 'Android repository URL for selected environment'
        required: true
        type: string
      android-username-env:
        description: 'Environment variable name for repository username'
        required: true
        type: string
      android-password-env:
        description: 'Environment variable name for repository password'
        required: true
        type: string
      # android-username-property and android-password-property removed  
      # Repository name "PublishingRepository" requires specific Gradle property names:
      # "PublishingRepositoryUsername" and "PublishingRepositoryPassword"
      # These are provided via ORG_GRADLE_PROJECT_ environment variables for cache compatibility
      android-suffix:
        description: 'Suffix to append to artifact ID for selected environment'
        required: true
        type: string
    secrets:
      GRADLE_ENCRYPTION_KEY:
        description: 'Gradle build cache encryption key'
        required: true
      CENTRAL_PORTAL_USERNAME:
        description: 'Central Portal username for Maven Central publishing'
        required: false
      CENTRAL_PORTAL_PASSWORD:
        description: 'Central Portal password for Maven Central publishing'
        required: false
      SIGNING_KEY:
        description: 'GPG private key for signing Maven Central artifacts'
        required: false
      SIGNING_PASSWORD:
        description: 'GPG private key password for signing'
        required: false
    outputs:
      published:
        description: 'Whether package was successfully published'
        value: ${{ jobs.publish-android.outputs.published }}
      skipped:
        description: 'Whether publishing was skipped (version exists)'
        value: ${{ jobs.publish-android.outputs.skipped }}
      package-name:
        description: 'Full Maven coordinates (for backward compatibility)'
        value: ${{ jobs.publish-android.outputs.package-name }}
      package-full-name:
        description: 'Complete Maven coordinates with version'
        value: ${{ jobs.publish-android.outputs.package-full-name }}

jobs:
  publish-android:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # Required for creating GitHub releases (production) and reading code
      packages: write   # Required for GitHub Packages publishing
    outputs:
      published: ${{ steps.publish-result.outputs.published }}
      skipped: ${{ steps.publish-result.outputs.skipped }}
      package-name: ${{ steps.package-info.outputs.package-name }}
      package-full-name: ${{ steps.package-info.outputs.package-full-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set package information
        id: package-info
        run: |
          # Determine artifact ID based on publish type using centralized configuration
          ANDROID_ARTIFACT_ID="${{ inputs.android-artifact-base-id }}${{ inputs.android-suffix }}"
          echo "📦 ${{ inputs.publish-type == 'staging' && 'STAGING' || 'PRODUCTION' }} Android package (suffix: '${{ inputs.android-suffix }}')"

          PACKAGE_NAME="${{ inputs.android-group-id }}:${ANDROID_ARTIFACT_ID}"
          PACKAGE_FULL_NAME="${PACKAGE_NAME}:${{ inputs.client-version }}"

          echo "android-artifact-id=${ANDROID_ARTIFACT_ID}" >> $GITHUB_OUTPUT
          echo "package-name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
          echo "package-full-name=${PACKAGE_FULL_NAME}" >> $GITHUB_OUTPUT

          echo "📱 Android Package Information (from central config):"
          echo "  Group ID: ${{ inputs.android-group-id }}"
          echo "  Artifact ID: ${ANDROID_ARTIFACT_ID}"
          echo "  Version: ${{ inputs.client-version }}"
          echo "  Full coordinates: ${PACKAGE_FULL_NAME}"
          echo "  Publish type: ${{ inputs.publish-type }}"

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Standardized Gradle caching for Android client publishing 
      # Include android-client-library configuration cache for cross-step compatibility
      - name: Setup Gradle cache for Android client publishing
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle/configuration-cache
            android-client-library/.gradle/configuration-cache
          key: gradle-android-publish-${{ runner.os }}-${{ github.ref_name }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-android-publish-${{ runner.os }}-${{ github.ref_name }}-
            gradle-android-publish-${{ runner.os }}-main-
            gradle-android-publish-${{ runner.os }}-

      # Optimized Gradle setup with standardized caching
      - name: Setup Gradle for Android publishing
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
          build-scan-publish: true
          build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
          build-scan-terms-of-use-agree: "yes"
          # Disable built-in cache since we're managing it manually for cross-workflow sharing
          cache-disabled: true


      - name: Check if Android package version already exists
        id: check-android-version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ANDROID_ARTIFACT_ID="${{ steps.package-info.outputs.android-artifact-id }}"
          echo "🔍 Checking if Android version already exists: ${{ inputs.android-group-id }}:${ANDROID_ARTIFACT_ID}:${{ inputs.client-version }}"

          # Check if version exists in GitHub Packages
          if gh api "/user/packages/maven/${{ inputs.android-group-id }}/${ANDROID_ARTIFACT_ID}/versions" --jq ".[].name" | grep -q "^${{ inputs.client-version }}$"; then
            echo "⚠️ Version ${{ inputs.client-version }} already exists for ${ANDROID_ARTIFACT_ID}"
            echo "skip-publish=true" >> $GITHUB_OUTPUT
          else
            echo "✅ Version ${{ inputs.client-version }} does not exist, proceeding with publish"
            echo "skip-publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate and publish Android client
        if: steps.check-android-version.outputs.skip-publish == 'false' || inputs.publish-type == 'production'
        env:
          # Configuration for template (environment variables only for configuration cache compatibility)
          CLIENT_VERSION: ${{ inputs.client-version }}
          ANDROID_ARTIFACT_ID: ${{ steps.package-info.outputs.android-artifact-id }}
          ANDROID_GROUP_ID: ${{ inputs.android-group-id }}
          PUBLISH_TYPE: ${{ inputs.publish-type }}
          # Repository configuration from central config (environment-specific)
          ANDROID_REPOSITORY_URL: ${{ inputs.android-repository-url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          # Gradle publishing credentials using ORG_GRADLE_PROJECT_ prefix for configuration cache compatibility
          # These environment variables become Gradle project properties automatically
          ORG_GRADLE_PROJECT_PublishingRepositoryUsername: ${{ inputs.publish-type == 'staging' && github.actor || secrets.CENTRAL_PORTAL_USERNAME }}
          ORG_GRADLE_PROJECT_PublishingRepositoryPassword: ${{ inputs.publish-type == 'staging' && secrets.GITHUB_TOKEN || secrets.CENTRAL_PORTAL_PASSWORD }}
          # Maven Central credentials (production only)
          CENTRAL_PORTAL_USERNAME: ${{ secrets.CENTRAL_PORTAL_USERNAME }}
          CENTRAL_PORTAL_PASSWORD: ${{ secrets.CENTRAL_PORTAL_PASSWORD }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
        run: |
          echo "📱 Generating and publishing Android client to ${{ inputs.publish-type }} repository (from central config)..."
          echo "  Group ID: ${ANDROID_GROUP_ID}"
          echo "  Artifact ID: ${ANDROID_ARTIFACT_ID}"
          echo "  Version: ${CLIENT_VERSION}"
          echo "  Repository URL: ${ANDROID_REPOSITORY_URL}"
          echo "  Credentials: Using ORG_GRADLE_PROJECT_ environment variables (configuration cache compatible)"
          
          # Log exactly what credentials are being used for debugging
          if [[ "${{ inputs.publish-type }}" == "production" ]]; then
            echo "🔍 PRODUCTION Publishing Configuration:"
            echo "  Registry: Maven Central (Portal OSSRH Staging API)"
            echo "  Repository URL: ${ANDROID_REPOSITORY_URL}"
            echo "  Username: ${ORG_GRADLE_PROJECT_PublishingRepositoryUsername}"
            echo "  GPG Signing: ${SIGNING_KEY:+ENABLED}${SIGNING_KEY:-DISABLED}"
            echo "  API Type: Portal OSSRH Staging API (Bridge)"
          else
            echo "🔍 STAGING Publishing Configuration:"
            echo "  Registry: GitHub Packages"
            echo "  Repository URL: ${ANDROID_REPOSITORY_URL}"
            echo "  Username: ${ORG_GRADLE_PROJECT_PublishingRepositoryUsername}"
          fi
          
          # Validate required environment variables for template processing
          if [[ -z "${ANDROID_REPOSITORY_URL}" ]]; then
            echo "❌ ERROR: ANDROID_REPOSITORY_URL is required but not set"
            exit 1
          fi
          
          # Generate and publish Android client using environment variables only
          # This maintains configuration cache compatibility by avoiding Gradle property changes
          echo "🔧 Generating Android client..."
          echo "🔍 Using ORG_GRADLE_PROJECT_ credentials approach (configuration cache compatible)"
          echo "🔍 Publish type: ${{ inputs.publish-type }}"
          echo "🔍 Selected credentials: ${{ inputs.publish-type == 'staging' && 'GitHub (github.actor + GITHUB_TOKEN)' || 'Maven Central (CENTRAL_PORTAL credentials)' }}"
          echo "🔍 These env vars become Gradle project properties automatically:"
          echo "  ORG_GRADLE_PROJECT_PublishingRepositoryUsername -> project.findProperty('PublishingRepositoryUsername')"
          echo "  ORG_GRADLE_PROJECT_PublishingRepositoryPassword -> project.findProperty('PublishingRepositoryPassword')"
          echo "🔍 Username: ${ORG_GRADLE_PROJECT_PublishingRepositoryUsername}"
          ./gradlew generateAndroidClient copyAndroidClientToSubmodule \
            --build-cache --parallel --configuration-cache
          
          echo "🔍 Verifying build.gradle.kts generation..."
          if [ -f "android-client-library/build.gradle.kts" ]; then
            echo "✅ build.gradle.kts generated successfully"
            echo "📏 File size: $(wc -c < android-client-library/build.gradle.kts) bytes"
          else
            echo "❌ ERROR: build.gradle.kts was NOT generated (cache/output issue)"
            exit 1
          fi
          
          echo "📦 Publishing Android client..."
          
          # Credentials via ORG_GRADLE_PROJECT_ environment variables (converted to properties automatically)
          echo "🔍 Running publish with ORG_GRADLE_PROJECT_ credentials (configuration cache compatible)"
          
          if [[ "${{ inputs.publish-type }}" == "production" ]]; then
            echo "🚀 PRODUCTION: Using vanniktech plugin with automaticRelease=true for Maven Central"
            echo "   ✅ No manual release steps required"
            echo "   ✅ Packages will be automatically available on Maven Central"
          else
            echo "📦 STAGING: Publishing to GitHub Packages"
          fi
          
          ./gradlew :android-client-library:publish \
            --build-cache --parallel --configuration-cache

          echo "✅ Android client generated and published to ${{ inputs.publish-type }} repository successfully"

      - name: Verify Android package publication
        if: (steps.check-android-version.outputs.skip-publish == 'false' || inputs.publish-type == 'production') && inputs.publish-type == 'production'
        env:
          ANDROID_ARTIFACT_ID: ${{ steps.package-info.outputs.android-artifact-id }}
          ANDROID_GROUP_ID: ${{ inputs.android-group-id }}
          CLIENT_VERSION: ${{ inputs.client-version }}
        run: |
          echo "🔍 Verifying Maven Central publication..."
          echo "  Package: ${ANDROID_GROUP_ID}:${ANDROID_ARTIFACT_ID}:${CLIENT_VERSION}"
          
          # Note: With automaticRelease=true, packages are automatically published without manual steps
          echo "✅ Maven Central Publication Process (Automated):"
          echo "  1. ✅ Published to Central Portal with automatic release"
          echo "  2. ✅ Automatically signed and released to Maven Central"
          echo "  3. ⏳ Indexing in Maven Central search (2-4 hours)"
          echo "  4. ✅ Immediately available for download via Maven coordinates"
          
          echo "🔗 Verification Links:"
          echo "  Central Portal: https://central.sonatype.com/publishing"
          echo "  Maven Central Search: https://search.maven.org/search?q=g:${ANDROID_GROUP_ID}+AND+a:${ANDROID_ARTIFACT_ID}"
          echo "  Maven Repository: https://repo1.maven.org/maven2/${ANDROID_GROUP_ID//.//}/${ANDROID_ARTIFACT_ID}/"
          
          echo "📋 Status:"
          echo "  ✅ Package automatically released to Maven Central"
          echo "  ✅ No manual intervention required"
          echo "  ⏳ Search indexing will complete within 2-4 hours"
          echo "  ✅ Package immediately consumable via Maven coordinates"
          
          echo "✅ Automated publication completed successfully"

      - name: Verify GitHub Packages publication
        if: (steps.check-android-version.outputs.skip-publish == 'false' || inputs.publish-type == 'production') && inputs.publish-type == 'staging'
        env:
          ANDROID_ARTIFACT_ID: ${{ steps.package-info.outputs.android-artifact-id }}
          ANDROID_GROUP_ID: ${{ inputs.android-group-id }}
          CLIENT_VERSION: ${{ inputs.client-version }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Verifying GitHub Packages publication..."
          echo "  Package: ${ANDROID_GROUP_ID}:${ANDROID_ARTIFACT_ID}:${CLIENT_VERSION}"
          
          # Give GitHub API a moment to update
          echo "⏳ Waiting 10 seconds for GitHub Packages API to update..."
          sleep 10
          
          # Check if the published version is now available
          echo "🔍 Checking GitHub Packages API for published version..."
          if gh api "/user/packages/maven/${{ inputs.android-group-id }}/${ANDROID_ARTIFACT_ID}/versions" --jq ".[].name" | grep -q "^${{ inputs.client-version }}$"; then
            echo "✅ VERIFICATION SUCCESS: Version ${{ inputs.client-version }} is now available in GitHub Packages"
            
            # Get additional package information
            PACKAGE_URL="https://github.com/users/${{ github.repository_owner }}/packages/maven/package/${{ inputs.android-group-id }}%2F${ANDROID_ARTIFACT_ID}"
            echo "🔗 Package URL: ${PACKAGE_URL}"
            
            # Show published versions count
            VERSION_COUNT=$(gh api "/user/packages/maven/${{ inputs.android-group-id }}/${ANDROID_ARTIFACT_ID}/versions" --jq "length")
            echo "📊 Total published versions: ${VERSION_COUNT}"
          else
            echo "⚠️ VERIFICATION WARNING: Version ${{ inputs.client-version }} not yet visible in GitHub Packages API"
            echo "   This may be due to API propagation delay (usually 1-2 minutes)"
            echo "   The package was published successfully but API visibility is delayed"
            
            # Show what versions are currently visible
            echo "🔍 Currently visible versions:"
            gh api "/user/packages/maven/${{ inputs.android-group-id }}/${ANDROID_ARTIFACT_ID}/versions" --jq ".[].name" | head -5 || echo "   No versions visible yet"
            
            # Don't fail the workflow - this is just verification lag
            echo "ℹ️ Continuing workflow - this is normal API propagation delay"
          fi

      - name: Skip Android publishing (version exists)
        if: inputs.publish-type == 'staging' && steps.check-android-version.outputs.skip-publish == 'true'
        run: |
          echo "⏭️ Skipping Android client publishing - version ${{ inputs.client-version }} already exists"

      - name: Set publish result
        id: publish-result
        run: |
          if [[ "${{ inputs.publish-type }}" == "staging" ]]; then
            if [[ "${{ steps.check-android-version.outputs.skip-publish }}" == "true" ]]; then
              echo "published=false" >> $GITHUB_OUTPUT
              echo "skipped=true" >> $GITHUB_OUTPUT
            else
              echo "published=true" >> $GITHUB_OUTPUT
              echo "skipped=false" >> $GITHUB_OUTPUT
            fi
          else
            # Production publishing doesn't check for existing versions
            echo "published=true" >> $GITHUB_OUTPUT
            echo "skipped=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release for Android Client (production only)
        if: inputs.publish-type == 'production' && steps.publish-result.outputs.published == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "android-client-v${{ inputs.client-version }}"
          name: "Android Client v${{ inputs.client-version }}"
          body: |
            ## Android Client Library v${{ inputs.client-version }}

            Generated Android client library for MPO WebAuthn API.

            ### Installation

            Add to your `build.gradle`:

            ```gradle
            repositories {
                mavenCentral()
            }

            dependencies {
                implementation '${{ steps.package-info.outputs.package-name }}:${{ inputs.client-version }}'
            }
            ```

            ### Usage

            ```kotlin
            import ${{ inputs.android-group-id }}.client.api.*
            import ${{ inputs.android-group-id }}.client.model.*

            val config = Configuration(
                basePath = "https://your-webauthn-server.com"
            )
            val authApi = AuthenticationApi(config)
            val regApi = RegistrationApi(config)
            ```

            ### Features
            - Full WebAuthn registration and authentication support
            - Compatible with Android API 26+
            - Type-safe Kotlin client
            - Supports FIDO2/WebAuthn standards

            ### Changes
            - Generated from OpenAPI specification
            - Supports WebAuthn registration and authentication flows
            - Published to Maven Central with automatic release

            ### Documentation
            - [API Documentation](https://github.com/${{ github.repository }}/blob/main/docs/setup/client-generation.md)
            - [Android Integration Guide](https://github.com/${{ github.repository }}/blob/main/android-test-client/README.md)

            ### Published Package
            - **Maven Central**: ${{ steps.package-info.outputs.package-full-name }}
          draft: false
          prerelease: false

      - name: Android publishing summary
        run: |
          echo "🎯 Android Client Publishing Results:"
          echo "  Package: ${{ steps.package-info.outputs.package-full-name }}"
          echo "  Publish type: ${{ inputs.publish-type }}"
          echo "  Registry: ${{ inputs.publish-type == 'staging' && 'GitHub Packages' || 'Maven Central' }}"
          echo "  Published: ${{ steps.publish-result.outputs.published }}"
          echo "  Skipped: ${{ steps.publish-result.outputs.skipped }}"
          if [[ "${{ inputs.publish-type }}" == "production" && "${{ steps.publish-result.outputs.published }}" == "true" ]]; then
            echo "  GitHub Release: Created with tag android-client-v${{ inputs.client-version }}"
          fi

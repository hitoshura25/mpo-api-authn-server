# Main CI/CD Orchestrator Workflow
#
# This workflow orchestrates the entire CI/CD pipeline using callable workflows
# to eliminate workflow dispatch complexity and ensure reliable execution.
#
# ARCHITECTURE:
# 1. Build & Test: Runs unit tests, builds Docker images with smart change detection
# 2. E2E Tests: Runs only when Docker images are built, uses built images for integration tests
#
# BENEFITS:
# ✅ Eliminates 404 errors (workflows exist in PR branch)
# ✅ No PAT permission issues (direct calls)
# ✅ Modular, maintainable architecture
# ✅ E2E tests run in PRs when Docker images built
# ✅ Preserves all existing conditional logic and optimizations
#
# TRIGGERS:
# - Pull requests to main branch
# - Pushes to main branch
# - Manual dispatch with force options (UI)
#
# MANUAL FORCE OPTIONS:
# - Force full pipeline: Runs unit tests + Docker build + E2E tests + security scanning
# - Force Docker build: Runs Docker build + E2E tests (skips unit tests if no code changes)
# - Force unit tests: Runs unit tests only (skips Docker/E2E)
#
# EXECUTION FLOW:
# PR: build-and-test → e2e-tests (if Docker images built)
# Main: build-and-test → e2e-tests (if Docker images built)
# Manual: force options override smart change detection

name: Main CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force-full-pipeline:
        description: 'Force full pipeline (unit tests + Docker build + E2E tests + security scanning)'
        required: false
        default: false
        type: boolean
      force-docker-build:
        description: 'Force Docker build and E2E tests (skip unit tests if no code changes)'
        required: false
        default: false
        type: boolean
      force-unit-tests:
        description: 'Force unit tests only (skip Docker/E2E)'
        required: false
        default: false
        type: boolean

permissions:
  # Workflow-level permissions: minimal by default, jobs can request additional permissions
  contents: read

jobs:
  # Job 1: Build and test with smart change detection
  build-and-test:
    name: Build & Test (Unit Tests + Docker Images)
    uses: ./.github/workflows/build-and-test.yml
    with:
      force-full-pipeline: ${{ inputs.force-full-pipeline || false }}
      force-docker-build: ${{ inputs.force-docker-build || false }}
      force-unit-tests: ${{ inputs.force-unit-tests || false }}
    permissions:
      contents: read          # Read repository code
      packages: write         # Push Docker images to GHCR
      attestations: write     # Generate build attestations
      id-token: write         # OIDC authentication with registries
      security-events: write  # Upload security scan results (SARIF)
      pull-requests: write
      issues: write
    secrets: inherit

  # Job 2: E2E tests using built Docker images
  e2e-tests:
    name: E2E Tests (Web + Android)
    needs: build-and-test
    if: |
      always() &&
      needs.build-and-test.outputs.docker_images_built == 'true'
    uses: ./.github/workflows/e2e-tests.yml
    permissions:
      contents: write         # Required for GitHub release creation in client publishing
      packages: write          # Pull/Push Docker images from GHCR and client lib packages
      pull-requests: write    # Comment on PRs with test results
      id-token: write         # Required for npm publishing
    with:
      workflow-identifier: ${{ github.event.pull_request.number || github.run_number || 'N/A' }}
      webauthn_server_image: ${{ needs.build-and-test.outputs.webauthn_server_image }}
      test_credentials_image: ${{ needs.build-and-test.outputs.test_credentials_image }}
    secrets: inherit

  # Job 3: Security scanning using built Docker images (parallel with E2E tests)
  security-scanning:
    name: Security Scanning (Docker Images)
    needs: build-and-test
    if: |
      always() &&
      needs.build-and-test.outputs.docker_images_built == 'true'
    uses: ./.github/workflows/docker-security-scan.yml
    permissions:
      contents: read          # Read repository code
      security-events: write  # Upload SARIF results to GitHub Security
      pull-requests: write    # Comment on PRs with scan results
      issues: write          # Update issues with security findings
    with:
      webauthn-server-image: ${{ needs.build-and-test.outputs.webauthn_server_image }}
      test-credentials-image: ${{ needs.build-and-test.outputs.test_credentials_image }}
      registry-url: 'ghcr.io'
      skip-scan: false
    secrets: inherit

  # Job 4: Report pipeline status
  report-pipeline-status:
    name: Report Pipeline Status
    runs-on: ubuntu-latest
    needs: [ build-and-test, e2e-tests, security-scanning ]
    if: always()
    outputs:
      pipeline-success: ${{ steps.determine-outcome.outputs.pipeline-success }}
      workflow-outcome: ${{ steps.determine-outcome.outputs.workflow-outcome }}
    steps:
      - name: Report overall pipeline status
        run: |
          echo "🏗️ CI/CD Pipeline Results Summary (Parallel Execution):"
          echo "Build & Test: ${{ needs.build-and-test.result }}"
          echo "Docker Images Built: ${{ needs.build-and-test.outputs.docker_images_built }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Security Scanning: ${{ needs.security-scanning.result }}"

          # Check if build phase failed
          if [[ "${{ needs.build-and-test.result }}" != "success" ]]; then
            echo "❌ Build and test phase failed"
            exit 1
          fi

          echo "✅ Build and test phase completed successfully"

          if [[ "${{ needs.build-and-test.outputs.docker_images_built }}" == "true" ]]; then
            echo "🐳 Docker images were built:"
            echo "  WebAuthn Server: ${{ needs.build-and-test.outputs.webauthn_server_image }}"
            echo "  Test Credentials: ${{ needs.build-and-test.outputs.test_credentials_image }}"

            # Check security scanning results (critical for pipeline success)
            if [[ "${{ needs.security-scanning.result }}" == "failure" ]]; then
              echo "🚨 Security scanning failed - blocking pipeline"
              echo "Critical vulnerabilities found: ${{ needs.security-scanning.outputs.critical-vulnerabilities }}"
              echo "❌ Pipeline blocked due to security issues"
              exit 1
            elif [[ "${{ needs.security-scanning.result }}" == "success" ]]; then
              if [[ "${{ needs.security-scanning.outputs.security-scan-passed }}" == "true" ]]; then
                echo "🔒 Security scanning passed - no critical vulnerabilities"
              else
                echo "🚨 Security scanning completed but found issues"
                echo "Critical vulnerabilities: ${{ needs.security-scanning.outputs.critical-vulnerabilities }}"
                exit 1
              fi
            else
              echo "⏸️ Security scanning was skipped or cancelled"
            fi

            # Check E2E test results
            if [[ "${{ needs.e2e-tests.result }}" == "success" ]]; then
              echo "🧪 E2E tests passed successfully"
            elif [[ "${{ needs.e2e-tests.result }}" == "failure" ]]; then
              echo "❌ E2E tests failed - check integration test results"
              exit 1
            else
              echo "⏸️ E2E tests were skipped or cancelled"
            fi

            # Overall success summary
            if [[ "${{ needs.security-scanning.outputs.security-scan-passed }}" == "true" && "${{ needs.e2e-tests.result }}" == "success" ]]; then
              echo "🎉 Complete CI/CD pipeline passed:"
              echo "  ✅ Security scanning: No critical vulnerabilities"
              echo "  ✅ E2E testing: All integration tests successful"
              echo "  ⚡ Performance: Parallel execution optimized pipeline time"
            fi
          else
            echo "⚡ Fast path completed - no Docker builds needed (docs/workflow changes only)"
          fi

      - name: Determine workflow outcome for cleanup
        id: determine-outcome
        run: |
          # Determine overall pipeline success for staging cleanup
          PIPELINE_SUCCESS=false
          WORKFLOW_OUTCOME="failure"

          # Pipeline is successful if build-and-test succeeded and either:
          # 1. No Docker images were built (fast path)
          # 2. Docker images were built AND security scanning AND E2E tests passed
          if [[ "${{ needs.build-and-test.result }}" == "success" ]]; then
            if [[ "${{ needs.build-and-test.outputs.docker_images_built }}" != "true" ]]; then
              # Fast path - no Docker builds
              PIPELINE_SUCCESS=true
              WORKFLOW_OUTCOME="success"
            elif [[ "${{ needs.security-scanning.outputs.security-scan-passed }}" == "true" && "${{ needs.e2e-tests.result }}" == "success" ]]; then
              # Full pipeline with Docker builds - all tests passed
              PIPELINE_SUCCESS=true
              WORKFLOW_OUTCOME="success"
            fi
          fi

          echo "pipeline-success=$PIPELINE_SUCCESS" >> $GITHUB_OUTPUT
          echo "workflow-outcome=$WORKFLOW_OUTCOME" >> $GITHUB_OUTPUT

          echo "📊 Workflow outcome for staging cleanup: $WORKFLOW_OUTCOME"
          echo "🎯 Pipeline success status: $PIPELINE_SUCCESS"

  # Job 5: Smart staging cleanup (final step)
  smart-staging-cleanup:
    name: Smart Staging Cleanup
    runs-on: ubuntu-latest
    needs: [ build-and-test, e2e-tests, security-scanning, report-pipeline-status ]
    if: always() && github.event_name == 'pull_request'
    permissions:
      contents: read          # Read repository code and git history
      packages: write         # Package access (GitHub Actions tokens cannot have admin permission)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Fetch recent commits to check for [preserve] keyword

      - name: Check for emergency preserve override
        id: check-preserve
        run: |
          # Check latest commit message for [preserve] keyword
          if git log -1 --pretty=%s | grep -i '\[preserve\]' >/dev/null; then
            echo "🚨 EMERGENCY OVERRIDE: [preserve] keyword found in commit message"
            echo "preserve-override=true" >> $GITHUB_OUTPUT
          else
            echo "preserve-override=false" >> $GITHUB_OUTPUT
          fi

      - name: Smart staging cleanup
        if: steps.check-preserve.outputs.preserve-override != 'true'
        env:
          GH_TOKEN: ${{ secrets.PACKAGE_ADMIN_TOKEN }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_PR_NUMBER: ${{ github.event.pull_request.number || '' }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          DOCKER_WEBAUTHN_IMAGE_NAME: "webauthn-server"
          DOCKER_TEST_CREDENTIALS_IMAGE_NAME: "webauthn-test-credentials-service"
        run: |
          echo "🧹 Starting smart staging cleanup"
          echo "📋 Cleanup scope: ONLY GitHub Packages staging artifacts"
          echo "🎯 Workflow outcome: ${{ needs.report-pipeline-status.outputs.workflow-outcome }}"
          echo ""

          case "${{ needs.report-pipeline-status.outputs.workflow-outcome }}" in
            "success")
              echo "✅ Workflow succeeded - performing COMPLETE staging cleanup"
              echo "🗑️ Strategy: Delete ALL staging packages (validation complete, no longer needed)"
              ;;
            "failure")
              echo "❌ Workflow failed - performing CONSERVATIVE staging cleanup"
              echo "🔍 Strategy: Keep last 5 staging versions for debugging"
              ;;
          esac
          echo ""

          # Execute staging cleanup script
          chmod +x scripts/docker/cleanup-staging-packages.sh
          scripts/docker/cleanup-staging-packages.sh "${{ needs.report-pipeline-status.outputs.workflow-outcome }}" "${{ github.repository_owner }}"

      - name: Report emergency preserve override
        if: steps.check-preserve.outputs.preserve-override == 'true'
        run: |
          echo "🚨 EMERGENCY OVERRIDE ACTIVATED"
          echo "⚠️  All staging packages preserved due to [preserve] keyword in commit message"
          echo "🔍 Manual investigation may be required"
          echo "📝 To resume normal cleanup, remove [preserve] from commit messages"

      - name: Cleanup summary
        if: always()
        run: |
          echo "📋 Smart Staging Cleanup Summary:"
          echo "  Emergency Override: ${{ steps.check-preserve.outputs.preserve-override }}"
          echo "  Workflow Outcome: ${{ needs.report-pipeline-status.outputs.workflow-outcome }}"
          echo "  Pipeline Success: ${{ needs.report-pipeline-status.outputs.pipeline-success }}"
          echo ""

          if [[ "${{ steps.check-preserve.outputs.preserve-override }}" == "true" ]]; then
            echo "🚨 Cleanup skipped due to emergency override"
          elif [[ "${{ needs.report-pipeline-status.outputs.workflow-outcome }}" == "success" ]]; then
            echo "🎉 Complete staging cleanup performed - all staging artifacts removed"
            echo "✅ GitHub Packages staging cleanup completed successfully"
          else
            echo "🔍 Conservative staging cleanup performed - debugging artifacts preserved"
            echo "⚠️  Some staging packages retained for investigation"
          fi

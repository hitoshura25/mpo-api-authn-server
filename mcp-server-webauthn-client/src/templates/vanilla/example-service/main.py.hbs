"""
Minimal example service with JWT verification.
Auto-generated by @vmenon25/mcp-server-webauthn-client

This service demonstrates zero-trust architecture integration:
- JWT verification using WebAuthn server's public key
- Protected endpoints requiring valid JWT tokens
- Example API response with authenticated user info
"""
from fastapi import FastAPI, Depends, HTTPException, Header
from typing import Optional
import httpx
import jwt
import os
import base64
from cryptography.hazmat.primitives.serialization import load_der_public_key

app = FastAPI(
    title="WebAuthn Example Service",
    description="Protected API service demonstrating JWT verification",
    version="1.0.0"
)

# Configuration
PUBLIC_KEY_URL = os.getenv("WEBAUTHN_PUBLIC_KEY_URL", "http://webauthn-server:8080/public-key")
PUBLIC_KEY_CACHE = None

def get_public_key():
    """Fetch public key from WebAuthn server (cached)"""
    global PUBLIC_KEY_CACHE
    if PUBLIC_KEY_CACHE is None:
        try:
            response = httpx.get(PUBLIC_KEY_URL, timeout=5.0)
            response.raise_for_status()
            # Public key is Base64-encoded DER format
            public_key_der = base64.b64decode(response.text)
            PUBLIC_KEY_CACHE = load_der_public_key(public_key_der)
        except Exception as e:
            raise HTTPException(
                status_code=500,
                detail=f"Failed to fetch public key from WebAuthn server: {str(e)}"
            )
    return PUBLIC_KEY_CACHE

def verify_jwt_token(authorization: Optional[str] = Header(None)) -> dict:
    """Verify JWT from Authorization header"""
    if not authorization:
        raise HTTPException(
            status_code=401,
            detail="Missing Authorization header"
        )

    if not authorization.startswith("Bearer "):
        raise HTTPException(
            status_code=401,
            detail="Invalid Authorization header format. Expected 'Bearer <token>'"
        )

    token = authorization.split(" ")[1]

    try:
        public_key = get_public_key()
        payload = jwt.decode(
            token,
            public_key,
            algorithms=["RS256"],
            issuer="mpo-webauthn"
        )
        return payload
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="Token expired")
    except jwt.InvalidTokenError as e:
        raise HTTPException(status_code=401, detail=f"Invalid token: {str(e)}")

@app.get("/health")
def health():
    """Health check (no authentication required)"""
    return {
        "status": "healthy",
        "service": "webauthn-example-service",
        "version": "1.0.0"
    }

@app.get("/api/user/profile")
def get_profile(user: dict = Depends(verify_jwt_token)):
    """Protected endpoint - requires valid JWT"""
    return {
        "username": user["sub"],
        "message": "This is protected data from the example service",
        "authenticated_at": user.get("iat"),
        "expires_at": user.get("exp"),
        "issuer": user.get("iss")
    }

@app.get("/api/example/data")
def get_example_data(user: dict = Depends(verify_jwt_token)):
    """Another protected endpoint - demonstrates multiple API routes"""
    return {
        "data": [
            {"id": 1, "value": "Sample data 1"},
            {"id": 2, "value": "Sample data 2"},
            {"id": 3, "value": "Sample data 3"}
        ],
        "user": user["sub"],
        "note": "All /api/* routes are protected by Envoy Gateway JWT verification"
    }

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("APP_PORT", "9000"))
    uvicorn.run(app, host="0.0.0.0", port=port)

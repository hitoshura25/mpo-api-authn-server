# WebAuthn Web Client

A complete WebAuthn (Passkeys/FIDO2) web client generated for testing authentication with your WebAuthn server.

## Quick Start

### 1. Install Dependencies

```bash
npm install
```

### 2. Build the Client

```bash
npm run build
```

### 3. Start the Development Server

```bash
npm start
```

The client will be available at: **http://localhost:{{client_port}}**

## Configuration

The client is configured to connect to your WebAuthn server at:
- **Server URL**: `{{server_url}}`
- **Client Port**: `{{client_port}}`

You can change the server URL in the web UI or by modifying the configuration.

## Features

### Registration Flow
1. Enter a username and display name
2. Click "Register Passkey"
3. Follow your browser/device prompt to create a passkey
4. The passkey is securely stored on your device

### Authentication Flow
1. Enter username (or leave blank for usernameless authentication)
2. Click "Authenticate with Passkey"
3. Follow your browser/device prompt to use your passkey
4. Successfully authenticate with the server

## Critical Integration Patterns

This client preserves all critical WebAuthn integration patterns:

### JSON Parsing
Server responses contain JSON strings that must be parsed before passing to SimpleWebAuthn:
```typescript
const publicKeyOptions = JSON.parse(startResponse.publicKeyCredentialCreationOptions);
```

### SimpleWebAuthn Integration
Uses the SimpleWebAuthn browser library for WebAuthn API calls:
```typescript
const credential = await window.SimpleWebAuthnBrowser.startRegistration(publicKeyOptions.publicKey);
```

### Credential Serialization
Credentials must be stringified before sending to the server:
```typescript
credential: JSON.stringify(credential)
```

## Architecture

### Server Design: Express vs webpack-dev-server

This project uses **Express server** (`src/server.ts`) instead of webpack-dev-server for serving the application. This design choice provides:

1. **Production-like environment** - Same server code in dev and production
2. **Custom middleware** - CORS, health checks, static file serving
3. **Deployment-ready** - Express server can be deployed as-is
4. **Flexibility** - Easy to add API endpoints, authentication, etc.

The Express server serves:
- Static files from `dist/` (webpack bundles)
- HTML from source `public/` directory
- Health check endpoint at `/health`

### Dependencies
- **@vmenon25/mpo-webauthn-client** - Published npm client library for API communication
- **@simplewebauthn/browser** - Browser WebAuthn implementation (loaded via CDN)
- **Express** - Development and production server
- **Webpack** - Module bundling and optimization
- **TypeScript** - Type-safe development

### File Structure
```
├── src/
│   ├── webauthn-client.ts    # WebAuthn client implementation
│   ├── types.ts               # TypeScript type definitions
│   ├── server.ts              # Express development server
│   └── index.ts               # Entry point
├── public/
│   └── index.html             # Web UI
├── dist/                      # Compiled output
├── package.json
├── webpack.config.js
└── tsconfig.json
```

## Development Scripts

### Production Workflow
- `npm run build` - Full production build (webpack + TypeScript server compilation)
- `npm start` - Start the Express server (requires prior build)

### Development Workflow
- `npm run dev` - Quick development build and start (webpack dev mode + TypeScript server compilation)
- `npm run dev:watch` - Hot-reload development server using ts-node (no build required, watches for changes)

### Individual Build Steps
- `npm run build:dev` - Development webpack build + server compilation
- `npm run build:server` - Compile TypeScript server only

### Recommended Workflows

**Production deployment:**
```bash
npm install
npm run build
npm start
```

**Development (quick iteration):**
```bash
npm install
npm run dev:watch  # Hot-reload with ts-node
```

**Development (test production-like build):**
```bash
npm install
npm run dev  # Build dev bundle + start
```

## Testing

### Automated End-to-End Tests

The generated client includes Playwright tests to validate WebAuthn functionality end-to-end.

**Prerequisites:**
- WebAuthn server running at `{{server_url}}`
- Client built and ready to start

**Running Tests:**
```bash
# Ensure client is built
npm run build

# Run all E2E tests
npm test

# Run with interactive UI (great for debugging)
npm run test:ui

# Run in headed mode (see browser)
npm run test:headed

# View test report after run
npm run test:report
```

**What the Tests Cover:**
- ✅ Complete registration flow (create passkey)
- ✅ Complete authentication flow (use passkey)
- ✅ Uses Chromium virtual authenticator (no real device needed)
- ✅ Validates both flows work end-to-end with your server

**How It Works:**
1. Playwright starts the web client automatically
2. Sets up a virtual authenticator (simulates passkey device)
3. Tests full registration and authentication flows
4. Cleans up after tests complete

**Note**: Tests use Chromium's virtual authenticator, so no physical security key or biometric device is required. The tests validate your WebAuthn server integration is working correctly.

### Manual Testing

1. **Test Connection**: Click "Test Connection" to verify server availability
2. **Register**: Create a new passkey with username and display name
3. **Authenticate**: Use your passkey to authenticate

## Troubleshooting

### Connection Issues
- Verify WebAuthn server is running at `{{server_url}}`
- Check CORS configuration on the server
- Ensure ports are not conflicting

### WebAuthn Errors
- **InvalidStateError**: Passkey already exists for this account
- **NotAllowedError**: User cancelled or timeout
- **NotSupportedError**: WebAuthn not supported in this browser

### Browser Support
WebAuthn is supported in modern browsers:
- Chrome/Edge 67+
- Firefox 60+
- Safari 13+
- Opera 54+

**Note**: This project excludes IE 11 from transpilation targets since WebAuthn is not supported on IE 11.

## Security Notes

- Passkeys are stored securely on your device
- Private keys never leave your device
- Server validates all credentials
- Replay attacks are prevented
- Username enumeration is protected

## Integration with Your WebAuthn Server

This client connects to a WebAuthn server that implements the following endpoints:

### Registration
- `POST /register/start` - Start passkey registration
- `POST /register/finish` - Complete passkey registration

### Authentication
- `POST /authenticate/start` - Start passkey authentication
- `POST /authenticate/finish` - Complete passkey authentication

### Health Check
- `GET /health` - Server health status

## License

Apache-2.0

## Generated By

This client was generated using the [@vmenon25/mcp-server-webauthn-client](https://github.com/hitoshura25/mpo-api-authn-server/tree/main/mcp-server-webauthn-client) MCP server.

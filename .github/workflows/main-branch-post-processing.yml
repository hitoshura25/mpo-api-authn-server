# Main Branch Post-Processing Workflow
#
# This workflow handles post-processing tasks after the main CI/CD pipeline completes
# on the main branch. It implements Docker registry optimization and conditional publishing.
#
# ARCHITECTURE - CORRECTED JOB ORDER:
# Phase 1 - Change Detection:
# 1. Change Detection: Multi-layer digest comparison between GHCR and DockerHub (RUNS FIRST while GHCR images exist)
# 2. Both Images: Handles webauthn-server and webauthn-test-credentials-service
#
# Phase 2 - DockerHub Publishing + Git Tagging:
# 3. Conditional DockerHub Publishing: Only when images actually changed
# 4. DockerHub Authentication: Secure credential management
# 5. Re-tag and Push: Pull from GHCR, push to DockerHub with same tags
# 6. Repository Description: Update DockerHub repository descriptions
# 7. Git Tagging: Tag repository on successful DockerHub publish
#
# Phase 3 - Cleanup:
# 8. GHCR Cleanup: ALWAYS runs (success OR failure) but AFTER change detection completes
#
# TRIGGERS:
# - After main-ci-cd.yml workflow completes on main branch
# - Runs regardless of CI/CD success/failure for cleanup
# - Conditional publishing only on CI/CD success
#
# BENEFITS:
# ‚úÖ Prevents GHCR registry bloat through automatic cleanup
# ‚úÖ Only publishes to DockerHub when images actually changed
# ‚úÖ Maintains DockerHub repository descriptions automatically
# ‚úÖ Creates git tags for successful DockerHub publishes
# ‚úÖ Handles both webauthn-server and test-credentials-service images
# ‚úÖ Graceful error handling with comprehensive logging
# ‚úÖ Security best practices with minimal required permissions
# ‚úÖ FIXED: Correct job ordering ensures change detection happens BEFORE cleanup

name: Main Branch Post-Processing

on:
  workflow_run:
    workflows: [ "Main CI/CD Pipeline" ]
    branches: [ main ]
    types: [ completed ]

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: hitoshura25/webauthn-server
  DOCKER_TEST_CREDENTIALS_IMAGE_NAME: hitoshura25/webauthn-test-credentials-service
  DOCKERHUB_SERVER_REPO: hitoshura25/webauthn-server
  DOCKERHUB_TEST_CREDENTIALS_REPO: hitoshura25/webauthn-test-credentials-service

  # Client Library Publishing Configuration
  BASE_VERSION: "1.0"
  NPM_SCOPE: "@vmenon25"
  NPM_PACKAGE_NAME: "mpo-webauthn-client"

  # Note: AI Security Analysis moved to security-analysis.yml for consolidation

permissions:
  # Workflow-level permissions: minimal by default
  contents: read

jobs:
  # Job 1: Check if main CI built new Docker images (determines processing strategy)
  check-main-ci-images:
    name: Check if main CI built new images
    runs-on: ubuntu-latest
    outputs:
      images-were-built: ${{ steps.check-artifact.outputs.images-were-built }}
      skip-security-scan: ${{ steps.check-artifact.outputs.skip-security-scan }}
      skip-all-docker-processing: ${{ steps.set-strategy.outputs.skip-all-docker-processing }}
      publish-from-main-ci: ${{ steps.set-strategy.outputs.publish-from-main-ci }}
    steps:
      - name: Download Docker build manifest from main CI
        id: download-manifest
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: docker-build-manifest
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Check if images were built in main CI
        id: check-artifact
        run: |
          if [[ -f "build-manifest.txt" ]]; then
            echo "üì¶ Found Docker build manifest from main CI run"
            cat build-manifest.txt
            echo ""
            echo "‚úÖ Images were built in main CI - security scanning was already performed"
            echo "images-were-built=true" >> $GITHUB_OUTPUT
            echo "skip-security-scan=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå No Docker build manifest found - main CI may not have built images"
            echo "üîÑ Will perform security scanning as fallback"
            echo "images-were-built=false" >> $GITHUB_OUTPUT
            echo "skip-security-scan=false" >> $GITHUB_OUTPUT
          fi

      - name: Set post-processing execution strategy
        id: set-strategy
        run: |
          if [[ "${{ steps.check-artifact.outputs.skip-security-scan }}" == "true" ]]; then
            echo "üê≥ STRATEGY: Skip all Docker processing - Main CI handled everything"
            echo "‚úÖ Main CI built and scanned new Docker images"
            echo "üöÄ Images are already published to GHCR with security validation"
            echo "üì¶ Will publish to DockerHub directly from GHCR images"
            echo "‚è≠Ô∏è  Skipping: Change detection, security scanning, AI analysis"
            echo "skip-all-docker-processing=true" >> $GITHUB_OUTPUT
            echo "publish-from-main-ci=true" >> $GITHUB_OUTPUT
          else
            echo "üîÑ STRATEGY: Full Docker processing pipeline (fallback)"
            echo "‚ùì Main CI may not have built new images"
            echo "üîç Will perform: Change detection, security scanning, AI analysis"
            echo "‚ö†Ô∏è  This should be rare - main CI usually handles Docker builds"
            echo "skip-all-docker-processing=false" >> $GITHUB_OUTPUT
            echo "publish-from-main-ci=false" >> $GITHUB_OUTPUT
          fi

  # Job 2: Detect Changes (Only runs if main CI didn't build images - fallback)
  detect-changes:
    name: Detect DockerHub publishing needs (fallback)
    runs-on: ubuntu-latest
    needs: check-main-ci-images
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      needs.check-main-ci-images.outputs.skip-all-docker-processing == 'false'
    outputs:
      webauthn-server-changed: ${{ steps.check-server.outputs.has-changes }}
      test-credentials-changed: ${{ steps.check-test-credentials.outputs.has-changes }}
      any-changes: ${{ steps.summary.outputs.any-changes }}
    permissions:
      contents: read
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to DockerHub (for inspection only)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        continue-on-error: true  # Don't fail if DockerHub credentials missing

      - name: Checkout repository for change detection
        uses: actions/checkout@v4

      - name: Check WebAuthn Server changes
        id: check-server
        run: |
          chmod +x scripts/docker/detect-changes.sh
          scripts/docker/detect-changes.sh webauthn-server

      - name: Check Test Credentials Service changes
        id: check-test-credentials
        run: |
          chmod +x scripts/docker/detect-changes.sh
          scripts/docker/detect-changes.sh test-credentials

      - name: Summary of changes
        id: summary
        run: |
          SERVER_CHANGED="${{ steps.check-server.outputs.has-changes }}"
          TEST_CHANGED="${{ steps.check-test-credentials.outputs.has-changes }}"

          echo "üìä Change Detection Summary:"
          echo "WebAuthn Server changed: $SERVER_CHANGED"
          echo "Test Credentials Service changed: $TEST_CHANGED"

          if [[ "$SERVER_CHANGED" == "true" || "$TEST_CHANGED" == "true" ]]; then
            echo "üöÄ DockerHub publishing needed"
            echo "any-changes=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No DockerHub publishing needed - all images up to date"
            echo "any-changes=false" >> $GITHUB_OUTPUT
          fi

  # Note: Docker security scanning moved to security-analysis.yml
  # This eliminates duplication and fixes "Argument list too long" error

  # Note: 3-Tier AI security analysis moved to security-analysis.yml
  # This eliminates duplication and provides unified security analysis

  # Job 3: Publish to DockerHub (Comprehensive logic: main CI images or fallback images)
  publish-dockerhub:
    name: Publish to DockerHub
    runs-on: ubuntu-latest
    needs: [ check-main-ci-images, detect-changes ]
    if: |
      always() &&
      (
        needs.check-main-ci-images.outputs.publish-from-main-ci == 'true' ||
        needs.detect-changes.outputs.any-changes == 'true'
      )
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: DockerHub publishing strategy
        run: |
          if [[ "${{ needs.check-main-ci-images.outputs.publish-from-main-ci }}" == "true" ]]; then
            echo "üì¶ PUBLISHING STRATEGY: Using images from main CI"
            echo "‚úÖ Images were built and scanned in main CI pipeline"
            echo "üöÄ Publishing pre-validated images from GHCR to DockerHub"
          else
            echo "üì¶ PUBLISHING STRATEGY: Using fallback images"
            echo "üîÑ Images were built in post-processing fallback (security analysis handled by security-analysis.yml)"
            echo "‚ö†Ô∏è  This path should be rare"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Publish to DockerHub
        run: |
          chmod +x scripts/docker/publish-dockerhub.sh
          scripts/docker/publish-dockerhub.sh "${{ needs.detect-changes.outputs.webauthn-server-changed }}" "${{ needs.detect-changes.outputs.test-credentials-changed }}"

      - name: Update WebAuthn Server DockerHub description
        if: needs.detect-changes.outputs.webauthn-server-changed == 'true'
        uses: peter-evans/dockerhub-description@v4
        continue-on-error: true  # Don't fail workflow if description update fails
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ env.DOCKERHUB_SERVER_REPO }}
          short-description: 'WebAuthn authentication server built with Ktor and Yubico java-webauthn-server'
          readme-filepath: ./webauthn-server/README.md

      - name: Update Test Credentials Service DockerHub description
        if: needs.detect-changes.outputs.test-credentials-changed == 'true'
        uses: peter-evans/dockerhub-description@v4
        continue-on-error: true  # Don't fail workflow if description update fails
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ env.DOCKERHUB_TEST_CREDENTIALS_REPO }}
          short-description: 'WebAuthn test credentials service for cross-platform testing with FIDO2/WebAuthn'
          readme-filepath: ./webauthn-test-credentials-service/README.md

  # Job 4: Dummy job for cleanup dependencies (Always runs when detect-changes is skipped)
  cleanup-trigger:
    name: Trigger cleanup when change detection skipped
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'success'
    steps:
      - name: Cleanup trigger placeholder
        run: |
          echo "üîÑ CI/CD failed, triggering cleanup without change detection"
          echo "This job ensures cleanup-ghcr has a dependency to wait for"

  # Job 5: GHCR Cleanup (Always runs after change detection OR when CI/CD failed)
  cleanup-ghcr:
    name: Clean up GHCR images
    runs-on: ubuntu-latest
    needs: [ detect-changes, cleanup-trigger ]
    if: always()  # Run regardless of previous job results
    permissions:
      contents: read
      packages: write  # Required to delete GHCR packages
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up old GHCR images
        continue-on-error: true  # Don't fail the workflow if cleanup fails
        run: |
          chmod +x scripts/docker/cleanup-ghcr.sh
          scripts/docker/cleanup-ghcr.sh "${{ github.repository_owner }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 6: Git Tagging (Only on successful DockerHub publish)
  tag-repository:
    name: Tag repository on successful publish
    runs-on: ubuntu-latest
    needs: [ detect-changes, publish-dockerhub ]
    if: |
      always() &&
      needs.publish-dockerhub.result == 'success'
    permissions:
      contents: write  # Required to create git tags
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for tagging

      - name: Create and push git tag
        run: |
          echo "üè∑Ô∏è Creating git tag for successful DockerHub publish..."

          # Generate timestamp-based tag
          TIMESTAMP=$(date -u +"%Y%m%d-%H%M%S")
          TAG_NAME="dockerhub-publish-${TIMESTAMP}"

          # Create tag with commit message
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git tag -a "$TAG_NAME" -m "DockerHub publish on $(date -u)"
          git push origin "$TAG_NAME"

          echo "‚úÖ Created and pushed tag: $TAG_NAME"
          echo "Published images:"

          if [[ "${{ needs.detect-changes.outputs.webauthn-server-changed }}" == "true" ]]; then
            echo "  - ${{ env.DOCKERHUB_SERVER_REPO }}:latest"
          fi

          if [[ "${{ needs.detect-changes.outputs.test-credentials-changed }}" == "true" ]]; then
            echo "  - ${{ env.DOCKERHUB_TEST_CREDENTIALS_REPO }}:latest"
          fi

  # Job 7: Publish Client Libraries using centralized workflow (Phase 4 Integration)
  # VERSION PATTERN: Semantic versioning (1.0.X) for production packages
  # REGISTRY: npm (production registry) + GitHub Packages (backup)
  # SCOPE: @vmenon25/* packages (production scoped packages)
  publish-client-libraries:
    name: Publish production client libraries
    needs: generate-production-version
    if: github.event.workflow_run.conclusion == 'success'
    uses: ./.github/workflows/client-publish.yml
    with:
      publish-type: "production"
      client-version: "${{ needs.generate-production-version.outputs.version }}"
    secrets:
      GRADLE_ENCRYPTION_KEY: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    permissions:
      contents: write  # Required for creating GitHub releases
      packages: write  # Required for publishing to GitHub Packages
      id-token: write  # Required for npm publishing

  # Job 7a: Generate production version for client libraries
  generate-production-version:
    name: Generate production version
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    outputs:
      version: ${{ steps.generate-version.outputs.version }}
      is-prerelease: ${{ steps.generate-version.outputs.is-prerelease }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags for version continuity

      - name: Generate library version
        id: generate-version
        env:
          BASE_VERSION: ${{ env.BASE_VERSION }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
        run: |
          echo "üéØ Generating production client version with centralized version manager"
          ./scripts/core/version-manager.sh generate

  # Job 7b: Create GitHub releases for client libraries (after successful publishing)
  create-client-releases:
    name: Create GitHub releases for client libraries
    runs-on: ubuntu-latest
    needs: [ generate-production-version, publish-client-libraries ]
    if: |
      always() &&
      needs.publish-client-libraries.result == 'success' &&
      needs.generate-production-version.outputs.is-prerelease == 'false' &&
      github.event_name != 'pull_request'
    permissions:
      contents: write  # Required for creating GitHub releases
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create GitHub Release for TypeScript Library
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "npm-client-v${{ needs.generate-production-version.outputs.version }}"
          name: "npm Client v${{ needs.generate-production-version.outputs.version }}"
          body: |
            ## npm Client Library v${{ needs.generate-production-version.outputs.version }}

            Generated TypeScript/JavaScript client library for MPO WebAuthn API.

            ### Installation

            ```bash
            npm install ${{ env.NPM_SCOPE }}/${{ env.NPM_PACKAGE_NAME }}
            ```

            ### Usage

            ```typescript
            import { AuthenticationApi, RegistrationApi, Configuration } from '${{ env.NPM_SCOPE }}/${{ env.NPM_PACKAGE_NAME }}';

            const config = new Configuration({
              basePath: 'https://your-webauthn-server.com'
            });

            const authApi = new AuthenticationApi(config);
            const regApi = new RegistrationApi(config);
            ```

            ### Features
            - TypeScript support with full type definitions
            - ESM and CommonJS module support
            - WebAuthn registration and authentication
            - Compatible with modern browsers and Node.js

            ### Changes
            - Generated from OpenAPI specification
            - Supports WebAuthn registration and authentication flows
            - Full TypeScript type safety

            ### Documentation
            - [API Documentation](https://github.com/${{ github.repository }}/blob/main/docs/setup/client-generation.md)
            - [Integration Examples](https://github.com/${{ github.repository }}/blob/main/web-test-client/README.md)

            ### Published Packages
            - **npm**: ${{ needs.publish-client-libraries.outputs.typescript-package-name }}@${{ needs.generate-production-version.outputs.version }}
            - **Android**: ${{ needs.publish-client-libraries.outputs.android-package-name }}:${{ needs.generate-production-version.outputs.version }}
          draft: false
          prerelease: false

      - name: Create GitHub Release for Android Client Library
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "android-client-v${{ needs.generate-production-version.outputs.version }}"
          name: "Android Client v${{ needs.generate-production-version.outputs.version }}"
          body: |
            ## Android Client Library v${{ needs.generate-production-version.outputs.version }}

            Generated Android client library for MPO WebAuthn API.

            ### Installation

            Add to your `build.gradle`:

            ```gradle
            repositories {
                maven {
                    url = uri("https://maven.pkg.github.com/${{ github.repository }}")
                    credentials {
                        username = "YOUR_GITHUB_USERNAME"
                        password = "YOUR_GITHUB_TOKEN"
                    }
                }
            }

            dependencies {
                implementation '${{ needs.publish-client-libraries.outputs.android-package-name }}:${{ needs.generate-production-version.outputs.version }}'
            }
            ```

            ### Changes
            - Generated from OpenAPI specification
            - Supports WebAuthn registration and authentication
            - Compatible with Android API 26+

            ### Documentation
            - [API Documentation](https://github.com/${{ github.repository }}/blob/main/docs/setup/client-generation.md)
            - [Android Integration Guide](https://github.com/${{ github.repository }}/blob/main/android-test-client/README.md)

            ### Published Packages
            - **Android**: ${{ needs.publish-client-libraries.outputs.android-package-name }}:${{ needs.generate-production-version.outputs.version }}
            - **npm**: ${{ needs.publish-client-libraries.outputs.typescript-package-name }}@${{ needs.generate-production-version.outputs.version }}
          draft: false
          prerelease: false

  # Job 9: Report post-processing status (Updated for Phase 4)
  report-post-processing-status:
    name: Report post-processing status
    runs-on: ubuntu-latest
    needs: [ cleanup-ghcr, detect-changes, publish-dockerhub, tag-repository, publish-client-libraries, create-client-releases ]
    if: always()
    steps:
      - name: Report overall post-processing status
        run: |
          echo "üìã Main Branch Post-Processing Results Summary:"
          echo "Original CI/CD result: ${{ github.event.workflow_run.conclusion }}"
          echo "GHCR cleanup: ${{ needs.cleanup-ghcr.result }}"
          echo "Change detection: ${{ needs.detect-changes.result }}"
          echo "DockerHub publishing: ${{ needs.publish-dockerhub.result }}"
          echo "Git tagging: ${{ needs.tag-repository.result }}"
          echo "Client libraries publishing: ${{ needs.publish-client-libraries.result }}"
          echo "Client releases creation: ${{ needs.create-client-releases.result }}"

          echo ""
          echo "üßπ GHCR Cleanup: Always executed to prevent registry bloat"
          echo "üìö Client Libraries: Published in parallel for efficiency"

          if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "‚úÖ Original CI/CD pipeline succeeded"

            # Check client library publishing results (Phase 4 Integration)
            if [[ "${{ needs.publish-client-libraries.result }}" == "success" ]]; then
              echo "üì¶ Client libraries published successfully via centralized workflow"
              echo "  TypeScript: ${{ needs.publish-client-libraries.outputs.typescript-package-name }}"
              echo "  Android: ${{ needs.publish-client-libraries.outputs.android-package-name }}"

              # Check GitHub releases creation
              if [[ "${{ needs.create-client-releases.result }}" == "success" ]]; then
                echo "üè∑Ô∏è GitHub releases created successfully"
              elif [[ "${{ needs.create-client-releases.result }}" == "failure" ]]; then
                echo "‚ö†Ô∏è GitHub releases creation failed (packages still published)"
              else
                echo "‚è≠Ô∏è GitHub releases creation skipped (prerelease or PR)"
              fi
            elif [[ "${{ needs.publish-client-libraries.result }}" == "failure" ]]; then
              echo "‚ùå Client libraries publishing failed"
            else
              echo "‚è≠Ô∏è Client libraries publishing skipped/cancelled"
            fi

            if [[ "${{ needs.detect-changes.outputs.any-changes }}" == "true" ]]; then
              echo "üîÑ Docker changes detected, DockerHub publishing executed"
              echo "  WebAuthn Server: ${{ needs.detect-changes.outputs.webauthn-server-changed }}"
              echo "  Test Credentials: ${{ needs.detect-changes.outputs.test-credentials-changed }}"

              if [[ "${{ needs.publish-dockerhub.result }}" == "success" ]]; then
                echo "üöÄ DockerHub publishing successful"
                echo "üè∑Ô∏è Repository tagged: ${{ needs.tag-repository.result }}"
              else
                echo "‚ùå DockerHub publishing failed"
              fi
            else
              echo "‚úÖ No Docker changes detected - DockerHub images already up to date"
            fi

            # Overall success check (Phase 4 Integration)
            FAILED_JOBS=0
            if [[ "${{ needs.publish-client-libraries.result }}" == "failure" ]]; then
              FAILED_JOBS=$((FAILED_JOBS + 1))
            fi
            if [[ "${{ needs.publish-dockerhub.result }}" == "failure" && "${{ needs.detect-changes.outputs.any-changes }}" == "true" ]]; then
              FAILED_JOBS=$((FAILED_JOBS + 1))
            fi

            if [[ $FAILED_JOBS -eq 0 ]]; then
              echo "üéâ Complete post-processing pipeline successful!"
            else
              echo "‚ö†Ô∏è Post-processing completed with $FAILED_JOBS failed job(s)"
              exit 1
            fi
          else
            echo "‚ùå Original CI/CD pipeline failed"
            echo "üßπ Only cleanup operations were performed"
          fi

#!/usr/bin/env node

/**
 * Vulnerability Monitor for WebAuthn Security
 * 
 * Monitors multiple sources for new WebAuthn/FIDO2 vulnerabilities:
 * - CVE databases
 * - Security advisories 
 * - Yubico security updates
 * - FIDO Alliance security notices
 */

import fs from 'fs';
import path from 'path';
import https from 'https';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class VulnerabilityMonitor {
    constructor() {
        this.vulnerabilityFile = path.join(__dirname, '../vulnerability-tracking.json');
        this.testTemplateDir = path.join(__dirname, '../test-templates');
        this.knownVulnerabilities = this.loadKnownVulnerabilities();
    }

    loadKnownVulnerabilities() {
        try {
            if (fs.existsSync(this.vulnerabilityFile)) {
                return JSON.parse(fs.readFileSync(this.vulnerabilityFile, 'utf8'));
            }
        } catch (error) {
            console.error('Error loading vulnerability file:', error);
        }
        return {
            lastCheck: null,
            vulnerabilities: [
                {
                    id: 'CVE-2024-39912',
                    name: 'Username Enumeration in WebAuthn',
                    description: 'WebAuthn implementations may reveal user existence through response differences',
                    severity: 'medium',
                    testImplemented: true,
                    dateAdded: '2024-07-01'
                },
                {
                    id: 'POISONSEED-2024',
                    name: 'PoisonSeed Cross-Origin Attack',
                    description: 'Cross-origin authentication abuse in WebAuthn implementations',
                    severity: 'high',
                    testImplemented: true,
                    dateAdded: '2024-06-15'
                }
            ]
        };
    }

    async checkCVEDatabase() {
        try {
            console.log('🔍 Checking CVE database for WebAuthn vulnerabilities...');
            
            // Check for dry-run mode
            const isDryRun = process.argv.includes('--dry-run');
            if (isDryRun) {
                console.log('🧪 Running in dry-run mode - using mock data');
                return this.getMockCVEData();
            }
            
            const keywords = process.argv.includes('--test-filter') ? ['webauthn'] : ['webauthn', 'fido2', 'fido', 'passkey', 'passwordless', 'authenticator'];
            const newCVEs = [];
            
            // Calculate date range - check last 90 days or since last check
            const lastCheck = this.knownVulnerabilities.lastCheck;
            const startDate = lastCheck ? new Date(lastCheck) : new Date(Date.now() - 90 * 24 * 60 * 60 * 1000);
            const endDate = new Date();
            
            // Format dates for NVD API (YYYY-MM-DDTHH:mm:ss:sss UTC)
            const pubStartDate = startDate.toISOString();
            const pubEndDate = endDate.toISOString();
            
            console.log(`Searching CVEs from ${pubStartDate.split('T')[0]} to ${pubEndDate.split('T')[0]}`);
            
            // Query NVD API for each keyword
            for (const keyword of keywords) {
                try {
                    const cves = await this.queryNVDAPI(keyword, pubStartDate, pubEndDate);
                    
                    for (const cve of cves) {
                        // Check if we already know about this CVE
                        const exists = this.knownVulnerabilities.vulnerabilities.some(v => v.id === cve.id);
                        
                        if (!exists && this.isWebAuthnRelated(cve)) {
                            console.log(`🚨 Found new CVE: ${cve.id} - ${cve.name}`);
                            newCVEs.push(cve);
                        }
                    }
                    
                    // Rate limiting - NVD requests 6 second delay between requests
                    await new Promise(resolve => setTimeout(resolve, 6000));
                    
                } catch (error) {
                    console.warn(`⚠️  Failed to check keyword "${keyword}": ${error.message}`);
                }
            }
            
            console.log(`✅ CVE check complete. Found ${newCVEs.length} new WebAuthn-related vulnerabilities.`);
            return newCVEs;
            
        } catch (error) {
            console.error('❌ Error checking CVE database:', error.message);
            return [];
        }
    }

    async queryNVDAPI(keyword, startDate, endDate, retryCount = 0) {
        const maxRetries = 3;
        const baseDelay = 2000; // 2 seconds
        
        return new Promise((resolve, reject) => {
            // NVD API 2.0 endpoint
            const baseUrl = 'https://services.nvd.nist.gov/rest/json/cves/2.0';
            const params = new URLSearchParams({
                keywordSearch: keyword,
                pubStartDate: startDate,
                pubEndDate: endDate,
                resultsPerPage: '50'
            });
            
            const url = `${baseUrl}?${params}`;
            
            const request = https.get(url, {
                headers: {
                    'User-Agent': 'WebAuthn-Vulnerability-Monitor/1.0'
                },
                timeout: 30000 // 30 second timeout
            }, (res) => {
                let data = '';
                
                res.on('data', (chunk) => {
                    data += chunk;
                });
                
                res.on('end', () => {
                    try {
                        // Handle different response codes with appropriate retry logic
                        if (res.statusCode === 429) {
                            // Rate limited - retry with exponential backoff
                            if (retryCount < maxRetries) {
                                const delay = baseDelay * Math.pow(2, retryCount);
                                console.warn(`⚠️  Rate limited, retrying in ${delay}ms (attempt ${retryCount + 1}/${maxRetries + 1})`);
                                setTimeout(() => {
                                    this.queryNVDAPI(keyword, startDate, endDate, retryCount + 1)
                                        .then(resolve)
                                        .catch(reject);
                                }, delay);
                                return;
                            } else {
                                reject(new Error(`NVD API rate limit exceeded after ${maxRetries} retries`));
                                return;
                            }
                        }
                        
                        if (res.statusCode === 503) {
                            // Service unavailable - retry with backoff
                            if (retryCount < maxRetries) {
                                const delay = baseDelay * Math.pow(2, retryCount);
                                console.warn(`⚠️  Service unavailable, retrying in ${delay}ms (attempt ${retryCount + 1}/${maxRetries + 1})`);
                                setTimeout(() => {
                                    this.queryNVDAPI(keyword, startDate, endDate, retryCount + 1)
                                        .then(resolve)
                                        .catch(reject);
                                }, delay);
                                return;
                            } else {
                                reject(new Error(`NVD API service unavailable after ${maxRetries} retries`));
                                return;
                            }
                        }
                        
                        if (res.statusCode !== 200) {
                            reject(new Error(`NVD API returned status ${res.statusCode}: ${data.substring(0, 200)}`));
                            return;
                        }
                        
                        // Handle empty or malformed responses
                        if (!data || data.trim().length === 0) {
                            console.warn(`⚠️  Empty response from NVD API for keyword "${keyword}"`);
                            resolve([]);
                            return;
                        }
                        
                        const response = JSON.parse(data);
                        
                        // Validate response structure
                        if (!response || typeof response !== 'object') {
                            console.warn(`⚠️  Invalid response structure from NVD API for keyword "${keyword}"`);
                            resolve([]);
                            return;
                        }
                        
                        const cves = this.parseNVDResponse(response);
                        resolve(cves);
                        
                    } catch (error) {
                        if (error instanceof SyntaxError) {
                            console.warn(`⚠️  Invalid JSON response from NVD API for keyword "${keyword}": ${error.message}`);
                            resolve([]);
                        } else {
                            reject(new Error(`Failed to parse NVD response: ${error.message}`));
                        }
                    }
                });
                
            });
            
            request.on('timeout', () => {
                request.destroy();
                if (retryCount < maxRetries) {
                    console.warn(`⚠️  Request timeout, retrying (attempt ${retryCount + 1}/${maxRetries + 1})`);
                    setTimeout(() => {
                        this.queryNVDAPI(keyword, startDate, endDate, retryCount + 1)
                            .then(resolve)
                            .catch(reject);
                    }, baseDelay);
                } else {
                    reject(new Error(`NVD API request timeout after ${maxRetries} retries`));
                }
            });
            
            request.on('error', (error) => {
                if (retryCount < maxRetries && (error.code === 'ECONNRESET' || error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED')) {
                    console.warn(`⚠️  Network error, retrying (attempt ${retryCount + 1}/${maxRetries + 1}): ${error.message}`);
                    setTimeout(() => {
                        this.queryNVDAPI(keyword, startDate, endDate, retryCount + 1)
                            .then(resolve)
                            .catch(reject);
                    }, baseDelay);
                } else {
                    reject(new Error(`NVD API request failed: ${error.message}`));
                }
            });
        });
    }

    parseNVDResponse(response) {
        const cves = [];
        
        if (!response.vulnerabilities) {
            return cves;
        }
        
        for (const vuln of response.vulnerabilities) {
            const cve = vuln.cve;
            
            try {
                // Extract basic information
                const id = cve.id;
                const description = cve.descriptions?.find(d => d.lang === 'en')?.value || 'No description available';
                
                // Extract CVSS score and severity
                let cvssScore = 0;
                let severity = 'unknown';
                
                if (cve.metrics?.cvssMetricV31?.[0]) {
                    const metrics = cve.metrics.cvssMetricV31[0];
                    cvssScore = metrics.cvssData.baseScore;
                    severity = metrics.cvssData.baseSeverity?.toLowerCase() || 'unknown';
                } else if (cve.metrics?.cvssMetricV30?.[0]) {
                    const metrics = cve.metrics.cvssMetricV30[0];
                    cvssScore = metrics.cvssData.baseScore;
                    severity = metrics.cvssData.baseSeverity?.toLowerCase() || 'unknown';
                } else if (cve.metrics?.cvssMetricV2?.[0]) {
                    const metrics = cve.metrics.cvssMetricV2[0];
                    cvssScore = metrics.cvssData.baseScore;
                    // Map CVSS v2 score to severity
                    if (cvssScore >= 7.0) severity = 'high';
                    else if (cvssScore >= 4.0) severity = 'medium';
                    else severity = 'low';
                }
                
                // Extract publication date
                const publishedDate = cve.published;
                
                cves.push({
                    id: id,
                    name: `${id} - WebAuthn Vulnerability`,
                    description: description.substring(0, 500) + (description.length > 500 ? '...' : ''),
                    severity: severity,
                    cvssScore: cvssScore,
                    testImplemented: false,
                    dateAdded: new Date().toISOString().split('T')[0],
                    source: 'NVD CVE Database',
                    publishedDate: publishedDate,
                    affectedComponents: this.extractAffectedComponents(description),
                    mitigation: 'Review CVE details and implement appropriate fixes'
                });
                
            } catch (error) {
                console.warn(`⚠️  Failed to parse CVE ${cve.id}: ${error.message}`);
            }
        }
        
        return cves;
    }

    isWebAuthnRelated(cve) {
        const text = (cve.description + ' ' + cve.name).toLowerCase();
        
        // High-confidence WebAuthn keywords (direct matches)
        const directWebAuthnKeywords = [
            'webauthn', 'web authentication', 'fido2', 'fido', 'passkey', 'passwordless',
            'public key credential', 'assertion', 'attestation', 'relying party',
            'java-webauthn-server', 'yubico', 'yubikey'
        ];
        
        // Context-dependent keywords (need additional validation)
        const contextualKeywords = [
            'authenticator', 'credential', 'biometric', 'security key'
        ];
        
        // Exclude false positive patterns
        const excludePatterns = [
            'oauth', 'saml', 'ldap', 'active directory', 'certificate authority',
            'ssl', 'tls', 'ssh', 'vpn', 'database credential', 'api key',
            'password hash', 'encryption key', 'private key', 'digital certificate'
        ];
        
        // Check for exclusion patterns first
        if (excludePatterns.some(pattern => text.includes(pattern))) {
            // Only exclude if it doesn't also contain direct WebAuthn keywords
            if (!directWebAuthnKeywords.some(keyword => text.includes(keyword))) {
                return false;
            }
        }
        
        // Direct WebAuthn match
        if (directWebAuthnKeywords.some(keyword => text.includes(keyword))) {
            return true;
        }
        
        // Contextual match with additional validation
        if (contextualKeywords.some(keyword => text.includes(keyword))) {
            // Look for supporting context that indicates WebAuthn
            const supportingContext = [
                'browser', 'client', 'origin', 'challenge', 'signature',
                'registration', 'authentication', 'user verification',
                'cross-origin', 'same-origin', 'javascript', 'web application'
            ];
            
            if (supportingContext.some(context => text.includes(context))) {
                return true;
            }
        }
        
        return false;
    }

    extractAffectedComponents(description) {
        const components = [];
        const text = description.toLowerCase();
        
        if (text.includes('authentication') || text.includes('login')) components.push('authentication flows');
        if (text.includes('registration') || text.includes('enrollment')) components.push('registration flows');
        if (text.includes('origin') || text.includes('cross-origin')) components.push('origin validation');
        if (text.includes('credential') || text.includes('key')) components.push('credential management');
        if (text.includes('session') || text.includes('token')) components.push('session management');
        if (text.includes('user') || text.includes('username')) components.push('user enumeration');
        if (text.includes('replay') || text.includes('reuse')) components.push('replay protection');
        if (text.includes('timing') || text.includes('side-channel')) components.push('timing attacks');
        
        return components.length > 0 ? components : ['general webauthn'];
    }

    getMockCVEData() {
        // Mock data for testing - simulates finding new CVEs
        return [
            {
                id: 'CVE-2024-TEST-1',
                name: 'CVE-2024-TEST-1 - WebAuthn Mock Vulnerability',
                description: 'Mock vulnerability for testing the monitoring system. This simulates a real WebAuthn vulnerability.',
                severity: 'medium',
                cvssScore: 5.5,
                testImplemented: false,
                dateAdded: new Date().toISOString().split('T')[0],
                source: 'Mock Data',
                publishedDate: new Date().toISOString(),
                affectedComponents: ['authentication flows', 'testing'],
                mitigation: 'This is a mock vulnerability for testing purposes only'
            }
        ];
    }

    async checkYubicoAdvisories() {
        return new Promise((resolve) => {
            console.log('🔍 Checking Yubico security advisories...');
            
            // In real implementation:
            // - Check Yubico's security advisory RSS/API
            // - Look for java-webauthn-server specific issues
            // - Parse advisory details
            
            const mockAdvisories = [];
            setTimeout(() => {
                resolve(mockAdvisories);
            }, 1000);
        });
    }

    async checkFIDOAllianceNotices() {
        return new Promise((resolve) => {
            console.log('🔍 Checking FIDO Alliance security notices...');
            
            // In real implementation:
            // - Check FIDO Alliance security bulletins
            // - Look for spec-level vulnerabilities
            // - Parse implementation guidance
            
            const mockNotices = [];
            setTimeout(() => {
                resolve(mockNotices);
            }, 1000);
        });
    }

    generateTestForVulnerability(vulnerability) {
        const testTemplate = `
/**
 * Test for ${vulnerability.id}: ${vulnerability.name}
 * 
 * ${vulnerability.description}
 * Severity: ${vulnerability.severity}
 * Added: ${new Date().toISOString().split('T')[0]}
 */
@Test
@DisplayName("Should protect against ${vulnerability.id}")
fun \`test protection against ${vulnerability.id.toLowerCase().replace(/-/g, '_')}\`() = testApplication {
    application {
        module(testStorageModule)
    }
    
    // TODO: Implement specific test for ${vulnerability.name}
    // Based on vulnerability details: ${vulnerability.description}
    
    val username = "vuln_test_\${System.currentTimeMillis()}"
    
    // Add test implementation here based on vulnerability type
    assertTrue(true, "Implement test for ${vulnerability.id}")
}
`;
        
        return testTemplate.trim();
    }

    async updateVulnerabilityTests(newVulnerabilities) {
        if (newVulnerabilities.length === 0) {
            console.log('✅ No new vulnerabilities found');
            return false;
        }

        console.log(`📝 Found ${newVulnerabilities.length} new vulnerabilities, updating tests...`);
        
        const testFilePath = path.join(__dirname, '../src/test/kotlin/com/vmenon/mpo/api/authn/security/VulnerabilityProtectionTest.kt');
        let testContent = fs.readFileSync(testFilePath, 'utf8');
        
        // Find insertion point (before the last closing brace)
        const insertionPoint = testContent.lastIndexOf('    // Helper methods');
        
        let newTestMethods = '';
        for (const vuln of newVulnerabilities) {
            newTestMethods += `
    @Nested
    @DisplayName("${vuln.name} Protection Tests")
    inner class ${vuln.id.replace(/[^a-zA-Z0-9]/g, '')}Tests {
        
        ${this.generateTestForVulnerability(vuln)}
    }
`;
        }
        
        // Insert new test methods
        const updatedContent = testContent.slice(0, insertionPoint) + 
                              newTestMethods + '\n\n    ' + 
                              testContent.slice(insertionPoint);
        
        fs.writeFileSync(testFilePath, updatedContent);
        
        // Update vulnerability tracking
        this.knownVulnerabilities.vulnerabilities.push(...newVulnerabilities);
        this.knownVulnerabilities.lastCheck = new Date().toISOString();
        fs.writeFileSync(this.vulnerabilityFile, JSON.stringify(this.knownVulnerabilities, null, 2));
        
        return true;
    }

    async createPullRequest(vulnerabilities) {
        console.log('🚀 Creating pull request for vulnerability updates...');
        
        const branchName = `security/vulnerability-updates-${Date.now()}`;
        const commitMessage = `Add tests for ${vulnerabilities.length} new WebAuthn vulnerabilities

Added protection tests for:
${vulnerabilities.map(v => `- ${v.id}: ${v.name}`).join('\n')}

🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>`;

        // In a real implementation, this would:
        // 1. Create a new branch
        // 2. Commit the changes
        // 3. Push to remote
        // 4. Create PR via GitHub API
        
        console.log(`Would create PR with:
Branch: ${branchName}
Commit: ${commitMessage}
Files changed: VulnerabilityProtectionTest.kt, vulnerability-tracking.json`);
        
        return {
            branch: branchName,
            commit: commitMessage,
            filesChanged: ['VulnerabilityProtectionTest.kt', 'vulnerability-tracking.json']
        };
    }

    async run() {
        console.log('🔐 Starting vulnerability monitoring check...');
        
        try {
            // Check all vulnerability sources
            const [cveResults, yubicoResults, fidoResults] = await Promise.all([
                this.checkCVEDatabase(),
                this.checkYubicoAdvisories(),
                this.checkFIDOAllianceNotices()
            ]);
            
            // Combine and deduplicate results
            const allNewVulns = [...cveResults, ...yubicoResults, ...fidoResults];
            const newVulnerabilities = allNewVulns.filter(vuln => 
                !this.knownVulnerabilities.vulnerabilities.some(known => known.id === vuln.id)
            );
            
            // Update tests if new vulnerabilities found
            const testsUpdated = await this.updateVulnerabilityTests(newVulnerabilities);
            
            if (testsUpdated) {
                // Create PR for review
                const prDetails = await this.createPullRequest(newVulnerabilities);
                console.log('✅ Vulnerability monitoring complete - PR created for review');
                return prDetails;
            } else {
                console.log('✅ Vulnerability monitoring complete - no updates needed');
                return null;
            }
            
        } catch (error) {
            console.error('❌ Error during vulnerability monitoring:', error);
            throw error;
        }
    }
}

// CLI usage
if (import.meta.url === `file://${process.argv[1]}`) {
    const monitor = new VulnerabilityMonitor();
    monitor.run()
        .then((result) => {
            if (result) {
                console.log('PR Details:', result);
            }
            process.exit(0);
        })
        .catch((error) => {
            console.error('Monitoring failed:', error);
            process.exit(1);
        });
}

export default VulnerabilityMonitor;
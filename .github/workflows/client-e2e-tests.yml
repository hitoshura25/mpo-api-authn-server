name: Run Client E2E Tests (Web + Android)

# Optimized for PR speed validation - targets ~8-12 minute total runtime
# Future optimization: Pre-built Docker images in GHCR for faster service startup
#
# Android Caching Strategy:
# - Caches small SDK tools/platforms (~50-200MB) - faster than download
# - Caches AVD snapshots for instant emulator startup
# - EXCLUDES system images (1-4GB) - slower to cache than download

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '18'
      android-api-level:
        description: 'Android api level to use'
        required: false
        type: string
        default: '29'
    secrets:
      codecov_token:
        description: 'Codecov token for uploading coverage reports'
        required: true
      gradle_encryption_key:
        description: 'Gradle encryption key'
        required: true
      docker_hub_username:
        description: 'DockerHub username'
        required: true
      docker_hub_token:
        description: 'DockerHub token'
        required: true
      npm_publish_token:
        description: 'npm publish token'
        required: true
    outputs:
      test-exit-code:
        description: 'Exit code from the tests'
        value: ${{ jobs.client-e2e-tests.outputs.test-exit-code }}

permissions:
  contents: write
  packages: write
  id-token: write

env:
  BASE_VERSION: "1.0"
  # Centralized npm package configuration - change these values to update npm scope/name everywhere
  NPM_SCOPE: "@vmenon25"
  NPM_PACKAGE_NAME: "mpo-webauthn-client"

jobs:
  client-e2e-tests:
    runs-on: ubuntu-latest
    outputs:
      test-exit-code: ${{ steps.run-tests.outputs.test-exit-code }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Branch-specific Gradle caching
      - name: Setup branch-specific Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle/configuration-cache
            android-test-client/.gradle/configuration-cache
          key: gradle-${{ runner.os }}-${{ github.ref_name }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-${{ github.ref_name }}-
            gradle-${{ runner.os }}-main-
            gradle-${{ runner.os }}-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-encryption-key: ${{ secrets.gradle_encryption_key }}
          build-scan-publish: true
          build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
          build-scan-terms-of-use-agree: "yes"
          # Disable built-in cache since we're managing it manually
          cache-disabled: true

      - name: Run code quality checks, tests, coverage, and build JARs
        shell: bash
        run: ./gradlew detekt :webauthn-server:koverXmlReport :webauthn-server:shadowJar :webauthn-test-credentials-service:shadowJar --build-cache --parallel --configuration-cache

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: webauthn-server-reports
          path: |
            webauthn-server/build/reports/
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          slug: hitoshura25/mpo-api-authn-server
          files: ./webauthn-server/build/reports/kover/report.xml
          flags: unit
          name: codecov-unit
          token: ${{ secrets.codecov_token }}
          fail_ci_if_error: true

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: hitoshura25/webauthn-server
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=pr

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'
          cache-dependency-path: web-test-client/package-lock.json

      - name: Install test dependencies (parallel)
        working-directory: web-test-client
        run: |
          # Install npm dependencies and Playwright in parallel
          npm ci &
          NPM_PID=$!

          # Download Playwright browser in background
          npx playwright install chromium --only-shell &
          PLAYWRIGHT_PID=$!

          # Wait for both to complete
          wait $NPM_PID
          wait $PLAYWRIGHT_PID

          echo "‚úÖ Dependencies installed in parallel"

      - name: Generate TypeScript client from OpenAPI spec
        env:
          CLIENT_VERSION: ${{ steps.generate-library-version.outputs.version }}
        run: |
          echo "üî® Generating TypeScript client from OpenAPI specification..."
          echo "Using version: $CLIENT_VERSION"
          ./gradlew :webauthn-server:copyGeneratedTsClientToWebTestClient -PclientVersion="$CLIENT_VERSION" -PnpmName="${{ env.NPM_PACKAGE_NAME }}"

          # Verify client generation
          if [ -f "web-test-client/generated-client/src/index.ts" ]; then
            echo "‚úÖ TypeScript client generated successfully"
          else
            echo "‚ùå TypeScript client generation failed"
            exit 1
          fi

      - name: Build web-test-client TypeScript bundles
        working-directory: web-test-client
        run: |
          echo "üî® Building TypeScript web client bundles..."
          npm run build
          echo "‚úÖ Web client bundles built successfully"

      - name: Set up environment and start services
        run: |
          cd webauthn-server
          ./setup-secure-env.sh

          echo "üî® Building services..."
          DOCKER_BUILDKIT=1 COMPOSE_DOCKER_CLI_BUILD=1 docker compose up -d --build

          echo "‚è≥ Waiting for services to start..."
          sleep 10

          echo "üìä Service status after initial startup:"
          docker compose ps

          echo "üìã Full logs from all services:"
          docker compose logs

          echo "üîç Testing dependency services first..."

          # Check if postgres is responding
          if docker compose exec postgres pg_isready -U webauthn_user -d webauthn_db > /dev/null 2>&1; then
            echo "‚úÖ PostgreSQL is ready"
          else
            echo "‚ùå PostgreSQL not ready"
            echo "PostgreSQL logs:"
            docker compose logs postgres
          fi

          # Check if redis is responding
          if docker compose exec redis redis-cli ping > /dev/null 2>&1; then
            echo "‚úÖ Redis is ready"
          else
            echo "‚ùå Redis not ready"
            echo "Redis logs:"
            docker compose logs redis
          fi

          # Check if jaeger is responding
          if curl -f --max-time 5 http://localhost:16686/ > /dev/null 2>&1; then
            echo "‚úÖ Jaeger is ready"
          else
            echo "‚ùå Jaeger not ready"
            echo "Jaeger logs:"
            docker compose logs jaeger
          fi

          echo "üîç Testing main application services..."

          # Test webauthn-server health endpoint
          if curl -f --max-time 5 http://localhost:8080/health > /dev/null 2>&1; then
            echo "‚úÖ WebAuthn server health check passed"
          else
            echo "‚ùå WebAuthn server health check failed"
            echo "WebAuthn server logs:"
            docker compose logs webauthn-server
            exit 1
          fi

          # Test webauthn-test-credentials-service health
          if curl -f --max-time 5 http://localhost:8081/health > /dev/null 2>&1; then
            echo "‚úÖ WebAuthn test credentials service responding"
          else
            echo "‚ùå WebAuthn test credentials service not responding"
            echo "Service logs:"
            docker compose logs webauthn-test-credentials-service
            exit 1
          fi
          cd ..

      - name: Run E2E tests
        id: run-tests
        working-directory: web-test-client
        run: |
          set +e
          npm test
          TEST_EXIT_CODE=$?
          set -e

          # Store exit code for later use
          echo "test-exit-code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT

          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Tests failed with exit code $TEST_EXIT_CODE"
            exit $TEST_EXIT_CODE
          else
            echo "‚úÖ Tests passed successfully"
          fi

      - name: Generate Android client
        env:
          CLIENT_VERSION: ${{ steps.generate-library-version.outputs.version }}
        run: |
          echo "üî® Generating Android client..."
          echo "Using version: $CLIENT_VERSION"
          ./gradlew :webauthn-server:copyGeneratedClientToLibrary -PclientVersion="$CLIENT_VERSION"

          # Verify client generation
          if [ -f "android-test-client/client-library/src/main/java/com/vmenon/mpo/api/authn/client/api/RegistrationApi.java" ]; then
            echo "‚úÖ Android client generated successfully"
          else
            echo "‚ùå Android client generation failed"
            exit 1
          fi

      - name: Enable KVM for hardware acceleration
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          ls -la /dev/kvm

      # Cache AVD configuration and snapshots (much faster than system images)
      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ inputs.android-api-level }}-v2

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ inputs.android-api-level }}
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          disable-animations: false
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -memory 2048
          script: echo "Generated AVD snapshot for caching."

      - name: Run Android UI tests with emulator
        id: android-tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ inputs.android-api-level }}
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          disable-animations: true
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -memory 2048
          script: ./scripts/run-android-tests.sh

      - name: Stop full stack
        id: stop-full-stack
        if: always()
        run: |
          echo "Capturing Docker Compose logs..."
          cd webauthn-server
          docker compose logs > ../docker-compose-logs.txt 2>&1
          echo "Stopping Docker Compose services..."
          docker compose down -v
          echo "‚úÖ Docker Compose services stopped"

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            web-test-client/playwright-report/
            web-test-client/test-results/
            android-test-client/app/build/reports/androidTests/connected/
            android-test-client/app/build/outputs/androidTest-results/connected/
          retention-days: 3

      - name: Upload web-test-client build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: web-test-client-bundles
          path: |
            web-test-client/dist/
          retention-days: 3

      - name: Upload Docker Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-logs
          path: docker-compose-logs.txt
          retention-days: 3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.docker_hub_username }}
          password: ${{ secrets.docker_hub_token }}

      - name: Build and push
        uses: docker/build-push-action@v6
        if: github.event_name != 'pull_request'
        with:
          context: ./webauthn-server
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Update repo description
        uses: peter-evans/dockerhub-description@v4
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.docker_hub_username }}
          password: ${{ secrets.docker_hub_token }}
          repository: hitoshura25/webauthn-server
          short-description: ${{ github.event.repository.description }}

      - name: Detect changes in OpenAPI spec or generation config
        uses: dorny/paths-filter@v3
        id: openapi-changes
        with:
          filters: |
            api:
              - 'webauthn-server/src/main/resources/openapi/**'
              - 'webauthn-server/build.gradle.kts'
              - '.github/workflows/client-e2e-tests.yml'

      - name: Decide whether to publish
        id: publish-decision
        run: |
          if [[ "${{ steps.openapi-changes.outputs.api }}" == "true" ]]; then
            echo "should-publish=true" >> $GITHUB_OUTPUT
            echo "üìù API changes detected, will publish"
          else
            echo "should-publish=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è No API changes detected, skipping publish"
          fi

      - name: Generate published library version number
        id: generate-library-version
        if: steps.publish-decision.outputs.should-publish == 'true'
        env:
          BASE_VERSION: ${{ env.BASE_VERSION }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_PR_NUMBER: ${{ github.event.number }}
        run: |
          echo "üéØ Using unified version manager"
          echo "Event: $GITHUB_EVENT_NAME, PR: $GITHUB_PR_NUMBER"
          ./scripts/version-manager.sh generate

      - name: Build and publish Android client library
        if: steps.publish-decision.outputs.should-publish == 'true'
        env:
          ANDROID_PUBLISH_USER: ${{ github.actor }}
          ANDROID_PUBLISH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLIENT_VERSION: ${{ steps.generate-library-version.outputs.version }}
        run: |
          echo "üî® Building and publishing Android client library..."
          cd android-test-client

          # Build and publish the library module with explicit Gradle properties
          ./gradlew client-library:assembleRelease client-library:publish \
            -PGitHubPackagesUsername="${ANDROID_PUBLISH_USER}" \
            -PGitHubPackagesPassword="${ANDROID_PUBLISH_TOKEN}" \
            -PclientVersion="${CLIENT_VERSION}" \
            --build-cache --parallel --configuration-cache --no-daemon --info

          echo "‚úÖ Android client published successfully"

      - name: Create GitHub Release for Android Client library
        if: steps.publish-decision.outputs.should-publish == 'true' && steps.generate-library-version.outputs.is-prerelease == 'false' && github.event_name != 'pull_request'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "android-client-v${{ steps.generate-library-version.outputs.version }}"
          name: "Android Client v${{ steps.generate-library-version.outputs.version }}"
          body: |
            ## Android Client Library v${{ steps.generate-library-version.outputs.version }}

            Generated Android client library for MPO WebAuthn API.

            ### Installation

            Add to your `build.gradle`:

            ```gradle
            repositories {
                maven {
                    url = uri("https://maven.pkg.github.com/${{ github.repository }}")
                    credentials {
                        username = "YOUR_GITHUB_USERNAME"
                        password = "YOUR_GITHUB_TOKEN"
                    }
                }
            }

            dependencies {
                implementation 'com.vmenon.mpo.api.authn:mpo-webauthn-android-client:${{ steps.generate-library-version.outputs.version }}'
            }
            ```

            ### Changes
            - Generated from OpenAPI specification
            - Supports WebAuthn registration and authentication
            - Compatible with Android API 26+

            ### Documentation
            - [API Documentation](https://github.com/${{ github.repository }}/blob/main/docs/setup/client-generation.md)
            - [Android Integration Guide](https://github.com/${{ github.repository }}/blob/main/android-test-client/README.md)
          draft: false
          prerelease: false

      - name: Set up npm publish registry for main branch
        if: github.event_name != 'pull_request'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          scope: ${{ env.NPM_SCOPE }}

      - name: Set up Node.js for PR (GitHub Packages)
        if: github.event_name == 'pull_request'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com'

      - name: Update client version and build
        env:
          CLIENT_VERSION: ${{ steps.generate-library-version.outputs.version }}
        run: |
          echo "üîß Updating client version to: $CLIENT_VERSION"
          cd web-test-client/generated-client

          # Generate package.json with proper npm metadata and publishConfig
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          # For PRs, publish to GitHub Packages with repository owner scope
          PACKAGE_NAME="@${{ github.repository_owner }}/mpo-webauthn-client"
          cat > package.json << EOF
          {
          "name": "$PACKAGE_NAME",
          "version": "$CLIENT_VERSION",
          "description": "TypeScript/JavaScript client for MPO WebAuthn API",
          "author": "MPO WebAuthn Server Team",
          "repository": {
           "type": "git",
           "url": "https://github.com/${{ github.repository }}.git"
          },
          "homepage": "https://github.com/${{ github.repository }}#readme",
          "bugs": {
           "url": "https://github.com/${{ github.repository }}/issues"
          },
          "keywords": [
           "webauthn",
           "passkey",
           "fido2",
           "authentication",
           "api-client",
           "typescript",
           "javascript"
          ],
          "license": "MIT",
          "main": "./dist/index.js",
          "typings": "./dist/index.d.ts",
          "module": "./dist/esm/index.js",
          "sideEffects": false,
          "files": [
           "dist/",
           "README.md"
          ],
          "scripts": {
           "build": "tsc && tsc -p tsconfig.esm.json",
           "prepare": "npm run build",
           "prepublishOnly": "npm run build"
          },
          "devDependencies": {
           "typescript": "^4.0"
          },
          "publishConfig": {
           "registry": "https://npm.pkg.github.com"
          }
          }
          EOF
          else
          # For main branch, publish to public npm
          PACKAGE_NAME="${{ env.NPM_SCOPE }}/${{ env.NPM_PACKAGE_NAME }}"
          cat > package.json << EOF
          {
          "name": "$PACKAGE_NAME",
          "version": "$CLIENT_VERSION",
          "description": "TypeScript/JavaScript client for MPO WebAuthn API",
          "author": "MPO WebAuthn Server Team",
          "repository": {
           "type": "git",
           "url": "https://github.com/${{ github.repository }}.git"
          },
          "homepage": "https://github.com/${{ github.repository }}#readme",
          "bugs": {
           "url": "https://github.com/${{ github.repository }}/issues"
          },
          "keywords": [
           "webauthn",
           "passkey",
           "fido2",
           "authentication",
           "api-client",
           "typescript",
           "javascript"
          ],
          "license": "MIT",
          "main": "./dist/index.js",
          "typings": "./dist/index.d.ts",
          "module": "./dist/esm/index.js",
          "sideEffects": false,
          "files": [
           "dist/",
           "README.md"
          ],
          "scripts": {
           "build": "tsc && tsc -p tsconfig.esm.json",
           "prepare": "npm run build",
           "prepublishOnly": "npm run build"
          },
          "devDependencies": {
           "typescript": "^4.0"
          },
          "publishConfig": {
           "access": "public"
          }
          }
          EOF
          fi

          echo "Generated package.json for: $PACKAGE_NAME"

          # Install dependencies and build
          npm install
          npm run build

          echo "‚úÖ TypeScript client built successfully"

      - name: Publish to npm registry (main branch)
        if: github.event_name != 'pull_request'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm_publish_token }}
        run: |
          echo "üì¶ Publishing to npm registry..."
          cd web-test-client/generated-client

          # Verify npm authentication
          echo "üîç Verifying npm authentication..."
          npm whoami

          # Publish to public npm registry
          npm publish

          echo "‚úÖ npm package published successfully to npm registry"

      - name: Publish to GitHub Packages (PR)
        if: github.event_name == 'pull_request'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üì¶ Publishing to GitHub Packages..."
          cd web-test-client/generated-client

          # Publish to GitHub Packages npm registry
          npm publish

          echo "‚úÖ npm package published successfully to GitHub Packages"

      - name: Create GitHub Release for Typescript Library
        if: steps.publish-decision.outputs.should-publish == 'true' && steps.generate-library-version.outputs.is-prerelease == 'false' && github.event_name != 'pull_request'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "npm-client-v${{ steps.generate-library-version.outputs.version }}"
          name: "npm Client v${{ steps.generate-library-version.outputs.version }}"
          body: |
            ## npm Client Library v${{ steps.generate-library-version.outputs.version }}

            Generated TypeScript/JavaScript client library for MPO WebAuthn API.

            ### Installation

            ```bash
            npm install ${{ env.NPM_SCOPE }}/${{ env.NPM_PACKAGE_NAME }}
            ```

            ### Usage

            ```typescript
            import { AuthenticationApi, RegistrationApi, Configuration } from '${{ env.NPM_SCOPE }}/${{ env.NPM_PACKAGE_NAME }}';

            const config = new Configuration({
              basePath: 'https://your-webauthn-server.com'
            });

            const authApi = new AuthenticationApi(config);
            const regApi = new RegistrationApi(config);
            ```

            ### Features
            - TypeScript support with full type definitions
            - ESM and CommonJS module support
            - WebAuthn registration and authentication
            - Compatible with modern browsers and Node.js

            ### Changes
            - Generated from OpenAPI specification
            - Supports WebAuthn registration and authentication flows
            - Full TypeScript type safety

            ### Documentation
            - [API Documentation](https://github.com/${{ github.repository }}/blob/main/docs/setup/client-generation.md)
            - [Integration Examples](https://github.com/${{ github.repository }}/blob/main/web-test-client/README.md)
          draft: false
          prerelease: false

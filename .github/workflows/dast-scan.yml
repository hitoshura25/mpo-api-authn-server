name: OWASP ZAP Dynamic Application Security Testing

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'webauthn-server/**'
      - 'webauthn-test-credentials-service/**'
      - 'web-test-client/**'
      - 'docker-compose.yml'
      - '.github/workflows/dast-scan.yml'
  push:
    branches: [ main ]
    paths:
      - 'webauthn-server/**'
      - 'webauthn-test-credentials-service/**'
      - 'web-test-client/**'
      - 'docker-compose.yml'
  schedule:
    # Run full DAST scan weekly on Saturdays at 3 AM UTC
    - cron: '0 3 * * 6'

# Ensure only one DAST scan runs at a time per branch
concurrency:
  group: dast-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  pull-requests: write
  actions: read

jobs:
  dast-scan:
    name: OWASP ZAP DAST Scan
    runs-on: ubuntu-latest
    
    # Skip on dependabot PRs to avoid permission issues
    if: github.actor != 'dependabot[bot]'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: webauthn_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: wrapper
          
      - name: Prepare test environment
        run: |
          # Set test environment variables
          cat > .env.test << EOF
          DATABASE_URL=jdbc:postgresql://localhost:5432/webauthn_test
          DATABASE_USER=test_user
          DATABASE_PASSWORD=test_password
          REDIS_HOST=localhost
          REDIS_PORT=6379
          WEBAUTHN_ORIGIN=http://localhost:8080
          WEBAUTHN_RP_ID=localhost
          WEBAUTHN_RP_NAME="WebAuthn Test Server"
          LOG_LEVEL=INFO
          ENVIRONMENT=test
          EOF
          
      - name: Initialize test database
        run: |
          # Wait for PostgreSQL to be ready
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for postgres..."
            sleep 2
          done
          
          # Create database schema (simplified for testing)
          PGPASSWORD=test_password psql -h localhost -U test_user -d webauthn_test << EOF
          CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            username VARCHAR(255) UNIQUE NOT NULL,
            display_name VARCHAR(255) NOT NULL,
            user_handle BYTEA NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          
          CREATE TABLE IF NOT EXISTS credentials (
            credential_id BYTEA PRIMARY KEY,
            user_handle BYTEA NOT NULL,
            public_key BYTEA NOT NULL,
            signature_count BIGINT DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          EOF
          
      - name: Build and start WebAuthn server
        run: |
          echo "üèóÔ∏è Building WebAuthn server..."
          ./gradlew :webauthn-server:build -x test
          
          echo "üöÄ Starting WebAuthn server in background..."
          source .env.test
          java -jar webauthn-server/build/libs/*-all.jar &
          WEBAUTHN_PID=$!
          echo "WEBAUTHN_PID=$WEBAUTHN_PID" >> $GITHUB_ENV
          
          # Wait for server to start
          echo "‚è≥ Waiting for WebAuthn server to start..."
          for i in {1..30}; do
            if curl -f http://localhost:8080/health > /dev/null 2>&1; then
              echo "‚úÖ WebAuthn server is ready"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
          
      - name: Build and start test credentials service
        run: |
          echo "üèóÔ∏è Building test credentials service..."
          ./gradlew :webauthn-test-credentials-service:build -x test
          
          echo "üöÄ Starting test credentials service in background..."
          source .env.test
          java -jar webauthn-test-credentials-service/build/libs/*-all.jar &
          TEST_SERVICE_PID=$!
          echo "TEST_SERVICE_PID=$TEST_SERVICE_PID" >> $GITHUB_ENV
          
          # Wait for service to start
          echo "‚è≥ Waiting for test credentials service to start..."
          for i in {1..30}; do
            if curl -f http://localhost:8081/health > /dev/null 2>&1; then
              echo "‚úÖ Test credentials service is ready"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
          
      - name: Start web test client
        run: |
          echo "üèóÔ∏è Setting up web test client..."
          cd web-test-client
          npm ci
          
          echo "üöÄ Starting web test client in background..."
          npm start &
          WEB_CLIENT_PID=$!
          echo "WEB_CLIENT_PID=$WEB_CLIENT_PID" >> $GITHUB_ENV
          
          # Wait for web client to start
          echo "‚è≥ Waiting for web test client to start..."
          for i in {1..30}; do
            if curl -f http://localhost:8082 > /dev/null 2>&1; then
              echo "‚úÖ Web test client is ready"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
          
      - name: Verify all services are running
        run: |
          echo "üîç Verifying all services are accessible..."
          
          # Test WebAuthn server
          echo "Testing WebAuthn server..."
          curl -v http://localhost:8080/health || (echo "‚ùå WebAuthn server not responding" && exit 1)
          
          # Test credentials service
          echo "Testing test credentials service..."
          curl -v http://localhost:8081/health || (echo "‚ùå Test credentials service not responding" && exit 1)
          
          # Test web client
          echo "Testing web test client..."
          curl -I http://localhost:8082 || (echo "‚ùå Web test client not responding" && exit 1)
          
          echo "‚úÖ All services are running and accessible"
          
      - name: Run OWASP ZAP Full Scan - WebAuthn Server
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: 'http://localhost:8080'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
        continue-on-error: true
        
      - name: Run OWASP ZAP Baseline Scan - Test Service
        uses: zaproxy/action-baseline@v0.12.0  
        with:
          target: 'http://localhost:8081'
          rules_file_name: '.zap/rules.tsv'
        continue-on-error: true
        
      - name: Run OWASP ZAP Baseline Scan - Web Client
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://localhost:8082'
          rules_file_name: '.zap/rules.tsv'
        continue-on-error: true
          
      - name: Check ZAP results
        if: always()
        run: |
          echo "üîç OWASP ZAP DAST scans completed"
          echo ""
          echo "üìä Applications Tested:"
          echo "- üîê WebAuthn Server (http://localhost:8080) - Full scan"
          echo "- üß™ Test Credentials Service (http://localhost:8081) - Baseline scan"
          echo "- üåê Web Test Client (http://localhost:8082) - Baseline scan"
          echo ""
          echo "üìã ZAP Actions Behavior:"
          echo "- Automatically create GitHub issues for HIGH/MEDIUM findings"
          echo "- Upload results to GitHub Security tab via SARIF"
          echo "- Comment on PRs with security findings"
          echo ""
          echo "‚úÖ Check GitHub Issues and Security tabs for results"
          
      - name: Cleanup background processes
        if: always()
        run: |
          echo "üßπ Cleaning up background processes..."
          [[ -n "$WEBAUTHN_PID" ]] && kill $WEBAUTHN_PID || true
          [[ -n "$TEST_SERVICE_PID" ]] && kill $TEST_SERVICE_PID || true  
          [[ -n "$WEB_CLIENT_PID" ]] && kill $WEB_CLIENT_PID || true
          sleep 2
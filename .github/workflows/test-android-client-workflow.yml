name: Test Android Client Integration

# This workflow tests the complete Android client generation, publishing, and integration
# by running actual Android tests against the generated client

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (no actual publishing)'
        required: false
        default: true
        type: boolean
  pull_request:
    branches: [ main ]
    paths:
      - 'webauthn-server/src/main/resources/openapi/**'
      - 'webauthn-server/build.gradle.kts'
      - 'android-test-client/**'
      - '.github/workflows/test-android-client-workflow.yml'

env:
  REGISTRY: ghcr.io
  BASE_VERSION: "1.0.0"

jobs:
  test-client-generation:
    name: Test Client Generation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: false

      - name: Generate test version
        id: version
        run: |
          BASE_VERSION="${{ env.BASE_VERSION }}"
          RUN_NUMBER="${{ github.run_number }}"
          VERSION="${BASE_VERSION}-test.${RUN_NUMBER}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated test version: $VERSION"

      - name: Test Android client generation
        run: |
          echo "🔨 Testing Android client generation..."
          ./gradlew :webauthn-server:copyGeneratedClientToLibrary --info
          
          # Check if the client was generated and copied
          if [ -d "android-test-client/client-library/src/main/java" ]; then
            echo "✅ Android client generated and copied successfully"
            
            # List generated files
            echo "📁 Generated files:"
            find android-test-client/client-library/src/main/java -name "*.java" | head -10
            
            # Check for key API classes (correct package structure)
            if [ -f "android-test-client/client-library/src/main/java/com/vmenon/mpo/api/authn/client/api/RegistrationApi.java" ]; then
              echo "✅ RegistrationApi.java found"
            else
              echo "❌ RegistrationApi.java not found"
              exit 1
            fi
            
            if [ -f "android-test-client/client-library/src/main/java/com/vmenon/mpo/api/authn/client/api/AuthenticationApi.java" ]; then
              echo "✅ AuthenticationApi.java found"
            else
              echo "❌ AuthenticationApi.java not found"
              exit 1
            fi
          else
            echo "❌ Android client not generated"
            exit 1
          fi

      - name: Build Android client library
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "🔨 Building Android client library..."
          cd android-test-client
          
          # Build the library module
          ./gradlew client-library:assembleRelease --info
          
          echo "✅ Android client library built successfully"

      - name: Publish to local Maven (for testing)
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "📦 Publishing to local Maven for testing..."
          cd android-test-client
          
          # Publish to local Maven repository
          ./gradlew client-library:publishToMavenLocal --info
          
          echo "✅ Android client published to local Maven"

      - name: Upload generated client artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-client-${{ steps.version.outputs.version }}
          path: android-test-client/client-library/
          retention-days: 1

  test-android-app:
    name: Test Android App Integration
    runs-on: ubuntu-latest
    needs: test-client-generation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: false

      - name: Download generated client artifact
        uses: actions/download-artifact@v4
        with:
          name: android-client-${{ needs.test-client-generation.outputs.version }}
          path: android-test-client/client-library/

      - name: Restore generated client library
        run: |
          cd android-test-client
          
          # Publish to local Maven again (artifacts don't preserve Maven local repo)
          ./gradlew client-library:publishToMavenLocal --info

      - name: Verify Android test client setup
        run: |
          VERSION="${{ needs.test-client-generation.outputs.version }}"
          
          echo "🔍 Verifying Android test client setup with version: $VERSION"
          
          # The app already uses the local client-library module, no dependency update needed
          echo "✅ Android test client uses local library module - no dependency update needed"

      - name: Build Android test client
        run: |
          echo "🔨 Building Android test client with generated library..."
          cd android-test-client
          
          # Build the entire Android project (app + library)
          ./gradlew build --info
          
          echo "✅ Android test client built successfully"

      - name: Start WebAuthn server
        run: |
          echo "🚀 Starting WebAuthn server for testing..."
          
          # Start dependencies in background
          ./start-dev.sh &
          
          # Wait for dependencies to be ready
          echo "⏳ Waiting for dependencies to start..."
          sleep 30
          
          # Start the server in background
          ./gradlew :webauthn-server:run &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
          # Wait for server to be ready
          echo "⏳ Waiting for server to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:8080/health > /dev/null; then
              echo "✅ Server is ready"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
          
          # Verify server is responding
          curl -v http://localhost:8080/health || exit 1

      - name: Run Android instrumentation tests
        run: |
          echo "🧪 Running Android instrumentation tests..."
          cd android-test-client
          
          # Note: This would normally require an Android emulator
          # For now, we'll run unit tests and verify the app can be built
          
          echo "📱 Running unit tests..."
          ./gradlew test --info
          
          # Verify the generated client is accessible
          echo "🔍 Verifying generated client integration..."
          ./gradlew compileDebugKotlin --info
          
          echo "✅ Android tests completed"

      - name: Test API connectivity (mock test)
        run: |
          echo "🌐 Testing API connectivity..."
          
          # Test that our WebAuthn server endpoints are accessible
          echo "Testing health endpoint..."
          curl -f http://localhost:8080/health
          
          echo "Testing OpenAPI spec endpoint..."
          curl -f http://localhost:8080/openapi
          
          echo "Testing registration start endpoint (should fail without proper request)..."
          curl -v -X POST http://localhost:8080/register/start \
            -H "Content-Type: application/json" \
            -d '{"username":"test","displayName":"Test User"}' || echo "Expected failure - OK"
          
          echo "✅ API endpoints are accessible"

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up..."
          
          # Stop the server if it's running
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID 2>/dev/null || true
          fi
          
          # Stop Docker containers
          docker-compose down || true
          
          echo "✅ Cleanup completed"

  integration-test-summary:
    name: Integration Test Summary
    runs-on: ubuntu-latest
    needs: [test-client-generation, test-android-app]
    if: always()
    steps:
      - name: Print test results
        run: |
          echo "## 📋 Android Client Integration Test Results"
          echo ""
          echo "### Test Results:"
          
          if [[ "${{ needs.test-client-generation.result }}" == "success" ]]; then
            echo "- ✅ **Client Generation**: Passed"
          else
            echo "- ❌ **Client Generation**: Failed"
          fi
          
          if [[ "${{ needs.test-android-app.result }}" == "success" ]]; then
            echo "- ✅ **Android App Integration**: Passed"
          else
            echo "- ❌ **Android App Integration**: Failed"
          fi
          
          echo ""
          echo "### Generated Version:"
          echo "- **Test Version**: ${{ needs.test-client-generation.outputs.version }}"
          
          echo ""
          echo "### Summary:"
          if [[ "${{ needs.test-client-generation.result }}" == "success" && "${{ needs.test-android-app.result }}" == "success" ]]; then
            echo "🎉 **All tests passed!** The Android client generation and integration workflow is working correctly."
          else
            echo "❌ **Some tests failed.** Please check the logs above for details."
          fi
          
          echo ""
          echo "### Next Steps:"
          echo "- If tests pass, the main publishing workflow should work correctly"
          echo "- Any API changes will trigger automatic client generation and publishing"
          echo "- PR versions will be published with format: \`1.0.0-pr-123.1\`"
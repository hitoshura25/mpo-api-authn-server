# Main Branch Post-Processing Workflow
#
# This workflow handles post-processing tasks after the main CI/CD pipeline completes
# on the main branch. It implements Docker registry optimization and conditional publishing.
#
# ARCHITECTURE - CORRECTED JOB ORDER:
# Phase 1 - Change Detection:
# 1. Change Detection: Multi-layer digest comparison between GHCR and DockerHub (RUNS FIRST while GHCR images exist)
# 2. Both Images: Handles webauthn-server and webauthn-test-credentials-service
#
# Phase 2 - DockerHub Publishing + Git Tagging:
# 3. Conditional DockerHub Publishing: Only when images actually changed
# 4. DockerHub Authentication: Secure credential management
# 5. Re-tag and Push: Pull from GHCR, push to DockerHub with same tags
# 6. Repository Description: Update DockerHub repository descriptions
# 7. Git Tagging: Tag repository on successful DockerHub publish
#
# Phase 3 - Cleanup:
# 8. GHCR Cleanup: ALWAYS runs (success OR failure) but AFTER change detection completes
#
# TRIGGERS:
# - After main-ci-cd.yml workflow completes on main branch
# - Runs regardless of CI/CD success/failure for cleanup
# - Conditional publishing only on CI/CD success
#
# BENEFITS:
# ✅ Prevents GHCR registry bloat through automatic cleanup
# ✅ Only publishes to DockerHub when images actually changed
# ✅ Maintains DockerHub repository descriptions automatically
# ✅ Creates git tags for successful DockerHub publishes
# ✅ Handles both webauthn-server and test-credentials-service images
# ✅ Graceful error handling with comprehensive logging
# ✅ Security best practices with minimal required permissions
# ✅ FIXED: Correct job ordering ensures change detection happens BEFORE cleanup

name: Main Branch Post-Processing

on:
  workflow_run:
    workflows: [ "Main CI/CD Pipeline" ]
    branches: [ main ]
    types: [ completed ]

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: hitoshura25/webauthn-server
  DOCKER_TEST_CREDENTIALS_IMAGE_NAME: hitoshura25/webauthn-test-credentials-service
  DOCKERHUB_SERVER_REPO: hitoshura25/webauthn-server
  DOCKERHUB_TEST_CREDENTIALS_REPO: hitoshura25/webauthn-test-credentials-service

  # Client Library Publishing Configuration
  BASE_VERSION: "1.0"
  NPM_SCOPE: "@vmenon25"
  NPM_PACKAGE_NAME: "mpo-webauthn-client"

  # 3-Tier AI Security Analysis Configuration
  GEMINI_ONLY_MODE: false
  TEMPLATE_ONLY_MODE: false

  # Docker Security Analysis Focus
  DOCKER_SECURITY_CONTEXT: "WebAuthn container security with FIDO2 authentication focus"

permissions:
  # Workflow-level permissions: minimal by default
  contents: read

jobs:
  # Job 1: Check if main CI built new Docker images (determines processing strategy)
  check-main-ci-images:
    name: Check if main CI built new images
    runs-on: ubuntu-latest
    outputs:
      images-were-built: ${{ steps.check-artifact.outputs.images-were-built }}
      skip-security-scan: ${{ steps.check-artifact.outputs.skip-security-scan }}
      skip-all-docker-processing: ${{ steps.set-strategy.outputs.skip-all-docker-processing }}
      publish-from-main-ci: ${{ steps.set-strategy.outputs.publish-from-main-ci }}
    steps:
      - name: Download Docker build manifest from main CI
        id: download-manifest
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: docker-build-manifest
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          
      - name: Check if images were built in main CI
        id: check-artifact
        run: |
          if [[ -f "build-manifest.txt" ]]; then
            echo "📦 Found Docker build manifest from main CI run"
            cat build-manifest.txt
            echo ""
            echo "✅ Images were built in main CI - security scanning was already performed"
            echo "images-were-built=true" >> $GITHUB_OUTPUT
            echo "skip-security-scan=true" >> $GITHUB_OUTPUT
          else
            echo "❌ No Docker build manifest found - main CI may not have built images"
            echo "🔄 Will perform security scanning as fallback"
            echo "images-were-built=false" >> $GITHUB_OUTPUT
            echo "skip-security-scan=false" >> $GITHUB_OUTPUT
          fi

      - name: Set post-processing execution strategy
        id: set-strategy
        run: |
          if [[ "${{ steps.check-artifact.outputs.skip-security-scan }}" == "true" ]]; then
            echo "🐳 STRATEGY: Skip all Docker processing - Main CI handled everything"
            echo "✅ Main CI built and scanned new Docker images" 
            echo "🚀 Images are already published to GHCR with security validation"
            echo "📦 Will publish to DockerHub directly from GHCR images"
            echo "⏭️  Skipping: Change detection, security scanning, AI analysis"
            echo "skip-all-docker-processing=true" >> $GITHUB_OUTPUT
            echo "publish-from-main-ci=true" >> $GITHUB_OUTPUT
          else
            echo "🔄 STRATEGY: Full Docker processing pipeline (fallback)"
            echo "❓ Main CI may not have built new images"
            echo "🔍 Will perform: Change detection, security scanning, AI analysis"
            echo "⚠️  This should be rare - main CI usually handles Docker builds"
            echo "skip-all-docker-processing=false" >> $GITHUB_OUTPUT
            echo "publish-from-main-ci=false" >> $GITHUB_OUTPUT
          fi

  # Job 2: Detect Changes (Only runs if main CI didn't build images - fallback)
  detect-changes:
    name: Detect DockerHub publishing needs (fallback)
    runs-on: ubuntu-latest
    needs: check-main-ci-images
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      needs.check-main-ci-images.outputs.skip-all-docker-processing == 'false'
    outputs:
      webauthn-server-changed: ${{ steps.check-server.outputs.has-changes }}
      test-credentials-changed: ${{ steps.check-test-credentials.outputs.has-changes }}
      any-changes: ${{ steps.summary.outputs.any-changes }}
    permissions:
      contents: read
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to DockerHub (for inspection only)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        continue-on-error: true  # Don't fail if DockerHub credentials missing

      - name: Checkout repository for change detection
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check WebAuthn Server changes
        id: check-server
        run: |
          chmod +x scripts/docker/detect-changes.sh
          scripts/docker/detect-changes.sh webauthn-server

      - name: Check Test Credentials Service changes
        id: check-test-credentials
        run: |
          chmod +x scripts/docker/detect-changes.sh
          scripts/docker/detect-changes.sh test-credentials

      - name: Summary of changes
        id: summary
        run: |
          SERVER_CHANGED="${{ steps.check-server.outputs.has-changes }}"
          TEST_CHANGED="${{ steps.check-test-credentials.outputs.has-changes }}"

          echo "📊 Change Detection Summary:"
          echo "WebAuthn Server changed: $SERVER_CHANGED"
          echo "Test Credentials Service changed: $TEST_CHANGED"

          if [[ "$SERVER_CHANGED" == "true" || "$TEST_CHANGED" == "true" ]]; then
            echo "🚀 DockerHub publishing needed"
            echo "any-changes=true" >> $GITHUB_OUTPUT
          else
            echo "✅ No DockerHub publishing needed - all images up to date"
            echo "any-changes=false" >> $GITHUB_OUTPUT
          fi

  # Job 3: Docker Security Scanning (Only if images weren't scanned in main CI)
  docker-security-scan:
    name: AI-Enhanced Docker security scan (fallback)
    runs-on: ubuntu-latest
    needs: [ detect-changes, check-main-ci-images ]
    if: |
      always() &&
      needs.detect-changes.outputs.any-changes == 'true' &&
      needs.check-main-ci-images.outputs.skip-security-scan == 'false'
    permissions:
      contents: read
      security-events: write
    outputs:
      scan-results: ${{ steps.security-scan.outputs.scan-results }}
      critical-vulnerabilities: ${{ steps.security-scan.outputs.critical-vulnerabilities }}
      scan-passed: ${{ steps.security-scan.outputs.scan-passed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Comprehensive Security Scanning
        id: security-scan
        run: |
          chmod +x scripts/docker/scan-security.sh
          echo "🔍 Starting Docker security scanning with detailed logging..."
          set -x  # Enable verbose logging for debugging
          scripts/docker/scan-security.sh "${{ needs.detect-changes.outputs.webauthn-server-changed }}" "${{ needs.detect-changes.outputs.test-credentials-changed }}" || {
            echo "❌ Security scan failed - check logs above for details"
            echo "📋 Listing available scan files for debugging:"
            ls -la *.json *.sarif 2>/dev/null || echo "No scan files found"
            exit 1
          }
          set +x  # Disable verbose logging

      - name: Upload scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-security-scan-results
          path: |
            docker-security-scan-results.json
            *-vulns.json
            *-secrets.json
            *-config.json
            *.sarif
            scan-security.log

      - name: Upload scan results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: docker-security-scan-results.json

  # Job 4: 3-Tier AI-Enhanced Security Analysis (Only if new scan was performed)
  ai-security-analysis:
    name: 3-Tier AI-Enhanced Docker security analysis
    runs-on: ubuntu-latest
    needs: [ detect-changes, check-main-ci-images, docker-security-scan ]
    if: |
      always() &&
      needs.detect-changes.outputs.any-changes == 'true' &&
      needs.check-main-ci-images.outputs.skip-security-scan == 'false' &&
      needs.docker-security-scan.result == 'success'
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js for AI analysis
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Download security scan results
        uses: actions/download-artifact@v4
        with:
          name: docker-security-scan-results

      - name: Install 3-Tier AI analysis dependencies
        run: |
          echo "📦 Installing AI analysis dependencies for 3-tier system..."
          npm install --save-dev \
            @anthropic-ai/sdk \
            @google/generative-ai \
            typescript \
            ts-node \
            @types/node || echo "⚠️ AI SDK installation failed, will use template analysis"

      - name: 3-Tier AI-Enhanced Docker Security Analysis
        env:
          # AI Provider Configuration
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

          # Analysis Mode Configuration
          GEMINI_ONLY_MODE: ${{ env.GEMINI_ONLY_MODE }}
          TEMPLATE_ONLY_MODE: ${{ env.TEMPLATE_ONLY_MODE }}

          # Docker Security Context
          SCAN_RESULTS: ${{ needs.docker-security-scan.outputs.scan-results }}
          CRITICAL_VULN_COUNT: ${{ needs.docker-security-scan.outputs.critical-vulnerabilities }}
          DOCKER_SECURITY_CONTEXT: ${{ env.DOCKER_SECURITY_CONTEXT }}

          # Analysis Metadata
          WORKFLOW_TYPE: "docker-security-analysis"
          IMAGE_NAMES: "${{ env.DOCKER_IMAGE_NAME }},${{ env.DOCKER_TEST_CREDENTIALS_IMAGE_NAME }}"
        run: |
          echo "🤖 Starting 3-Tier AI-Enhanced Docker Security Analysis"
          echo "🎯 Analysis Mode: Standard (Anthropic → Gemini → Template)"
          echo "🐳 Docker Images: ${{ env.DOCKER_IMAGE_NAME }}, ${{ env.DOCKER_TEST_CREDENTIALS_IMAGE_NAME }}"

          chmod +x scripts/ci/ai-docker-security-analyzer.cjs
          node scripts/ci/ai-docker-security-analyzer.cjs

      - name: Upload AI analysis results
        uses: actions/upload-artifact@v4
        with:
          name: ai-security-analysis
          path: ai-security-analysis.json

  # Job 5: Publish to DockerHub (Comprehensive logic: main CI images or fallback images)
  publish-dockerhub:
    name: Publish to DockerHub
    runs-on: ubuntu-latest
    needs: [ check-main-ci-images, detect-changes, docker-security-scan, ai-security-analysis ]
    if: |
      always() &&
      (
        needs.check-main-ci-images.outputs.publish-from-main-ci == 'true' ||
        (needs.detect-changes.outputs.any-changes == 'true' && needs.docker-security-scan.outputs.scan-passed == 'true')
      )
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: DockerHub publishing strategy
        run: |
          if [[ "${{ needs.check-main-ci-images.outputs.publish-from-main-ci }}" == "true" ]]; then
            echo "📦 PUBLISHING STRATEGY: Using images from main CI"
            echo "✅ Images were built and scanned in main CI pipeline"
            echo "🚀 Publishing pre-validated images from GHCR to DockerHub"
          else
            echo "📦 PUBLISHING STRATEGY: Using fallback images"  
            echo "🔄 Images were built and scanned in post-processing fallback"
            echo "⚠️  This path should be rare"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Publish to DockerHub
        run: |
          chmod +x scripts/docker/publish-dockerhub.sh
          scripts/docker/publish-dockerhub.sh "${{ needs.detect-changes.outputs.webauthn-server-changed }}" "${{ needs.detect-changes.outputs.test-credentials-changed }}"

      - name: Update WebAuthn Server DockerHub description
        if: needs.detect-changes.outputs.webauthn-server-changed == 'true'
        uses: peter-evans/dockerhub-description@v4
        continue-on-error: true  # Don't fail workflow if description update fails
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ env.DOCKERHUB_SERVER_REPO }}
          short-description: 'WebAuthn authentication server built with Ktor and Yubico java-webauthn-server'
          readme-filepath: ./webauthn-server/README.md

      - name: Update Test Credentials Service DockerHub description
        if: needs.detect-changes.outputs.test-credentials-changed == 'true'
        uses: peter-evans/dockerhub-description@v4
        continue-on-error: true  # Don't fail workflow if description update fails
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ env.DOCKERHUB_TEST_CREDENTIALS_REPO }}
          short-description: 'WebAuthn test credentials service for cross-platform testing with FIDO2/WebAuthn'
          readme-filepath: ./webauthn-test-credentials-service/README.md

  # Job 3: Dummy job for cleanup dependencies (Always runs when detect-changes is skipped)
  cleanup-trigger:
    name: Trigger cleanup when change detection skipped
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'success'
    steps:
      - name: Cleanup trigger placeholder
        run: |
          echo "🔄 CI/CD failed, triggering cleanup without change detection"
          echo "This job ensures cleanup-ghcr has a dependency to wait for"

  # Job 4: GHCR Cleanup (Always runs after change detection OR when CI/CD failed)
  cleanup-ghcr:
    name: Clean up GHCR images
    runs-on: ubuntu-latest
    needs: [ detect-changes, cleanup-trigger ]
    if: always()  # Run regardless of previous job results
    permissions:
      contents: read
      packages: write  # Required to delete GHCR packages
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up old GHCR images
        continue-on-error: true  # Don't fail the workflow if cleanup fails
        run: |
          chmod +x scripts/docker/cleanup-ghcr.sh
          scripts/docker/cleanup-ghcr.sh "${{ github.repository_owner }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 6: Git Tagging (Only on successful DockerHub publish)
  tag-repository:
    name: Tag repository on successful publish
    runs-on: ubuntu-latest
    needs: [ detect-changes, publish-dockerhub ]
    if: |
      always() &&
      needs.publish-dockerhub.result == 'success'
    permissions:
      contents: write  # Required to create git tags
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Full history for tagging

      - name: Create and push git tag
        run: |
          echo "🏷️ Creating git tag for successful DockerHub publish..."

          # Generate timestamp-based tag
          TIMESTAMP=$(date -u +"%Y%m%d-%H%M%S")
          TAG_NAME="dockerhub-publish-${TIMESTAMP}"

          # Create tag with commit message
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git tag -a "$TAG_NAME" -m "DockerHub publish on $(date -u)"
          git push origin "$TAG_NAME"

          echo "✅ Created and pushed tag: $TAG_NAME"
          echo "Published images:"

          if [[ "${{ needs.detect-changes.outputs.webauthn-server-changed }}" == "true" ]]; then
            echo "  - ${{ env.DOCKERHUB_SERVER_REPO }}:latest"
          fi

          if [[ "${{ needs.detect-changes.outputs.test-credentials-changed }}" == "true" ]]; then
            echo "  - ${{ env.DOCKERHUB_TEST_CREDENTIALS_REPO }}:latest"
          fi

  # Job 6: Publish TypeScript Client Library (Parallel)
  publish-typescript-client:
    name: Publish TypeScript client library
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    permissions:
      contents: write  # Required for creating GitHub releases
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch all history and tags for version continuity

      - name: Set up JDK for OpenAPI generation
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-disabled: true

      - name: Generate library version
        id: generate-version
        env:
          BASE_VERSION: ${{ env.BASE_VERSION }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
        run: |
          echo "🎯 Generating TypeScript client version with centralized version manager"
          ./scripts/core/version-manager.sh generate

      - name: Generate TypeScript client from OpenAPI spec
        env:
          CLIENT_VERSION: ${{ steps.generate-version.outputs.version }}
        run: |
          echo "🔨 Generating TypeScript client from OpenAPI specification..."
          echo "Using version: $CLIENT_VERSION"
          ./gradlew :webauthn-server:copyGeneratedTsClientToWebTestClient -PclientVersion="$CLIENT_VERSION" -PnpmName="${{ env.NPM_PACKAGE_NAME }}"

          # Verify client generation
          if [ -f "web-test-client/generated-client/src/index.ts" ]; then
            echo "✅ TypeScript client generated successfully"
          else
            echo "❌ TypeScript client generation failed"
            exit 1
          fi

      - name: Set up Node.js for npm publishing
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          scope: ${{ env.NPM_SCOPE }}

      - name: Update client version and build
        env:
          CLIENT_VERSION: ${{ steps.generate-version.outputs.version }}
        run: |
          echo "🔧 Updating TypeScript client version to: $CLIENT_VERSION"
          cd web-test-client/generated-client

          # Generate package.json with proper npm metadata - using heredoc approach from working reference
          PACKAGE_NAME="${{ env.NPM_SCOPE }}/${{ env.NPM_PACKAGE_NAME }}"
          cat > package.json << EOF
          {
          "name": "$PACKAGE_NAME",
          "version": "$CLIENT_VERSION",
          "description": "TypeScript/JavaScript client for MPO WebAuthn API",
          "author": "MPO WebAuthn Server Team",
          "repository": {
           "type": "git",
           "url": "https://github.com/${{ github.repository }}.git"
          },
          "homepage": "https://github.com/${{ github.repository }}#readme",
          "bugs": {
           "url": "https://github.com/${{ github.repository }}/issues"
          },
          "keywords": [
           "webauthn",
           "passkey",
           "fido2",
           "authentication",
           "api-client",
           "typescript",
           "javascript"
          ],
          "license": "MIT",
          "main": "./dist/index.js",
          "typings": "./dist/index.d.ts",
          "module": "./dist/esm/index.js",
          "sideEffects": false,
          "files": [
           "dist/",
           "README.md"
          ],
          "scripts": {
           "build": "tsc && tsc -p tsconfig.esm.json",
           "prepare": "npm run build",
           "prepublishOnly": "npm run build"
          },
          "devDependencies": {
           "typescript": "^4.0"
          },
          "publishConfig": {
           "access": "public"
          }
          }
          EOF

          echo "Generated package.json for: $PACKAGE_NAME"

          # Install dependencies and build
          npm install
          npm run build

          echo "✅ TypeScript client built successfully"

      - name: Publish to npm registry
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: |
          echo "📦 Publishing TypeScript client to npm registry..."
          cd web-test-client/generated-client

          # Verify npm authentication
          echo "🔍 Verifying npm authentication..."
          npm whoami

          # Publish to public npm registry
          npm publish

          echo "✅ TypeScript client published successfully to npm registry"

      - name: Create GitHub Release for TypeScript Library
        if: steps.generate-version.outputs.is-prerelease == 'false' && github.event_name != 'pull_request'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "npm-client-v${{ steps.generate-version.outputs.version }}"
          name: "npm Client v${{ steps.generate-version.outputs.version }}"
          body: |
            ## npm Client Library v${{ steps.generate-version.outputs.version }}

            Generated TypeScript/JavaScript client library for MPO WebAuthn API.

            ### Installation

            ```bash
            npm install ${{ env.NPM_SCOPE }}/${{ env.NPM_PACKAGE_NAME }}
            ```

            ### Usage

            ```typescript
            import { AuthenticationApi, RegistrationApi, Configuration } from '${{ env.NPM_SCOPE }}/${{ env.NPM_PACKAGE_NAME }}';

            const config = new Configuration({
              basePath: 'https://your-webauthn-server.com'
            });

            const authApi = new AuthenticationApi(config);
            const regApi = new RegistrationApi(config);
            ```

            ### Features
            - TypeScript support with full type definitions
            - ESM and CommonJS module support
            - WebAuthn registration and authentication
            - Compatible with modern browsers and Node.js

            ### Changes
            - Generated from OpenAPI specification
            - Supports WebAuthn registration and authentication flows
            - Full TypeScript type safety

            ### Documentation
            - [API Documentation](https://github.com/${{ github.repository }}/blob/main/docs/setup/client-generation.md)
            - [Integration Examples](https://github.com/${{ github.repository }}/blob/main/web-test-client/README.md)
          draft: false
          prerelease: false

  # Job 7: Publish Android Client Library (Parallel)
  publish-android-client:
    name: Publish Android client library
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    permissions:
      contents: write  # Required for creating GitHub releases
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch all history and tags for version continuity

      - name: Set up JDK for Android client generation
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle with caching
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-disabled: true

      - name: Generate library version
        id: generate-version
        env:
          BASE_VERSION: ${{ env.BASE_VERSION }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
        run: |
          echo "🎯 Generating Android client version with centralized version manager"
          ./scripts/core/version-manager.sh generate

      - name: Generate Android client from OpenAPI spec
        env:
          CLIENT_VERSION: ${{ steps.generate-version.outputs.version }}
        run: |
          echo "🔨 Generating Android client from OpenAPI specification..."
          echo "Using version: $CLIENT_VERSION"
          ./gradlew :webauthn-server:copyGeneratedClientToLibrary -PclientVersion="$CLIENT_VERSION"

          # Verify client generation
          if [ -f "android-test-client/client-library/src/main/java/com/vmenon/mpo/api/authn/client/api/RegistrationApi.java" ]; then
            echo "✅ Android client generated successfully"
          else
            echo "❌ Android client generation failed"
            exit 1
          fi

      - name: Build and publish Android client library
        env:
          ANDROID_PUBLISH_USER: ${{ github.actor }}
          ANDROID_PUBLISH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLIENT_VERSION: ${{ steps.generate-version.outputs.version }}
        run: |
          echo "🔨 Building and publishing Android client library..."
          cd android-test-client

          # Build and publish the library module with explicit Gradle properties
          ./gradlew client-library:assembleRelease client-library:publish \
            -PGitHubPackagesUsername="${ANDROID_PUBLISH_USER}" \
            -PGitHubPackagesPassword="${ANDROID_PUBLISH_TOKEN}" \
            -PclientVersion="${CLIENT_VERSION}" \
            --build-cache --parallel --configuration-cache --no-daemon --info

          echo "✅ Android client published successfully"

      - name: Create GitHub Release for Android Client Library
        if: steps.generate-version.outputs.is-prerelease == 'false' && github.event_name != 'pull_request'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "android-client-v${{ steps.generate-version.outputs.version }}"
          name: "Android Client v${{ steps.generate-version.outputs.version }}"
          body: |
            ## Android Client Library v${{ steps.generate-version.outputs.version }}

            Generated Android client library for MPO WebAuthn API.

            ### Installation

            Add to your `build.gradle`:

            ```gradle
            repositories {
                maven {
                    url = uri("https://maven.pkg.github.com/${{ github.repository }}")
                    credentials {
                        username = "YOUR_GITHUB_USERNAME"
                        password = "YOUR_GITHUB_TOKEN"
                    }
                }
            }

            dependencies {
                implementation 'com.vmenon.mpo.api.authn:mpo-webauthn-android-client:${{ steps.generate-version.outputs.version }}'
            }
            ```

            ### Changes
            - Generated from OpenAPI specification
            - Supports WebAuthn registration and authentication
            - Compatible with Android API 26+

            ### Documentation
            - [API Documentation](https://github.com/${{ github.repository }}/blob/main/docs/setup/client-generation.md)
            - [Android Integration Guide](https://github.com/${{ github.repository }}/blob/main/android-test-client/README.md)
          draft: false
          prerelease: false

  # Job 8: Report post-processing status
  report-post-processing-status:
    name: Report post-processing status
    runs-on: ubuntu-latest
    needs: [ cleanup-ghcr, detect-changes, publish-dockerhub, tag-repository, publish-typescript-client, publish-android-client ]
    if: always()
    steps:
      - name: Report overall post-processing status
        run: |
          echo "📋 Main Branch Post-Processing Results Summary:"
          echo "Original CI/CD result: ${{ github.event.workflow_run.conclusion }}"
          echo "GHCR cleanup: ${{ needs.cleanup-ghcr.result }}"
          echo "Change detection: ${{ needs.detect-changes.result }}"
          echo "DockerHub publishing: ${{ needs.publish-dockerhub.result }}"
          echo "Git tagging: ${{ needs.tag-repository.result }}"
          echo "TypeScript client publishing: ${{ needs.publish-typescript-client.result }}"
          echo "Android client publishing: ${{ needs.publish-android-client.result }}"

          echo ""
          echo "🧹 GHCR Cleanup: Always executed to prevent registry bloat"
          echo "📚 Client Libraries: Published in parallel for efficiency"

          if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "✅ Original CI/CD pipeline succeeded"

            # Check client library publishing results
            if [[ "${{ needs.publish-typescript-client.result }}" == "success" ]]; then
              echo "📦 TypeScript client library published successfully"
            elif [[ "${{ needs.publish-typescript-client.result }}" == "failure" ]]; then
              echo "❌ TypeScript client library publishing failed"
            else
              echo "⏭️ TypeScript client library publishing skipped/cancelled"
            fi

            if [[ "${{ needs.publish-android-client.result }}" == "success" ]]; then
              echo "📱 Android client library published successfully"
            elif [[ "${{ needs.publish-android-client.result }}" == "failure" ]]; then
              echo "❌ Android client library publishing failed"
            else
              echo "⏭️ Android client library publishing skipped/cancelled"
            fi

            if [[ "${{ needs.detect-changes.outputs.any-changes }}" == "true" ]]; then
              echo "🔄 Docker changes detected, DockerHub publishing executed"
              echo "  WebAuthn Server: ${{ needs.detect-changes.outputs.webauthn-server-changed }}"
              echo "  Test Credentials: ${{ needs.detect-changes.outputs.test-credentials-changed }}"

              if [[ "${{ needs.publish-dockerhub.result }}" == "success" ]]; then
                echo "🚀 DockerHub publishing successful"
                echo "🏷️ Repository tagged: ${{ needs.tag-repository.result }}"
              else
                echo "❌ DockerHub publishing failed"
              fi
            else
              echo "✅ No Docker changes detected - DockerHub images already up to date"
            fi

            # Overall success check
            FAILED_JOBS=0
            if [[ "${{ needs.publish-typescript-client.result }}" == "failure" ]]; then
              FAILED_JOBS=$((FAILED_JOBS + 1))
            fi
            if [[ "${{ needs.publish-android-client.result }}" == "failure" ]]; then
              FAILED_JOBS=$((FAILED_JOBS + 1))
            fi
            if [[ "${{ needs.publish-dockerhub.result }}" == "failure" && "${{ needs.detect-changes.outputs.any-changes }}" == "true" ]]; then
              FAILED_JOBS=$((FAILED_JOBS + 1))
            fi

            if [[ $FAILED_JOBS -eq 0 ]]; then
              echo "🎉 Complete post-processing pipeline successful!"
            else
              echo "⚠️ Post-processing completed with $FAILED_JOBS failed job(s)"
              exit 1
            fi
          else
            echo "❌ Original CI/CD pipeline failed"
            echo "🧹 Only cleanup operations were performed"
          fi

name: Cleanup PR artifacts

on:
  pull_request:
    types: [ closed ]

jobs:
  cleanup-docker-images:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Delete PR Docker images
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "üê≥ Cleaning up Docker images for PR #$PR_NUMBER"
          
          WEBAUTHN_DELETED=0
          TEST_CREDS_DELETED=0

          # Cleanup webauthn-server images
          echo "üîç Checking webauthn-server images..."
          if gh api "/users/${{ github.repository_owner }}/packages/container/webauthn-server/versions" >/dev/null 2>&1; then
            gh api --paginate "/users/${{ github.repository_owner }}/packages/container/webauthn-server/versions" \
              --jq '.[] | select(.metadata.container.tags[]? | test("^pr-'$PR_NUMBER'(-|$)")) | .id' | \
            while read version_id; do
              if [ -n "$version_id" ]; then
                echo "üóëÔ∏è  Deleting webauthn-server version: $version_id"
                if gh api -X DELETE "/users/${{ github.repository_owner }}/packages/container/webauthn-server/versions/$version_id" >/dev/null 2>&1; then
                  WEBAUTHN_DELETED=$((WEBAUTHN_DELETED + 1))
                  echo "‚úÖ Successfully deleted webauthn-server version $version_id"
                else
                  echo "‚ùå Failed to delete webauthn-server version $version_id"
                fi
              fi
            done
          else
            echo "‚ÑπÔ∏è  No webauthn-server package found (package may not exist yet)"
          fi

          # Cleanup webauthn-test-credentials-service images
          echo "üîç Checking webauthn-test-credentials-service images..."
          if gh api "/users/${{ github.repository_owner }}/packages/container/webauthn-test-credentials-service/versions" >/dev/null 2>&1; then
            gh api --paginate "/users/${{ github.repository_owner }}/packages/container/webauthn-test-credentials-service/versions" \
              --jq '.[] | select(.metadata.container.tags[]? | test("^pr-'$PR_NUMBER'(-|$)")) | .id' | \
            while read version_id; do
              if [ -n "$version_id" ]; then
                echo "üóëÔ∏è  Deleting test-credentials version: $version_id"
                if gh api -X DELETE "/users/${{ github.repository_owner }}/packages/container/webauthn-test-credentials-service/versions/$version_id" >/dev/null 2>&1; then
                  TEST_CREDS_DELETED=$((TEST_CREDS_DELETED + 1))
                  echo "‚úÖ Successfully deleted test-credentials version $version_id"
                else
                  echo "‚ùå Failed to delete test-credentials version $version_id"
                fi
              fi
            done
          else
            echo "‚ÑπÔ∏è  No webauthn-test-credentials-service package found (package may not exist yet)"
          fi
          
          echo ""
          echo "üìä Docker Cleanup Summary:"
          echo "  WebAuthn Server images deleted: $WEBAUTHN_DELETED"
          echo "  Test Credentials images deleted: $TEST_CREDS_DELETED"
          echo "  Total Docker images deleted: $((WEBAUTHN_DELETED + TEST_CREDS_DELETED))"

  cleanup-npm-packages:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Delete PR NPM packages
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "üì¶ Cleaning up NPM packages for PR #$PR_NUMBER"
          
          NPM_DELETED=0
          
          # The staging NPM packages use @hitoshura25 scope with -staging suffix
          PACKAGE_NAME="hitoshura25%2Fmpo-webauthn-client-staging"
          
          echo "üîç Checking NPM package: @hitoshura25/mpo-webauthn-client-staging"
          if gh api "/user/packages/npm/$PACKAGE_NAME/versions" >/dev/null 2>&1; then
            gh api --paginate "/user/packages/npm/$PACKAGE_NAME/versions" \
              --jq '.[] | select(.name | test("^1\\.0\\.[0-9]+-pr\\.'$PR_NUMBER'\\.")) | .id' | \
            while read version_id; do
              if [ -n "$version_id" ]; then
                VERSION_NAME=$(gh api "/user/packages/npm/$PACKAGE_NAME/versions/$version_id" --jq '.name')
                echo "üóëÔ∏è  Deleting NPM version: $VERSION_NAME (ID: $version_id)"
                if gh api -X DELETE "/user/packages/npm/$PACKAGE_NAME/versions/$version_id" >/dev/null 2>&1; then
                  NPM_DELETED=$((NPM_DELETED + 1))
                  echo "‚úÖ Successfully deleted NPM version $VERSION_NAME"
                else
                  echo "‚ùå Failed to delete NPM version $VERSION_NAME"
                fi
              fi
            done
          else
            echo "‚ÑπÔ∏è  No NPM staging package found @hitoshura25/mpo-webauthn-client-staging (package may not exist yet)"
          fi
          
          echo ""
          echo "üìä NPM Cleanup Summary:"
          echo "  NPM package versions deleted: $NPM_DELETED"

  cleanup-maven-packages:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Delete PR Maven packages
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "üèóÔ∏è  Cleaning up Maven packages for PR #$PR_NUMBER"
          
          MAVEN_DELETED=0
          
          # The staging Maven packages use -staging suffix
          PACKAGE_NAME="io.github.hitoshura25.mpo-webauthn-android-client-staging"
          
          echo "üîç Checking Maven package: $PACKAGE_NAME"
          if gh api "/user/packages/maven/$PACKAGE_NAME/versions" >/dev/null 2>&1; then
            gh api --paginate "/user/packages/maven/$PACKAGE_NAME/versions" \
              --jq '.[] | select(.name | test("^1\\.0\\.[0-9]+-pr\\.'$PR_NUMBER'\\.")) | .id' | \
            while read version_id; do
              if [ -n "$version_id" ]; then
                VERSION_NAME=$(gh api "/user/packages/maven/$PACKAGE_NAME/versions/$version_id" --jq '.name')
                echo "üóëÔ∏è  Deleting Maven version: $VERSION_NAME (ID: $version_id)"
                if gh api -X DELETE "/user/packages/maven/$PACKAGE_NAME/versions/$version_id" >/dev/null 2>&1; then
                  MAVEN_DELETED=$((MAVEN_DELETED + 1))
                  echo "‚úÖ Successfully deleted Maven version $VERSION_NAME"
                else
                  echo "‚ùå Failed to delete Maven version $VERSION_NAME"
                fi
              fi
            done
          else
            echo "‚ÑπÔ∏è  No Maven staging package found $PACKAGE_NAME (package may not exist yet)"
          fi
          
          echo ""
          echo "üìä Maven Cleanup Summary:"
          echo "  Maven package versions deleted: $MAVEN_DELETED"

  cleanup-summary:
    runs-on: ubuntu-latest
    needs: [ cleanup-docker-images, cleanup-npm-packages, cleanup-maven-packages ]
    if: always()
    steps:
      - name: Cleanup Summary Report
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "üßπ PR #$PR_NUMBER Cleanup Complete"
          echo ""
          echo "üìã Job Results:"
          echo "  Docker Images Cleanup: ${{ needs.cleanup-docker-images.result }}"
          echo "  NPM Packages Cleanup: ${{ needs.cleanup-npm-packages.result }}"
          echo "  Maven Packages Cleanup: ${{ needs.cleanup-maven-packages.result }}"
          echo ""
          
          FAILED_JOBS=0
          if [[ "${{ needs.cleanup-docker-images.result }}" == "failure" ]]; then
            FAILED_JOBS=$((FAILED_JOBS + 1))
          fi
          if [[ "${{ needs.cleanup-npm-packages.result }}" == "failure" ]]; then
            FAILED_JOBS=$((FAILED_JOBS + 1))
          fi
          if [[ "${{ needs.cleanup-maven-packages.result }}" == "failure" ]]; then
            FAILED_JOBS=$((FAILED_JOBS + 1))
          fi
          
          if [[ $FAILED_JOBS -eq 0 ]]; then
            echo "‚úÖ All cleanup operations completed successfully"
            echo "üéâ PR #$PR_NUMBER artifacts have been cleaned up"
          else
            echo "‚ö†Ô∏è $FAILED_JOBS cleanup job(s) encountered issues"
            echo "üîç Check individual job logs for details"
            echo "üìù Some packages may not have existed (404 errors are normal for new PRs)"
          fi

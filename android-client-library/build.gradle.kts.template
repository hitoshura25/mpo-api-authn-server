plugins {
    id("java-library")
    id("maven-publish")
    id("signing")
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

// Configure version from environment variables (properties not needed for non-publishing configuration)
val clientVersion = System.getenv("CLIENT_VERSION") ?: "1.0.0-SNAPSHOT"

// Configure artifact ID from environment variables
val androidArtifactId = System.getenv("ANDROID_ARTIFACT_ID") ?: "mpo-webauthn-android-client"

// Configure group ID from environment variables  
val androidGroupId = System.getenv("ANDROID_GROUP_ID") ?: "io.github.hitoshura25"

version = clientVersion

repositories {
    mavenCentral()
}

// Define versions to match generated client
val jakartaAnnotationVersion = "1.3.5"

// OpenAPI generator may include server-side dependencies that cause Android conflicts.
// These exclusions ensure the client library works correctly in Android projects.
configurations.all {
    // Exclude problematic dependencies that cause META-INF conflicts
    exclude(group = "jakarta.ws.rs", module = "jakarta.ws.rs-api")
    exclude(group = "jakarta.annotation", module = "jakarta.annotation-api")
}

dependencies {
    // GENERATED_DEPENDENCIES_PLACEHOLDER

    // Generated code uses @javax.annotation.Generated, so we need javax version
    // Jakarta version is excluded during dependency extraction to prevent conflicts
    implementation("javax.annotation:javax.annotation-api:1.3.2")
}

// Configure Javadoc to recognize OpenAPI generator custom tags
tasks.withType<Javadoc> {
    // Register custom tags used by OpenAPI generator
    (options as StandardJavadocDocletOptions).tags(
        "http.response.details:a:HTTP Response Details:",
        "http.request:a:HTTP Request:",
        "http.response:a:HTTP Response:",
        "http.method:a:HTTP Method:",
        "http.status:a:HTTP Status:",
        "apiNote:a:API Note:",
        "implNote:a:Implementation Note:",
        "since:a:Since:"
    )
    
    // Suppress warnings for missing @param and @return tags in generated code
    (options as StandardJavadocDocletOptions).addStringOption("Xdoclint:none", "-quiet")
}

publishing {
    publications {
        create<MavenPublication>("maven") {
            groupId = androidGroupId
            artifactId = androidArtifactId
            version = clientVersion

            from(components["java"])

            pom {
                name.set("MPO WebAuthn Android Client")
                description.set(
                    "Generated Android client library for MPO WebAuthn API - " +
                        "FIDO2/WebAuthn authentication",
                )
                url.set("https://github.com/hitoshura25/mpo-api-authn-server")

                licenses {
                    license {
                        name.set("MIT License")
                        url.set("https://opensource.org/licenses/MIT")
                    }
                }

                developers {
                    developer {
                        id.set("hitoshura25")
                        name.set("Hitoshura")
                        email.set("hitoshura25@users.noreply.github.com")
                    }
                }

                scm {
                    connection.set("scm:git:git://github.com/hitoshura25/mpo-api-authn-server.git")
                    developerConnection.set(
                        "scm:git:ssh://github.com:hitoshura25/mpo-api-authn-server.git",
                    )
                    url.set("https://github.com/hitoshura25/mpo-api-authn-server")
                }
            }
        }
    }

    repositories {
        // Repository configuration from central publishing config via environment variables
        val repositoryUrl = System.getenv("ANDROID_REPOSITORY_URL")
            ?: throw GradleException("ANDROID_REPOSITORY_URL environment variable is required")

        maven {
            name = "PublishingRepository"
            url = uri(repositoryUrl)
            credentials {
                // Gradle automatically looks for properties named: {repositoryName}Username and {repositoryName}Password
                // For repository name "PublishingRepository", it expects:
                // - PublishingRepositoryUsername  
                // - PublishingRepositoryPassword
                //
                // These properties can be provided via environment variables using the
                // ORG_GRADLE_PROJECT_ prefix pattern for configuration cache compatibility:
                // - ORG_GRADLE_PROJECT_PublishingRepositoryUsername
                // - ORG_GRADLE_PROJECT_PublishingRepositoryPassword
                //
                // Gradle will automatically convert these env vars to project properties.
                // We use explicit environment variable fallback for better error reporting.
                val repoUsername = project.findProperty("PublishingRepositoryUsername") as String?
                    ?: System.getenv("PUBLISHING_REPOSITORY_USERNAME")
                    ?: throw GradleException(
                        "Publishing repository username is required. Set via ORG_GRADLE_PROJECT_PublishingRepositoryUsername environment variable " +
                        "or PUBLISHING_REPOSITORY_USERNAME for direct environment variable access."
                    )
                val repoPassword = project.findProperty("PublishingRepositoryPassword") as String?
                    ?: System.getenv("PUBLISHING_REPOSITORY_PASSWORD")
                    ?: throw GradleException(
                        "Publishing repository password is required. Set via ORG_GRADLE_PROJECT_PublishingRepositoryPassword environment variable " +
                        "or PUBLISHING_REPOSITORY_PASSWORD for direct environment variable access."
                    )
                
                username = repoUsername
                password = repoPassword
                
                // Log repository configuration for debugging (without sensitive credentials)
                logger.lifecycle("üìä Publishing Repository Configuration:")
                logger.lifecycle("  Repository URL: $repositoryUrl")
                logger.lifecycle("  Username: ${repoUsername.take(4)}...")
                logger.lifecycle("  API Type: ${if (repositoryUrl.contains("ossrh-staging-api")) "Portal OSSRH Staging API (Bridge)" else if (repositoryUrl.contains("maven.pkg.github.com")) "GitHub Packages" else "Other Maven Repository"}")
                logger.lifecycle("  Credentials Source: ${if (project.hasProperty("PublishingRepositoryUsername")) "Gradle Properties" else "Environment Variables"}")
            }
        }
    }
}

// Signing configuration for Maven Central (production only)
signing {
    val publishType = System.getenv("PUBLISH_TYPE") ?: "staging"
    val signingKey = System.getenv("SIGNING_KEY")
    val signingPassword = System.getenv("SIGNING_PASSWORD")

    // Log signing configuration for debugging
    logger.lifecycle("üîê GPG Signing Configuration:")
    logger.lifecycle("  Publish Type: $publishType")
    logger.lifecycle("  Signing Key Available: ${if (signingKey != null) "YES" else "NO"}")
    logger.lifecycle("  Signing Password Available: ${if (signingPassword != null) "YES" else "NO"}")
    
    // Only sign for production publishing and if we have the required properties
    if (publishType == "production") {
        if (signingKey != null && signingPassword != null) {
            logger.lifecycle("  üîí GPG signing ENABLED for production publishing")
            logger.lifecycle("  üìù All artifacts will be signed (JAR, sources, javadoc, POM)")
            useInMemoryPgpKeys(signingKey, signingPassword)
            sign(publishing.publications["maven"])
        } else {
            logger.error("‚ùå PRODUCTION PUBLISHING ERROR: GPG signing credentials missing!")
            logger.error("   SIGNING_KEY: ${if (signingKey != null) "provided" else "MISSING"}")
            logger.error("   SIGNING_PASSWORD: ${if (signingPassword != null) "provided" else "MISSING"}")
            throw GradleException(
                "GPG signing is required for production publishing to Maven Central. " +
                "Please ensure SIGNING_KEY and SIGNING_PASSWORD environment variables are set."
            )
        }
    } else {
        logger.lifecycle("  ‚ÑπÔ∏è  GPG signing DISABLED for staging publishing (not required for GitHub Packages)")
    }
}

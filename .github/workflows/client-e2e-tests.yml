name: Run Client E2E Tests (Web + Android)

# Optimized for PR speed validation - targets ~8-12 minute total runtime
# Future optimization: Pre-built Docker images in GHCR for faster service startup

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '18'
    secrets:
      codecov_token:
        description: 'Codecov token for uploading coverage reports'
        required: true
      gradle_encryption_key:
        description: 'Gradle encryption key'
        required: true
      docker_hub_username:
        description: 'DockerHub username'
        required: true
      docker_hub_token:
        description: 'DockerHub token'
        required: true
    outputs:
      test-exit-code:
        description: 'Exit code from the tests'
        value: ${{ jobs.client-e2e-tests.outputs.test-exit-code }}

jobs:
  client-e2e-tests:
    runs-on: ubuntu-latest
    outputs:
      test-exit-code: ${{ steps.run-tests.outputs.test-exit-code }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Branch-specific Gradle caching
      - name: Setup branch-specific Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle/configuration-cache
          key: gradle-${{ runner.os }}-${{ github.ref_name }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-${{ github.ref_name }}-
            gradle-${{ runner.os }}-main-
            gradle-${{ runner.os }}-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-encryption-key: ${{ secrets.gradle_encryption_key }}
          build-scan-publish: true
          build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
          build-scan-terms-of-use-agree: "yes"
          # Disable built-in cache since we're managing it manually
          cache-disabled: true

      - name: Run code quality checks, tests, coverage, and build JARs
        shell: bash
        run: ./gradlew detekt :webauthn-server:koverXmlReport :webauthn-server:shadowJar :webauthn-test-credentials-service:shadowJar --build-cache --parallel --configuration-cache

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: webauthn-server-reports
          path: |
            webauthn-server/build/reports/
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./webauthn-server/build/reports/kover/report.xml
          flags: unit
          name: codecov-unit
          token: ${{ secrets.codecov_token }}
          fail_ci_if_error: true

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: hitoshura25/webauthn-server
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=pr

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'
          cache-dependency-path: test-client/package-lock.json

      - name: Install test dependencies (parallel)
        working-directory: test-client
        run: |
          # Install npm dependencies and Playwright in parallel
          npm ci &
          NPM_PID=$!

          # Download Playwright browser in background
          npx playwright install chromium --only-shell &
          PLAYWRIGHT_PID=$!

          # Wait for both to complete
          wait $NPM_PID
          wait $PLAYWRIGHT_PID

          echo "✅ Dependencies installed in parallel"

      - name: Set up environment and start services
        run: |
          cd webauthn-server
          ./setup-secure-env.sh

          echo "🔨 Building services..."
          DOCKER_BUILDKIT=1 COMPOSE_DOCKER_CLI_BUILD=1 docker compose up -d --build

          echo "⏳ Waiting for services to start..."
          sleep 10

          echo "📊 Service status after initial startup:"
          docker compose ps

          echo "📋 Full logs from all services:"
          docker compose logs

          echo "🔍 Testing dependency services first..."

          # Check if postgres is responding
          if docker compose exec postgres pg_isready -U webauthn_user -d webauthn_db > /dev/null 2>&1; then
            echo "✅ PostgreSQL is ready"
          else
            echo "❌ PostgreSQL not ready"
            echo "PostgreSQL logs:"
            docker compose logs postgres
          fi

          # Check if redis is responding
          if docker compose exec redis redis-cli ping > /dev/null 2>&1; then
            echo "✅ Redis is ready"
          else
            echo "❌ Redis not ready"
            echo "Redis logs:"
            docker compose logs redis
          fi

          # Check if jaeger is responding
          if curl -f --max-time 5 http://localhost:16686/ > /dev/null 2>&1; then
            echo "✅ Jaeger is ready"
          else
            echo "❌ Jaeger not ready"
            echo "Jaeger logs:"
            docker compose logs jaeger
          fi

          echo "🔍 Testing main application services..."

          # Test webauthn-server health endpoint
          if curl -f --max-time 5 http://localhost:8080/health > /dev/null 2>&1; then
            echo "✅ WebAuthn server health check passed"
          else
            echo "❌ WebAuthn server health check failed"
            echo "WebAuthn server logs:"
            docker compose logs webauthn-server
            exit 1
          fi

          # Test webauthn-test-credentials-service health
          if curl -f --max-time 5 http://localhost:8081/health > /dev/null 2>&1; then
            echo "✅ WebAuthn test credentials service responding"
          else
            echo "❌ WebAuthn test credentials service not responding"
            echo "Service logs:"
            docker compose logs webauthn-test-credentials-service
            exit 1
          fi
          cd ..

      - name: Run E2E tests
        id: run-tests
        working-directory: test-client
        run: |
          set +e
          npm test
          TEST_EXIT_CODE=$?
          set -e

          # Store exit code for later use
          echo "test-exit-code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT

          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "❌ Tests failed with exit code $TEST_EXIT_CODE"
            exit $TEST_EXIT_CODE
          else
            echo "✅ Tests passed successfully"
          fi

      - name: Generate Android client
        run: |
          echo "🔨 Generating Android client..."
          ./gradlew :webauthn-server:copyGeneratedClientToLibrary --info

          # Verify client generation
          if [ -f "android-test-client/client-library/src/main/java/com/vmenon/mpo/api/authn/client/api/RegistrationApi.java" ]; then
            echo "✅ Android client generated successfully"
          else
            echo "❌ Android client generation failed"
            exit 1
          fi

      - name: Enable KVM for hardware acceleration
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          ls -la /dev/kvm

      - name: Run Android UI tests with emulator (optimized)
        id: android-tests
        timeout-minutes: 8
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: default
          arch: x86_64
          profile: Nexus 6
          cores: 2
          ram-size: 2048M
          heap-size: 256M
          disk-size: 2048M
          disable-animations: true
          disable-spellchecker: true
          disable-linux-hw-accel: false
          force-avd-creation: false
          emulator-options: -no-window -no-snapshot-save -no-snapshot-load -no-boot-anim -netfast -gpu auto -wipe-data -no-metrics -accel on
          script: ./scripts/run-android-tests.sh

      - name: Stop full stack
        id: stop-full-stack
        if: always()
        run: |
          echo "Capturing Docker Compose logs..."
          cd webauthn-server
          docker compose logs > ../docker-compose-logs.txt 2>&1
          echo "Stopping Docker Compose services..."
          docker compose down -v
          echo "✅ Docker Compose services stopped"

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            test-client/playwright-report/
            test-client/test-results/
            android-test-client/app/build/reports/androidTests/connected/
            android-test-client/app/build/outputs/androidTest-results/connected/
          retention-days: 3

      - name: Upload Docker Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-logs
          path: docker-compose-logs.txt
          retention-days: 3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.docker_hub_username }}
          password: ${{ secrets.docker_hub_token }}

      - name: Build and push
        uses: docker/build-push-action@v6
        if: github.event_name != 'pull_request'
        with:
          context: ./webauthn-server
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Update repo description
        uses: peter-evans/dockerhub-description@v4
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.docker_hub_username }}
          password: ${{ secrets.docker_hub_token }}
          repository: hitoshura25/webauthn-server
          short-description: ${{ github.event.repository.description }}

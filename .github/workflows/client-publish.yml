# Client Library Publishing Orchestrator - Simplified Parallel Architecture
#
# This orchestrator workflow coordinates independent TypeScript and Android client
# generation and publishing workflows for maximum parallelization and platform
# team ownership.
#
# SIMPLIFIED DESIGN PATTERN:
# - Each platform workflow is completely self-contained (generation + publishing)
# - No artifact sharing - each platform handles its own OpenAPI client generation
# - True parallel execution with independent failure isolation
# - Platform teams can own and maintain their specific workflows
#
# PERFORMANCE BENEFITS:
# - 50%+ faster than sequential execution
# - Independent platform failures don't block each other
# - No artifact upload/download overhead
# - True parallelism from start to finish
#
# INPUTS:
#   publish-type: 'staging' or 'production'
#   client-version: Version for client libraries (e.g., 'pr-123.456' or '1.0.32')
#   workflow-identifier: Workflow identifier (required for staging, ignored for production)
#   npm-scope: NPM package scope
#
# OUTPUTS:
#   typescript-package-name: Full TypeScript package name published
#   android-package-name: Full Android Maven coordinates published
#   staging-published: Whether staging packages were published
#   production-published: Whether production packages were published
#   typescript-published: Whether TypeScript package was published
#   typescript-skipped: Whether TypeScript publishing was skipped
#   android-published: Whether Android package was published
#   android-skipped: Whether Android publishing was skipped

name: Client Library Publishing Orchestrator

on:
  workflow_call:
    inputs:
      publish-type:
        description: 'Publishing type (staging/production)'
        required: true
        type: string
        default: 'staging'
      client-version:
        description: 'Version for client libraries'
        required: true
        type: string
      workflow-identifier:
        description: 'Workflow identifier (for staging only)'
        required: false
        type: string
      npm-scope:
        description: 'NPM package scope (optional - will use central config if not provided)'
        required: false
        type: string
    outputs:
      # Backward-compatible outputs for existing calling workflows
      typescript-package-name:
        description: 'TypeScript package name published'
        value: ${{ jobs.aggregate-results.outputs.typescript-package-name }}
      android-package-name:
        description: 'Android Maven coordinates published'
        value: ${{ jobs.aggregate-results.outputs.android-package-name }}
      staging-published:
        description: 'Whether staging packages were published'
        value: ${{ jobs.aggregate-results.outputs.staging-published }}
      production-published:
        description: 'Whether production packages were published'
        value: ${{ jobs.aggregate-results.outputs.production-published }}
      # New granular outputs for advanced monitoring
      typescript-published:
        description: 'Whether TypeScript package was actually published (not skipped)'
        value: ${{ jobs.aggregate-results.outputs.typescript-published }}
      typescript-skipped:
        description: 'Whether TypeScript package publishing was skipped (version exists)'
        value: ${{ jobs.aggregate-results.outputs.typescript-skipped }}
      android-published:
        description: 'Whether Android package was actually published (not skipped)'
        value: ${{ jobs.aggregate-results.outputs.android-published }}
      android-skipped:
        description: 'Whether Android package publishing was skipped (version exists)'
        value: ${{ jobs.aggregate-results.outputs.android-skipped }}

env:
  # Central configuration file path
  PUBLISHING_CONFIG_FILE: "config/publishing-config.yml"

jobs:
  # Job 1: Input validation and shared configuration
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      validated: ${{ steps.validation.outputs.validated }}
    steps:
      - name: Validate workflow inputs
        id: validation
        run: |
          echo "üîç Validating workflow inputs..."
          echo "  Publish type: ${{ inputs.publish-type }}"
          echo "  Client version: ${{ inputs.client-version }}"
          echo "  Workflow identifier: ${{ inputs.workflow-identifier }}"
          echo "  NPM scope: ${{ inputs.npm-scope }}"

          if [[ "${{ inputs.publish-type }}" != "staging" && "${{ inputs.publish-type }}" != "production" ]]; then
            echo "‚ùå Invalid publish-type: ${{ inputs.publish-type }}"
            echo "   Must be 'staging' or 'production'"
            exit 1
          fi

          # For staging publishes, workflow-identifier is required but can be fallback values for main branch
          if [[ "${{ inputs.publish-type }}" == "staging" && -z "${{ inputs.workflow-identifier }}" ]]; then
            echo "‚ùå Workflow identifier is required for staging publishes (can be fallback value like 'main')"
            exit 1
          fi

          # Accept fallback workflow-identifier values for main branch staging publishes
          # Main branch pushes use staging publishes with fallback workflow-identifier values like 'main' or run number
          if [[ "${{ inputs.publish-type }}" == "staging" ]]; then
            echo "‚úÖ Staging publish with workflow-identifier: ${{ inputs.workflow-identifier }}"
            if [[ "${{ inputs.workflow-identifier }}" == "main" ]]; then
              echo "   (Main branch staging publish - will use run number for unique versioning)"
            elif [[ "${{ inputs.workflow-identifier }}" =~ ^[0-9]+$ ]]; then
              echo "   (PR staging publish)"
            else
              echo "   (Custom staging publish identifier)"
            fi
          fi

          echo "‚úÖ Input validation passed"
          echo "validated=true" >> $GITHUB_OUTPUT

  # Job 2: Load central configuration and create job outputs (required for callable workflows)
  setup-config:
    runs-on: ubuntu-latest
    outputs:
      # Package configuration outputs
      npm-scope: ${{ steps.config.outputs.npm-scope }}
      npm-package-name: ${{ steps.config.outputs.npm-package-name }}
      android-group-id: ${{ steps.config.outputs.android-group-id }}
      android-artifact-base-id: ${{ steps.config.outputs.android-artifact-base-id }}
      # TypeScript repository configuration outputs
      npm-staging-registry-url: ${{ steps.config.outputs.npm-staging-registry-url }}
      npm-staging-credential-env: ${{ steps.config.outputs.npm-staging-credential-env }}
      npm-production-registry-url: ${{ steps.config.outputs.npm-production-registry-url }}
      npm-production-credential-env: ${{ steps.config.outputs.npm-production-credential-env }}
      # TypeScript package suffix configuration
      npm-staging-suffix: ${{ steps.config.outputs.npm-staging-suffix }}
      npm-production-suffix: ${{ steps.config.outputs.npm-production-suffix }}
      # Repository configuration outputs for Android
      android-staging-repository-url: ${{ steps.config.outputs.android-staging-repository-url }}
      android-staging-username-env: ${{ steps.config.outputs.android-staging-username-env }}
      android-staging-password-env: ${{ steps.config.outputs.android-staging-password-env }}
      android-staging-username-property: ${{ steps.config.outputs.android-staging-username-property }}
      android-staging-password-property: ${{ steps.config.outputs.android-staging-password-property }}
      android-production-repository-url: ${{ steps.config.outputs.android-production-repository-url }}
      android-production-username-env: ${{ steps.config.outputs.android-production-username-env }}
      android-production-password-env: ${{ steps.config.outputs.android-production-password-env }}
      android-production-username-property: ${{ steps.config.outputs.android-production-username-property }}
      android-production-password-property: ${{ steps.config.outputs.android-production-password-property }}
      # Package suffix configuration
      android-staging-suffix: ${{ steps.config.outputs.android-staging-suffix }}
      android-production-suffix: ${{ steps.config.outputs.android-production-suffix }}
    steps:
      - name: Checkout code for configuration
        uses: actions/checkout@v4

      - name: Load central configuration
        id: config
        run: |
          echo "üîß Loading central configuration from ${{ env.PUBLISHING_CONFIG_FILE }}..."
          
          # Validate configuration file exists
          if [[ ! -f "${{ env.PUBLISHING_CONFIG_FILE }}" ]]; then
            echo "‚ùå Configuration file not found: ${{ env.PUBLISHING_CONFIG_FILE }}"
            exit 1
          fi

          # Install yq for YAML parsing
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

          # Load package configuration (with input override support)
          NPM_SCOPE_FROM_CONFIG=$(yq '.packages.typescript.scope' ${{ env.PUBLISHING_CONFIG_FILE }})
          NPM_BASE_NAME=$(yq '.packages.typescript.basePackageName' ${{ env.PUBLISHING_CONFIG_FILE }})
          
          # Use input npm-scope if provided, otherwise use central config value
          if [[ -n "${{ inputs.npm-scope }}" ]]; then
            NPM_SCOPE="${{ inputs.npm-scope }}"
            echo "‚ÑπÔ∏è Using npm-scope from workflow input: ${NPM_SCOPE}"
          else
            NPM_SCOPE="${NPM_SCOPE_FROM_CONFIG}"
            echo "‚ÑπÔ∏è Using npm-scope from central config: ${NPM_SCOPE}"
          fi
          ANDROID_GROUP_ID=$(yq '.packages.android.groupId' ${{ env.PUBLISHING_CONFIG_FILE }})
          ANDROID_ARTIFACT_BASE_ID=$(yq '.packages.android.baseArtifactId' ${{ env.PUBLISHING_CONFIG_FILE }})

          # Load repository configuration for npm/TypeScript
          NPM_STAGING_REGISTRY_URL=$(yq '.repositories.staging.npm.registry' ${{ env.PUBLISHING_CONFIG_FILE }})
          NPM_STAGING_CREDENTIAL_ENV=$(yq '.repositories.staging.npm.credentials.tokenEnv' ${{ env.PUBLISHING_CONFIG_FILE }})
          NPM_PRODUCTION_REGISTRY_URL=$(yq '.repositories.production.npm.registry' ${{ env.PUBLISHING_CONFIG_FILE }})
          NPM_PRODUCTION_CREDENTIAL_ENV=$(yq '.repositories.production.npm.credentials.tokenEnv' ${{ env.PUBLISHING_CONFIG_FILE }})

          # Load repository configuration for Android staging
          ANDROID_STAGING_REPO_URL=$(yq '.repositories.staging.android.url' ${{ env.PUBLISHING_CONFIG_FILE }})
          ANDROID_STAGING_USERNAME_ENV=$(yq '.repositories.staging.android.credentials.usernameEnv' ${{ env.PUBLISHING_CONFIG_FILE }})
          ANDROID_STAGING_PASSWORD_ENV=$(yq '.repositories.staging.android.credentials.passwordEnv' ${{ env.PUBLISHING_CONFIG_FILE }})
          ANDROID_STAGING_USERNAME_PROPERTY=$(yq '.repositories.staging.android.credentials.usernameProperty' ${{ env.PUBLISHING_CONFIG_FILE }})
          ANDROID_STAGING_PASSWORD_PROPERTY=$(yq '.repositories.staging.android.credentials.passwordProperty' ${{ env.PUBLISHING_CONFIG_FILE }})

          # Load repository configuration for Android production
          ANDROID_PRODUCTION_REPO_URL=$(yq '.repositories.production.android.url' ${{ env.PUBLISHING_CONFIG_FILE }})
          ANDROID_PRODUCTION_USERNAME_ENV=$(yq '.repositories.production.android.credentials.usernameEnv' ${{ env.PUBLISHING_CONFIG_FILE }})
          ANDROID_PRODUCTION_PASSWORD_ENV=$(yq '.repositories.production.android.credentials.passwordEnv' ${{ env.PUBLISHING_CONFIG_FILE }})
          ANDROID_PRODUCTION_USERNAME_PROPERTY=$(yq '.repositories.production.android.credentials.usernameProperty' ${{ env.PUBLISHING_CONFIG_FILE }})
          ANDROID_PRODUCTION_PASSWORD_PROPERTY=$(yq '.repositories.production.android.credentials.passwordProperty' ${{ env.PUBLISHING_CONFIG_FILE }})

          # Load package suffix configuration
          NPM_STAGING_SUFFIX=$(yq '.naming.staging.npmSuffix' ${{ env.PUBLISHING_CONFIG_FILE }})
          NPM_PRODUCTION_SUFFIX=$(yq '.naming.production.npmSuffix' ${{ env.PUBLISHING_CONFIG_FILE }})
          ANDROID_STAGING_SUFFIX=$(yq '.naming.staging.androidSuffix' ${{ env.PUBLISHING_CONFIG_FILE }})
          ANDROID_PRODUCTION_SUFFIX=$(yq '.naming.production.androidSuffix' ${{ env.PUBLISHING_CONFIG_FILE }})

          # Validate all required values are present
          if [[ -z "$NPM_SCOPE" || "$NPM_BASE_NAME" == "null" || "$ANDROID_GROUP_ID" == "null" || "$ANDROID_ARTIFACT_BASE_ID" == "null" ]]; then
            echo "‚ùå Missing required package configuration:"
            echo "  NPM_SCOPE: '${NPM_SCOPE}'"
            echo "  NPM_BASE_NAME: '${NPM_BASE_NAME}'"
            echo "  ANDROID_GROUP_ID: '${ANDROID_GROUP_ID}'"
            echo "  ANDROID_ARTIFACT_BASE_ID: '${ANDROID_ARTIFACT_BASE_ID}'"
            exit 1
          fi

          if [[ "$NPM_STAGING_REGISTRY_URL" == "null" || "$NPM_PRODUCTION_REGISTRY_URL" == "null" || "$ANDROID_STAGING_REPO_URL" == "null" || "$ANDROID_PRODUCTION_REPO_URL" == "null" ]]; then
            echo "‚ùå Missing required repository configuration in ${{ env.PUBLISHING_CONFIG_FILE }}"
            exit 1
          fi

          # Set outputs for package configuration (backward compatibility)
          echo "npm-scope=${NPM_SCOPE}" >> $GITHUB_OUTPUT
          echo "npm-package-name=${NPM_BASE_NAME}" >> $GITHUB_OUTPUT
          echo "android-group-id=${ANDROID_GROUP_ID}" >> $GITHUB_OUTPUT
          echo "android-artifact-base-id=${ANDROID_ARTIFACT_BASE_ID}" >> $GITHUB_OUTPUT

          # Set outputs for TypeScript repository configuration
          echo "npm-staging-registry-url=${NPM_STAGING_REGISTRY_URL}" >> $GITHUB_OUTPUT
          echo "npm-staging-credential-env=${NPM_STAGING_CREDENTIAL_ENV}" >> $GITHUB_OUTPUT
          echo "npm-production-registry-url=${NPM_PRODUCTION_REGISTRY_URL}" >> $GITHUB_OUTPUT
          echo "npm-production-credential-env=${NPM_PRODUCTION_CREDENTIAL_ENV}" >> $GITHUB_OUTPUT

          # Set outputs for Android repository configuration
          echo "android-staging-repository-url=${ANDROID_STAGING_REPO_URL}" >> $GITHUB_OUTPUT
          echo "android-staging-username-env=${ANDROID_STAGING_USERNAME_ENV}" >> $GITHUB_OUTPUT
          echo "android-staging-password-env=${ANDROID_STAGING_PASSWORD_ENV}" >> $GITHUB_OUTPUT
          echo "android-staging-username-property=${ANDROID_STAGING_USERNAME_PROPERTY}" >> $GITHUB_OUTPUT
          echo "android-staging-password-property=${ANDROID_STAGING_PASSWORD_PROPERTY}" >> $GITHUB_OUTPUT
          
          echo "android-production-repository-url=${ANDROID_PRODUCTION_REPO_URL}" >> $GITHUB_OUTPUT
          echo "android-production-username-env=${ANDROID_PRODUCTION_USERNAME_ENV}" >> $GITHUB_OUTPUT
          echo "android-production-password-env=${ANDROID_PRODUCTION_PASSWORD_ENV}" >> $GITHUB_OUTPUT
          echo "android-production-username-property=${ANDROID_PRODUCTION_USERNAME_PROPERTY}" >> $GITHUB_OUTPUT
          echo "android-production-password-property=${ANDROID_PRODUCTION_PASSWORD_PROPERTY}" >> $GITHUB_OUTPUT

          # Set outputs for package suffix configuration
          echo "npm-staging-suffix=${NPM_STAGING_SUFFIX}" >> $GITHUB_OUTPUT
          echo "npm-production-suffix=${NPM_PRODUCTION_SUFFIX}" >> $GITHUB_OUTPUT
          echo "android-staging-suffix=${ANDROID_STAGING_SUFFIX}" >> $GITHUB_OUTPUT
          echo "android-production-suffix=${ANDROID_PRODUCTION_SUFFIX}" >> $GITHUB_OUTPUT

          echo "‚úÖ Central configuration loaded successfully:"
          echo "  NPM package: ${NPM_SCOPE}/${NPM_BASE_NAME} $([ -n "${{ inputs.npm-scope }}" ] && echo "(scope from input)" || echo "(scope from config)")"
          echo "  NPM staging registry: ${NPM_STAGING_REGISTRY_URL}"
          echo "  NPM production registry: ${NPM_PRODUCTION_REGISTRY_URL}"
          echo "  NPM staging suffix: '${NPM_STAGING_SUFFIX}'"
          echo "  NPM production suffix: '${NPM_PRODUCTION_SUFFIX}'"
          echo "  Android package: ${ANDROID_GROUP_ID}:${ANDROID_ARTIFACT_BASE_ID}"
          echo "  Android staging repository: ${ANDROID_STAGING_REPO_URL}"
          echo "  Android production repository: ${ANDROID_PRODUCTION_REPO_URL}"
          echo "  Android staging suffix: '${ANDROID_STAGING_SUFFIX}'"
          echo "  Android production suffix: '${ANDROID_PRODUCTION_SUFFIX}'"

  # Job 3: TypeScript client generation and publishing (parallel)
  publish-typescript:
    uses: ./.github/workflows/publish-typescript.yml
    needs: [ validate-inputs, setup-config ]
    if: needs.validate-inputs.outputs.validated == 'true'
    permissions:
      contents: read
      packages: write    # Required for GitHub Packages publishing
      id-token: write   # Required for npm provenance in production
    with:
      publish-type: ${{ inputs.publish-type }}
      client-version: ${{ inputs.client-version }}
      npm-scope: ${{ needs.setup-config.outputs.npm-scope }}
      npm-package-name: ${{ needs.setup-config.outputs.npm-package-name }}
      npm-staging-registry-url: ${{ needs.setup-config.outputs.npm-staging-registry-url }}
      npm-staging-credential-env: ${{ needs.setup-config.outputs.npm-staging-credential-env }}
      npm-production-registry-url: ${{ needs.setup-config.outputs.npm-production-registry-url }}
      npm-production-credential-env: ${{ needs.setup-config.outputs.npm-production-credential-env }}
      npm-staging-suffix: ${{ needs.setup-config.outputs.npm-staging-suffix }}
      npm-production-suffix: ${{ needs.setup-config.outputs.npm-production-suffix }}
      android-group-id: ${{ needs.setup-config.outputs.android-group-id }}  # Needed for Gradle generation
    secrets:
      GRADLE_ENCRYPTION_KEY: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Job 4: Android client generation and publishing (parallel)
  publish-android:
    uses: ./.github/workflows/publish-android.yml
    needs: [ validate-inputs, setup-config ]
    if: needs.validate-inputs.outputs.validated == 'true'
    permissions:
      contents: read
      packages: write   # Required for GitHub Packages publishing
    with:
      publish-type: ${{ inputs.publish-type }}
      client-version: ${{ inputs.client-version }}
      android-group-id: ${{ needs.setup-config.outputs.android-group-id }}
      android-artifact-base-id: ${{ needs.setup-config.outputs.android-artifact-base-id }}
      # Repository configuration from central config
      android-staging-repository-url: ${{ needs.setup-config.outputs.android-staging-repository-url }}
      android-staging-username-env: ${{ needs.setup-config.outputs.android-staging-username-env }}
      android-staging-password-env: ${{ needs.setup-config.outputs.android-staging-password-env }}
      android-staging-username-property: ${{ needs.setup-config.outputs.android-staging-username-property }}
      android-staging-password-property: ${{ needs.setup-config.outputs.android-staging-password-property }}
      android-production-repository-url: ${{ needs.setup-config.outputs.android-production-repository-url }}
      android-production-username-env: ${{ needs.setup-config.outputs.android-production-username-env }}
      android-production-password-env: ${{ needs.setup-config.outputs.android-production-password-env }}
      android-production-username-property: ${{ needs.setup-config.outputs.android-production-username-property }}
      android-production-password-property: ${{ needs.setup-config.outputs.android-production-password-property }}
      android-staging-suffix: ${{ needs.setup-config.outputs.android-staging-suffix }}
      android-production-suffix: ${{ needs.setup-config.outputs.android-production-suffix }}
    secrets:
      GRADLE_ENCRYPTION_KEY: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
      CENTRAL_PORTAL_USERNAME: ${{ secrets.CENTRAL_PORTAL_USERNAME }}
      CENTRAL_PORTAL_PASSWORD: ${{ secrets.CENTRAL_PORTAL_PASSWORD }}
      SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
      SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}

  # Job 5: Aggregate results and provide backward-compatible outputs
  aggregate-results:
    needs: [ validate-inputs, setup-config, publish-typescript, publish-android ]
    runs-on: ubuntu-latest
    # Always run to provide outputs, even if publishing jobs failed
    if: always() && needs.validate-inputs.outputs.validated == 'true'
    outputs:
      # Backward-compatible outputs for existing calling workflows
      typescript-package-name: ${{ needs.publish-typescript.outputs.package-name }}
      android-package-name: ${{ needs.publish-android.outputs.package-name }}
      staging-published: ${{ steps.aggregate-status.outputs.staging-published }}
      production-published: ${{ steps.aggregate-status.outputs.production-published }}
      # New granular outputs for advanced usage
      typescript-published: ${{ needs.publish-typescript.outputs.published }}
      typescript-skipped: ${{ needs.publish-typescript.outputs.skipped }}
      android-published: ${{ needs.publish-android.outputs.published }}
      android-skipped: ${{ needs.publish-android.outputs.skipped }}
    steps:
      - name: Aggregate publishing status
        id: aggregate-status
        run: |
          echo "üìä Aggregating publishing results..."
          echo "  TypeScript result: ${{ needs.publish-typescript.result }}"
          echo "  TypeScript published: ${{ needs.publish-typescript.outputs.published }}"
          echo "  TypeScript skipped: ${{ needs.publish-typescript.outputs.skipped }}"
          echo "  Android result: ${{ needs.publish-android.result }}"
          echo "  Android published: ${{ needs.publish-android.outputs.published }}"
          echo "  Android skipped: ${{ needs.publish-android.outputs.skipped }}"

          # Determine overall staging/production status for backward compatibility
          if [[ "${{ inputs.publish-type }}" == "staging" ]]; then
            # For staging, consider published if either platform was published (not skipped)
            # Handle job failures gracefully
            TS_PUBLISHED="false"
            ANDROID_PUBLISHED="false"

            if [[ "${{ needs.publish-typescript.result }}" == "success" && "${{ needs.publish-typescript.outputs.published }}" == "true" ]]; then
              TS_PUBLISHED="true"
            fi

            if [[ "${{ needs.publish-android.result }}" == "success" && "${{ needs.publish-android.outputs.published }}" == "true" ]]; then
              ANDROID_PUBLISHED="true"
            fi

            if [[ "${TS_PUBLISHED}" == "true" || "${ANDROID_PUBLISHED}" == "true" ]]; then
              echo "staging-published=true" >> $GITHUB_OUTPUT
            else
              echo "staging-published=false" >> $GITHUB_OUTPUT
            fi
            echo "production-published=false" >> $GITHUB_OUTPUT
          else
            echo "staging-published=false" >> $GITHUB_OUTPUT
            # For production, consider published if both platforms succeeded
            if [[ "${{ needs.publish-typescript.result }}" == "success" && "${{ needs.publish-android.result }}" == "success" ]]; then
              echo "production-published=true" >> $GITHUB_OUTPUT
            else
              echo "production-published=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Publishing summary
        run: |
          echo "üéØ Client Library Publishing Summary (Simplified Parallel Architecture):"
          echo "  Publish type: ${{ inputs.publish-type }}"
          echo ""
          echo "  üì¶ TypeScript Results:"
          echo "    Package: ${{ needs.publish-typescript.outputs.package-name }}"
          echo "    Status: ${{ needs.publish-typescript.result }}"
          echo "    Published: ${{ needs.publish-typescript.outputs.published }}"
          echo "    Skipped: ${{ needs.publish-typescript.outputs.skipped }}"
          echo ""
          echo "  üì± Android Results:"
          echo "    Package: ${{ needs.publish-android.outputs.package-name }}"
          echo "    Status: ${{ needs.publish-android.result }}"
          echo "    Published: ${{ needs.publish-android.outputs.published }}"
          echo "    Skipped: ${{ needs.publish-android.outputs.skipped }}"
          echo ""
          echo "  üéØ Overall Results:"
          echo "    Staging published: ${{ steps.aggregate-status.outputs.staging-published }}"
          echo "    Production published: ${{ steps.aggregate-status.outputs.production-published }}"
          echo ""
          echo "  ‚ö° Performance: True parallel execution - no artifact sharing overhead"

{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "name": "mpo-webauthn-server",
  "version": "1.0.0",
  "description": "WebAuthn authentication server built with Ktor and Yubico java-webauthn-server library for FIDO2/WebAuthn implementation",
  "repository": "https://github.com/hitoshura25/mpo-api-authn-server",
  "documentation": "https://github.com/hitoshura25/mpo-api-authn-server",
  "docker": {
    "image": {
      "name": "hitoshura25/webauthn-server",
      "registry": "docker.io",
      "tags": {
        "latest": "Most recent stable release",
        "staging": "CI staging builds (not for production use)"
      },
      "note": "GHCR images (ghcr.io) are for CI testing only - always use Docker Hub for production"
    },
    "ports": {
      "8080": {
        "description": "HTTP API endpoint",
        "protocol": "http",
        "endpoints": {
          "/health": "Health check endpoint",
          "/swagger": "OpenAPI documentation",
          "/register/start": "WebAuthn registration initiation",
          "/register/finish": "WebAuthn registration completion",
          "/authenticate/start": "WebAuthn authentication initiation",
          "/authenticate/finish": "WebAuthn authentication completion"
        }
      }
    },
    "environment": {
      "database": {
        "MPO_AUTHN_DB_HOST": {
          "description": "PostgreSQL server hostname",
          "required": true,
          "default": "postgres",
          "example": "postgres"
        },
        "MPO_AUTHN_DB_PORT": {
          "description": "PostgreSQL server port",
          "required": true,
          "default": "5432",
          "example": "5432"
        },
        "MPO_AUTHN_DB_NAME": {
          "description": "PostgreSQL database name",
          "required": true,
          "default": "webauthn_db",
          "example": "webauthn_db"
        },
        "MPO_AUTHN_DB_USERNAME": {
          "description": "PostgreSQL username",
          "required": true,
          "default": "webauthn_user",
          "example": "webauthn_user"
        },
        "MPO_AUTHN_DB_PASSWORD": {
          "description": "PostgreSQL password (use secure random value)",
          "required": true,
          "sensitive": true,
          "example": "changeme_secure_password"
        }
      },
      "redis": {
        "MPO_AUTHN_REDIS_HOST": {
          "description": "Redis server hostname",
          "required": true,
          "default": "redis",
          "example": "redis"
        },
        "MPO_AUTHN_REDIS_PORT": {
          "description": "Redis server port",
          "required": true,
          "default": "6379",
          "example": "6379"
        },
        "MPO_AUTHN_REDIS_PASSWORD": {
          "description": "Redis password (use secure random value)",
          "required": true,
          "sensitive": true,
          "example": "changeme_secure_password"
        }
      },
      "application": {
        "MPO_AUTHN_APP_RELYING_PARTY_ID": {
          "description": "WebAuthn Relying Party ID (must match your domain)",
          "required": true,
          "default": "localhost",
          "example": "example.com",
          "validation": "Must be a valid domain name or 'localhost' for development"
        },
        "MPO_AUTHN_APP_RELYING_PARTY_NAME": {
          "description": "WebAuthn Relying Party display name",
          "required": true,
          "default": "MPO Api Authn",
          "example": "My Application"
        }
      },
      "observability": {
        "MPO_AUTHN_OPEN_TELEMETRY_SERVICE_NAME": {
          "description": "OpenTelemetry service name for tracing",
          "required": false,
          "default": "webauthn-server",
          "example": "webauthn-server"
        },
        "MPO_AUTHN_OPEN_TELEMETRY_JAEGER_ENDPOINT": {
          "description": "Jaeger OTLP endpoint for traces (gRPC)",
          "required": false,
          "default": "http://jaeger:4317",
          "example": "http://jaeger:4317"
        }
      }
    },
    "dependencies": {
      "postgres": {
        "description": "PostgreSQL database for credential storage",
        "image": "postgres:15-alpine",
        "required": true,
        "ports": {
          "5432": "PostgreSQL server"
        },
        "environment": {
          "POSTGRES_DB": {
            "description": "Database name (should match MPO_AUTHN_DB_NAME)",
            "example": "webauthn_db"
          },
          "POSTGRES_USER": {
            "description": "Database user (should match MPO_AUTHN_DB_USERNAME)",
            "example": "webauthn_user"
          },
          "POSTGRES_PASSWORD": {
            "description": "Database password (should match MPO_AUTHN_DB_PASSWORD)",
            "sensitive": true,
            "example": "changeme_secure_password"
          }
        },
        "volumes": {
          "postgres_data": "/var/lib/postgresql/data"
        },
        "healthcheck": {
          "test": "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
          "interval": "10s",
          "timeout": "5s",
          "retries": 5
        }
      },
      "redis": {
        "description": "Redis for session storage",
        "image": "redis:7-alpine",
        "required": true,
        "ports": {
          "6379": "Redis server"
        },
        "command": "redis-server --requirepass ${MPO_AUTHN_REDIS_PASSWORD}",
        "volumes": {
          "redis_data": "/data"
        },
        "healthcheck": {
          "test": "redis-cli --raw ping",
          "interval": "10s",
          "timeout": "3s",
          "retries": 5
        }
      },
      "jaeger": {
        "description": "Jaeger for distributed tracing (optional)",
        "image": "jaegertracing/all-in-one:1.53",
        "required": false,
        "ports": {
          "16686": "Jaeger UI",
          "4317": "OTLP gRPC endpoint",
          "14268": "HTTP endpoint for spans",
          "9411": "Zipkin compatible endpoint"
        },
        "environment": {
          "COLLECTOR_OTLP_ENABLED": "true"
        },
        "healthcheck": {
          "test": "wget --no-verbose --tries=1 --spider http://localhost:16686/",
          "interval": "10s",
          "timeout": "3s",
          "retries": 5
        }
      }
    },
    "volumes": {
      "postgres_data": {
        "description": "PostgreSQL data persistence"
      },
      "redis_data": {
        "description": "Redis data persistence"
      }
    },
    "deployment": {
      "depends_on": {
        "postgres": {
          "condition": "service_healthy"
        },
        "redis": {
          "condition": "service_healthy"
        }
      },
      "restart": "unless-stopped",
      "healthcheck": {
        "note": "Distroless image - use external health check",
        "endpoint": "http://localhost:8080/health",
        "method": "GET"
      }
    }
  },
  "quickstart": {
    "docker-compose": "https://raw.githubusercontent.com/hitoshura25/mpo-api-authn-server/main/webauthn-server/docker-compose.yml",
    "minimal-example": {
      "description": "Minimal docker-compose.yml for external project integration",
      "yaml": "version: '3.8'\nservices:\n  postgres:\n    image: postgres:15-alpine\n    environment:\n      POSTGRES_DB: webauthn_db\n      POSTGRES_USER: webauthn_user\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U webauthn_user -d webauthn_db\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  redis:\n    image: redis:7-alpine\n    command: redis-server --requirepass ${REDIS_PASSWORD}\n    volumes:\n      - redis_data:/data\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"--raw\", \"ping\"]\n      interval: 10s\n      timeout: 3s\n      retries: 5\n\n  webauthn-server:\n    image: hitoshura25/webauthn-server:latest\n    ports:\n      - \"8080:8080\"\n    environment:\n      - MPO_AUTHN_DB_HOST=postgres\n      - MPO_AUTHN_DB_PORT=5432\n      - MPO_AUTHN_DB_NAME=webauthn_db\n      - MPO_AUTHN_DB_USERNAME=webauthn_user\n      - MPO_AUTHN_DB_PASSWORD=${POSTGRES_PASSWORD}\n      - MPO_AUTHN_REDIS_HOST=redis\n      - MPO_AUTHN_REDIS_PORT=6379\n      - MPO_AUTHN_REDIS_PASSWORD=${REDIS_PASSWORD}\n      - MPO_AUTHN_APP_RELYING_PARTY_ID=localhost\n      - MPO_AUTHN_APP_RELYING_PARTY_NAME=My Application\n    depends_on:\n      postgres:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n  redis_data:\n"
    },
    "environment-setup": {
      "description": "Required environment variables (create .env file)",
      "example": "POSTGRES_PASSWORD=your_secure_password_here\nREDIS_PASSWORD=your_secure_password_here\n"
    }
  },
  "security": {
    "features": [
      "Username enumeration protection (CVE-2024-39912)",
      "PoisonSeed attack prevention",
      "Replay attack protection",
      "Credential tampering validation",
      "FIDO2/WebAuthn standard compliance"
    ],
    "credentials": {
      "storage": "PostgreSQL with encrypted credential data",
      "sessions": "Redis with secure session management"
    }
  },
  "api": {
    "openapi": "https://raw.githubusercontent.com/hitoshura25/mpo-api-authn-server/main/webauthn-server/openapi/webauthn-api.yaml",
    "swagger-ui": "http://localhost:8080/swagger"
  },
  "client_libraries": {
    "typescript_npm": {
      "package": "@vmenon25/mpo-webauthn-client",
      "description": "Type-safe TypeScript client library for browser-based WebAuthn integration",
      "installation": "npm install @vmenon25/mpo-webauthn-client @simplewebauthn/browser",
      "documentation": {
        "complete_guide": "https://github.com/hitoshura25/mpo-api-authn-server/blob/main/docs/setup/library-usage.md#typescript-npm-library-usage",
        "working_example": "https://github.com/hitoshura25/mpo-api-authn-server/tree/main/web-test-client",
        "source_code": "https://github.com/hitoshura25/mpo-api-authn-server/blob/main/web-test-client/src/webauthn-client.ts"
      },
      "critical_integration_patterns": {
        "json_parsing": {
          "description": "CRITICAL: Server responses contain JSON strings that must be parsed before passing to SimpleWebAuthn",
          "example": "const publicKeyOptions = JSON.parse(startResponse.publicKeyCredentialCreationOptions).publicKey;"
        },
        "simplewebauthn_integration": {
          "description": "Use SimpleWebAuthn browser library for actual WebAuthn API calls",
          "dependencies": ["@simplewebauthn/browser"],
          "example": "const credential = await startRegistration(publicKeyOptions);"
        },
        "credential_serialization": {
          "description": "CRITICAL: Credentials must be stringified before sending to server",
          "example": "completeRequest.credential = JSON.stringify(credential);"
        }
      },
      "quick_start": {
        "registration_flow": "import { RegistrationApi, Configuration } from '@vmenon25/mpo-webauthn-client';\nimport { startRegistration } from '@simplewebauthn/browser';\n\nconst config = new Configuration({ basePath: 'http://localhost:8080' });\nconst api = new RegistrationApi(config);\n\n// 1. Start registration\nconst startResponse = await api.startRegistration({ registrationRequest: { username: 'user@example.com' } });\n\n// 2. Parse for SimpleWebAuthn (CRITICAL)\nconst publicKeyOptions = JSON.parse(startResponse.publicKeyCredentialCreationOptions).publicKey;\n\n// 3. Get credential from browser\nconst credential = await startRegistration(publicKeyOptions);\n\n// 4. Complete registration (CRITICAL: stringify credential)\nawait api.completeRegistration({\n  registrationCompleteRequest: {\n    requestId: startResponse.requestId,\n    credential: JSON.stringify(credential)\n  }\n});",
        "authentication_flow": "import { AuthenticationApi, Configuration } from '@vmenon25/mpo-webauthn-client';\nimport { startAuthentication } from '@simplewebauthn/browser';\n\nconst config = new Configuration({ basePath: 'http://localhost:8080' });\nconst api = new AuthenticationApi(config);\n\n// 1. Start authentication\nconst startResponse = await api.startAuthentication({ authenticationRequest: { username: 'user@example.com' } });\n\n// 2. Parse for SimpleWebAuthn (CRITICAL)\nconst publicKeyOptions = JSON.parse(startResponse.publicKeyCredentialRequestOptions).publicKey;\n\n// 3. Get assertion from browser\nconst assertion = await startAuthentication(publicKeyOptions);\n\n// 4. Complete authentication (CRITICAL: stringify assertion)\nawait api.completeAuthentication({\n  authenticationCompleteRequest: {\n    requestId: startResponse.requestId,\n    credential: JSON.stringify(assertion)\n  }\n});"
      },
      "docker_compose_web_client": {
        "description": "Example docker-compose service for web client that connects to webauthn-server",
        "yaml": "version: '3.8'\nservices:\n  # Add to existing webauthn-server docker-compose setup\n  web-client:\n    image: node:18-alpine\n    working_dir: /app\n    ports:\n      - \"8082:8082\"\n    environment:\n      - PORT=8082\n      - API_BASE_URL=http://webauthn-server:8080\n    volumes:\n      - ./web-client:/app\n      - /app/node_modules\n    command: sh -c \"npm install && npm run build && npm start\"\n    depends_on:\n      webauthn-server:\n        condition: service_started\n    networks:\n      - webauthn-network\n\nnetworks:\n  webauthn-network:\n    driver: bridge",
        "notes": [
          "Ensure webauthn-server is on same Docker network for connectivity",
          "Set CORS configuration on webauthn-server to allow web-client origin",
          "Mount your web client code to /app volume",
          "Install @vmenon25/mpo-webauthn-client and @simplewebauthn/browser in package.json"
        ]
      },
      "cors_configuration": {
        "description": "WebAuthn server must be configured to accept browser requests",
        "required_for": "Browser-based clients (web applications)",
        "configuration": {
          "allowed_origins": ["http://localhost:8082", "https://your-app.com"],
          "allowed_methods": ["GET", "POST", "OPTIONS"],
          "allowed_headers": ["Content-Type", "Authorization"]
        },
        "note": "Server already includes CORS support - verify MPO_AUTHN_APP_RELYING_PARTY_ID matches your frontend domain"
      },
      "common_pitfalls": {
        "forgot_json_parsing": "Error: SimpleWebAuthn expects parsed object, not JSON string. Always parse publicKeyCredentialCreationOptions/publicKeyCredentialRequestOptions",
        "forgot_credential_stringify": "Error: Server expects JSON string, not object. Always stringify credential/assertion before sending to server",
        "cors_errors": "Error: Browser blocks request due to CORS. Ensure MPO_AUTHN_APP_RELYING_PARTY_ID matches your frontend domain",
        "network_connectivity": "Error: Cannot connect to server. Ensure web client can reach webauthn-server (use Docker network or correct hostname)"
      }
    },
    "android": {
      "package": "io.github.hitoshura25:mpo-webauthn-android-client",
      "documentation": "https://github.com/hitoshura25/mpo-api-authn-server/blob/main/docs/setup/library-usage.md#android-library-usage",
      "note": "See documentation for Android client library setup and usage"
    }
  },
  "mcp_servers": {
    "webauthn_client_generator": {
      "package": "@vmenon25/mcp-server-webauthn-client",
      "description": "MCP server for generating WebAuthn web clients that connect to existing webauthn-server instances",
      "source": "https://github.com/hitoshura25/mpo-api-authn-server/tree/main/mcp-server-webauthn-client",
      "installation": {
        "mcp": {
          "local": "cd mcp-server-webauthn-client && npm install && npm run build",
          "global": "npm install -g @vmenon25/mcp-server-webauthn-client",
          "npx": "npx -y @vmenon25/mcp-server-webauthn-client"
        },
        "cli": {
          "npx": "npx -y @vmenon25/mcp-server-webauthn-client --help",
          "global": "npm install -g @vmenon25/mcp-server-webauthn-client && webauthn-client-gen --help"
        }
      },
      "usage_modes": {
        "mcp_mode": {
          "description": "For MCP-compatible AI agents (Claude Code, Continue.dev, Cline)",
          "setup": "Add to claude_config.json in project root",
          "token_cost": "0 tokens - native MCP integration"
        },
        "cli_mode": {
          "description": "For non-MCP agents (Cursor, Aider, Windsurf) or direct usage",
          "command": "npx -y @vmenon25/mcp-server-webauthn-client [OPTIONS]",
          "token_cost": "~1500 tokens (one-time discovery via .ai-agents.json)"
        }
      },
      "tools": {
        "generate_web_client": {
          "description": "Generate complete web client with TypeScript, Express server, and WebAuthn integration",
          "parameters": {
            "project_path": "Where to create the web client directory (e.g., './web-client')",
            "framework": "Web framework: 'vanilla', 'react', or 'vue' (default: 'vanilla')",
            "server_url": "URL of webauthn-server instance (default: 'http://localhost:8080')",
            "client_port": "Port for web client dev server (default: 8082)"
          },
          "frameworks_supported": ["vanilla", "react", "vue"],
          "critical_features": [
            "Preserves JSON parsing patterns for WebAuthn API",
            "Includes SimpleWebAuthn browser library integration",
            "Proper credential serialization",
            "Comprehensive error handling",
            "Working Express dev server",
            "Complete build toolchain (Webpack, TypeScript, Babel)"
          ],
          "generated_files": [
            "package.json - All required dependencies",
            "src/webauthn-client.ts - Complete WebAuthn integration",
            "src/types.ts - TypeScript type definitions",
            "src/server.ts - Express dev server",
            "src/index.ts - Entry point",
            "public/index.html - Test UI",
            "webpack.config.js - Build configuration",
            "tsconfig.json - TypeScript configuration",
            "tsconfig.build.json - Build-specific TypeScript config",
            "README.md - Usage instructions"
          ]
        }
      },
      "example_usage": {
        "mcp_agent_example": {
          "scenario": "MCP-compatible agent (Claude Code)",
          "user_prompt": "Create a web client to test my webauthn-server running on port 8080",
          "ai_agent_action": "Calls generate_web_client MCP tool with project_path='./web-client', server_url='http://localhost:8080'",
          "result": "Complete working web client generated with all critical patterns preserved",
          "token_cost": "0 tokens"
        },
        "non_mcp_agent_example": {
          "scenario": "Non-MCP agent (Cursor, Aider, Windsurf)",
          "user_prompt": "Create a web client to test my webauthn-server running on port 8080",
          "ai_agent_action": "Reads .ai-agents.json, suggests CLI command: npx -y @vmenon25/mcp-server-webauthn-client --path ./web-client --server http://localhost:8080",
          "result": "User runs command, web client generated",
          "token_cost": "~1500 tokens (one-time .ai-agents.json read)"
        },
        "cli_examples": {
          "basic": "npx -y @vmenon25/mcp-server-webauthn-client",
          "custom_path": "npx -y @vmenon25/mcp-server-webauthn-client --path ./auth-client",
          "custom_server": "npx -y @vmenon25/mcp-server-webauthn-client --server http://localhost:9000 --port 3000",
          "production_server": "npx -y @vmenon25/mcp-server-webauthn-client --server https://auth.example.com"
        },
        "next_steps": [
          "cd web-client",
          "npm install",
          "npm run build",
          "npm start",
          "Open http://localhost:8082"
        ]
      },
      "integration_with_claude_code": {
        "configuration": "Add to claude_config.json in your project root",
        "config_example": {
          "mcpServers": {
            "webauthn-client-generator": {
              "command": "node",
              "args": ["path/to/mcp-server-webauthn-client/dist/index.js"]
            }
          }
        },
        "usage": "Claude Code will automatically discover the MCP server and offer to generate web clients when appropriate"
      },
      "benefits_over_manual_setup": [
        "Zero configuration - works out of the box",
        "All critical WebAuthn patterns automatically included",
        "Complete build toolchain pre-configured",
        "Type-safe TypeScript implementation",
        "Production-ready Express server",
        "Comprehensive error handling",
        "No need to study documentation - just generate and run"
      ]
    }
  },
  "ai-agent-notes": {
    "relying-party-id": "CRITICAL: MPO_AUTHN_APP_RELYING_PARTY_ID must match the domain where your frontend is hosted. Use 'localhost' for local development only.",
    "passwords": "Generate secure random passwords for POSTGRES_PASSWORD and REDIS_PASSWORD. Do not use default values in production.",
    "health-checks": "The webauthn-server uses a distroless image without curl/wget. Use external health checks via HTTP GET to /health endpoint.",
    "jaeger-optional": "Jaeger is optional for observability. Omit if you don't need distributed tracing.",
    "staging-images": "Never use ghcr.io staging images in production - they are for CI testing only.",
    "mcp-server": "For AI agents: Use the generate_web_client MCP tool to automatically create complete web clients for users. This is faster and more reliable than manually guiding users through setup."
  }
}

rules:
  # WebAuthn Origin Validation Rules
  - id: webauthn-missing-origin-validation
    message: |
      WebAuthn origin validation is critical for security. Ensure that origin 
      validation is properly implemented to prevent cross-origin attacks.
    severity: ERROR
    languages: [kotlin, java]
    patterns:
      - pattern-either:
          # Detect WebAuthn start methods without proper origin checks
          - pattern: |
              fun $METHOD(...): $RETURN {
                ...
                $WEBAUTHN.start$BUILDER(...)
                ...
              }
          - pattern: |
              public $RETURN $METHOD(...) {
                ...
                $WEBAUTHN.start$BUILDER(...);
                ...
              }
      - pattern-not-inside: |
          ...
          .origins($ORIGINS)
          ...
      - pattern-not-inside: |
          ...
          .allowOriginPort($PORT)
          ...
      - pattern-not-inside: |
          ...
          .allowOriginSubdomain($SUBDOMAIN)
          ...
    metadata:
      category: security
      technology: [webauthn]
      cwe: "CWE-346: Origin Validation Error"
      owasp: "A07:2021 – Identification and Authentication Failures"
      references:
        - "https://w3c.github.io/webauthn/#dom-credentialscontainer-create"
        - "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-39912"

  - id: webauthn-hardcoded-origins
    message: |
      Hardcoded origins in WebAuthn configuration create security vulnerabilities.
      Use environment variables or secure configuration management instead.
    severity: WARNING
    languages: [kotlin, java]
    patterns:
      - pattern-either:
          - pattern: $OBJ.origins($ORIGINS)
          - pattern: $OBJ.allowOriginPort($PORT)
      - pattern-not-inside: |
          @Test
          ...
      - pattern-not-inside: |
          // test$...
          ...
    metadata:
      category: security
      technology: [webauthn]
      cwe: "CWE-798: Use of Hard-coded Credentials"

  # Challenge Uniqueness and Replay Attack Prevention
  - id: webauthn-challenge-reuse-risk
    message: |
      WebAuthn challenges should be unique and stored securely to prevent replay attacks.
      Ensure proper challenge generation and validation.
    severity: ERROR
    languages: [kotlin, java]
    patterns:
      - pattern-either:
          # Static or predictable challenge generation
          - pattern: |
              val challenge = ByteArray($SIZE)
              ...
          - pattern: |
              val challenge = "$STATIC_STRING".toByteArray()
              ...
          - pattern: |
              val challenge = byteArrayOf($BYTES)
              ...
    metadata:
      category: security
      technology: [webauthn]
      cwe: "CWE-330: Use of Insufficiently Random Values"
      owasp: "A02:2021 – Cryptographic Failures"

  - id: webauthn-challenge-storage-without-expiry
    message: |
      WebAuthn challenges stored without expiration can lead to replay attacks.
      Implement proper challenge expiration and cleanup.
    severity: WARNING
    languages: [kotlin, java]
    patterns:
      - pattern-either:
          - pattern: |
              $STORAGE.store($KEY, $CHALLENGE)
          - pattern: |
              $STORAGE.put($KEY, $CHALLENGE)
          - pattern: |
              $MAP[$KEY] = $CHALLENGE
      - pattern-not-inside: |
          ...
          .expireAfter($TIME, $UNIT)
          ...
      - pattern-not-inside: |
          ...
          .expire($DURATION)
          ...
      - pattern-not-inside: |
          ...
          setTimeout($CALLBACK, $TIME)
          ...
      # Exclude Redis operations with built-in expiration
      - pattern-not-inside: |
          ...
          jedis.setex($KEY, $EXPIRY, $VALUE)
          ...
      - pattern-not-inside: |
          ...
          jedis.expire($KEY, $EXPIRY)
          ...
      - pattern-not-inside: |
          ...
          jedis.psetex($KEY, $EXPIRY, $VALUE)
          ...
      # Exclude storage classes that configure expiration at initialization
      - pattern-not-inside: |
          class $STORAGE(...) {
            ...
            private val expirationSeconds = $TIME
            ...
          }
    metadata:
      category: security
      technology: [webauthn]
      cwe: "CWE-613: Insufficient Session Expiration"

  # Credential Validation and Tampering Prevention
  - id: webauthn-credential-validation-bypass
    message: |
      WebAuthn credential validation should not be bypassed or weakened.
      This can lead to authentication bypass vulnerabilities.
    severity: ERROR
    languages: [kotlin, java]
    patterns:
      - pattern-either:
          # Debug mode bypasses returning WebAuthn success results
          - pattern: |
              if ($DEBUG) {
                return AssertionResult.successful($CREDENTIAL)
              }
          - pattern: |
              if ($DEBUG) {
                return RegistrationResult.success($CREDENTIAL)
              }
          # TODO stubs returning WebAuthn success results
          - pattern: |
              // TODO: implement proper validation
              return AssertionResult.successful($CREDENTIAL)
          - pattern: |
              // TODO: implement proper validation
              return RegistrationResult.success($CREDENTIAL)
          # Direct WebAuthn success returns without validation
          - pattern: |
              return AssertionResult.successful($CREDENTIAL)
          - pattern: |
              return RegistrationResult.success($CREDENTIAL)
      # Exclude functions that properly call Yubico library validation
      - pattern-not-inside: |
          ...
          relyingParty.finishAssertion(...)
          ...
      - pattern-not-inside: |
          ...
          relyingParty.finishRegistration(...)
          ...
      # Exclude JWT service functions (not WebAuthn validation)
      - pattern-not-inside: |
          class JwtService {
            ...
          }
      - pattern-not-inside: |
          fun createToken(...): $RESULT {
            ...
          }
      - pattern-not-inside: |
          fun verifyToken(...): $RESULT {
            ...
          }
      # Only match within WebAuthn validation functions
      - pattern-inside:
          pattern-either:
            - pattern: |
                fun finish$METHOD(...): $RESULT {
                  ...
                }
            - pattern: |
                public $RESULT finish$METHOD(...) {
                  ...
                }
    metadata:
      category: security
      technology: [webauthn]
      cwe: "CWE-285: Improper Authorization"
      owasp: "A07:2021 – Identification and Authentication Failures"

  - id: webauthn-signature-validation-disabled
    message: |
      WebAuthn signature validation is critical and should not be disabled.
      This creates a severe authentication bypass vulnerability.
    severity: ERROR
    languages: [kotlin, java]
    patterns:
      - pattern-either:
          - pattern: $OBJ.allowUntrustedAttestation(true)
          - pattern: $OBJ.validateSignatureCounter(false)
          - pattern: $OBJ.allowCredentialCloning(true)
          - pattern: $OBJ.strictTimestampValidation(false)
    metadata:
      category: security
      technology: [webauthn]
      cwe: "CWE-295: Improper Certificate Validation"
      owasp: "A02:2021 – Cryptographic Failures"

  # User Handle and Credential Management
  - id: webauthn-user-handle-exposure
    message: |
      WebAuthn user handles should not expose sensitive user information.
      Use opaque, non-guessable identifiers.
    severity: WARNING
    languages: [kotlin, java]
    patterns:
      - pattern-either:
          - pattern: |
              UserIdentity.builder()
                .id($EMAIL.toByteArray())
                ...
          - pattern: |
              UserIdentity.builder()
                .id($USERNAME.toByteArray())
                ...
          - pattern: |
              UserIdentity.builder()
                .id("$USER_INFO".toByteArray())
                ...
    metadata:
      category: security
      technology: [webauthn]
      cwe: "CWE-200: Information Exposure"

  # Attestation and Trust Management
  - id: webauthn-attestation-bypass
    message: |
      WebAuthn attestation validation provides important security guarantees.
      Bypassing attestation validation can weaken authentication security.
    severity: WARNING
    languages: [kotlin, java]
    patterns:
      - pattern-either:
          - pattern: $OBJ.attestationConveyancePreference(AttestationConveyancePreference.NONE)
          - pattern: $OBJ.allowUntrustedAttestation(true)
      - pattern-not-inside: |
          @Test
          ...
      - pattern-not-inside: |
          // test$...
          ...
    metadata:
      category: security
      technology: [webauthn]
      cwe: "CWE-295: Improper Certificate Validation"

  # TypeScript/JavaScript WebAuthn Rules
  - id: webauthn-client-origin-mismatch
    message: |
      WebAuthn client origin should match the server's expected origins
      to prevent cross-origin authentication attacks.
    severity: ERROR
    languages: [typescript, javascript]
    patterns:
      - pattern-either:
          - pattern: |
              const credential = await navigator.credentials.create({
                publicKey: {
                  ...
                }
              })
          - pattern: |
              const assertion = await navigator.credentials.get({
                publicKey: {
                  ...
                }
              })
      - pattern-not-inside: |
          // Validate origin
          if (window.location.origin !== $EXPECTED_ORIGIN) {
            ...
          }
          ...
    metadata:
      category: security
      technology: [webauthn, javascript]
      cwe: "CWE-346: Origin Validation Error"

  - id: webauthn-client-insecure-transport
    message: |
      WebAuthn requires secure transport (HTTPS). Using HTTP creates
      severe security vulnerabilities.
    severity: ERROR
    languages: [typescript, javascript]
    patterns:
      - pattern-either:
          - pattern: |
              const baseURL = "http://$DOMAIN"
          - pattern: |
              axios.create({
                baseURL: "http://$DOMAIN",
                $...ARGS
              })
          - pattern: |
              fetch("http://$DOMAIN/$PATH", $...ARGS)
      - pattern-not-inside: |
          // test$...
          ...
      - pattern-not-inside: |
          if ($NODE_ENV === "development") {
            ...
          }
    metadata:
      category: security
      technology: [webauthn, javascript]
      cwe: "CWE-319: Cleartext Transmission of Sensitive Information"
      owasp: "A02:2021 – Cryptographic Failures"

  # Configuration and Environment Security
  - id: webauthn-debug-mode-in-production
    message: |
      WebAuthn debug mode should not be enabled in production environments
      as it may expose sensitive information or weaken security controls.
    severity: ERROR
    languages: [kotlin, java]
    patterns:
      - pattern-either:
          - pattern: |
              val debug = true
              ...
          - pattern: $OBJ.debug(true)
          - pattern: |
              if (true) { // debug mode
                ...
              }
      - pattern-not-inside: |
          @Test
          ...
      - pattern-not-inside: |
          // test$...
          ...
    metadata:
      category: security
      technology: [webauthn]
      cwe: "CWE-489: Active Debug Code"

  # Additional Security Patterns
  - id: webauthn-weak-timeout-configuration
    message: |
      WebAuthn timeout configuration should be reasonable to prevent
      both DoS attacks and poor user experience. Very long timeouts (>5 minutes)
      can enable DoS attacks, while very short timeouts (<30 seconds) create poor UX.
    severity: INFO
    languages: [kotlin, java]
    patterns:
      - pattern-either:
          - pattern: $OBJ.timeout($TIMEOUT)
          - pattern: $OBJ.timeoutMillis($TIMEOUT)
    metadata:
      category: security
      technology: [webauthn]
      cwe: "CWE-770: Allocation of Resources Without Limits or Throttling"

  - id: webauthn-credential-enumeration-risk
    message: |
      WebAuthn implementation should not reveal whether credentials exist
      for a given user to prevent user enumeration attacks.
    severity: WARNING
    languages: [kotlin, java]
    patterns:
      - pattern-either:
          - pattern: |
              if ($CREDENTIAL_EXISTS) {
                return $SUCCESS_RESPONSE
              } else {
                return $ERROR_RESPONSE
              }
          - pattern: |
              return if ($USER_EXISTS) $SUCCESS else $ERROR
      - pattern-inside:
          pattern-either:
            - pattern: |
                fun startAuthentication(...): $RETURN {
                  ...
                }
            - pattern: |
                public $RETURN startAuthentication(...) {
                  ...
                }
    metadata:
      category: security
      technology: [webauthn]
      cwe: "CWE-204: Response Discrepancy Information Exposure"
      owasp: "A07:2021 – Identification and Authentication Failures"
      references:
        - "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-39912"
# Android Client Generation & Publishing - Platform-Specific Workflow
#
# This callable workflow handles complete Android client lifecycle:
# generation from OpenAPI spec + Maven publishing to appropriate registries.
#
# DESIGN PATTERN:
# - Self-contained platform workflow (generation + publishing)
# - No external artifact dependencies
# - Registry-aware publishing (staging vs production)
# - Version conflict detection and handling
#
# INPUTS:
#   client-version: Version for Android library
#   android-group-id: Android group ID
#   android-artifact-base-id: Base Android artifact ID (e.g., mpo-webauthn-android-client)
#   publish-type: 'staging' or 'production' (affects artifact naming)
#
# OUTPUTS:
#   published: Whether package was successfully published (not skipped)
#   skipped: Whether publishing was skipped (version exists)
#   package-name: Full Maven coordinates (for backward compatibility)
#   package-full-name: Complete Maven coordinates with version
#
# SECURITY:
#   - GitHub Packages: Uses GITHUB_TOKEN (automatic)
#   - Maven Central: Uses OSSRH credentials and GPG signing
#   - Minimal permissions: contents:read, packages:write

name: Android Client Publishing

on:
  workflow_call:
    inputs:
      client-version:
        description: 'Version for Android library'
        required: true
        type: string
      android-group-id:
        description: 'Android group ID'
        required: true
        type: string
      android-artifact-base-id:
        description: 'Base Android artifact ID (e.g., mpo-webauthn-android-client)'
        required: true
        type: string
      publish-type:
        description: 'Publishing type (staging/production)'
        required: true
        type: string
    secrets:
      GRADLE_ENCRYPTION_KEY:
        description: 'Gradle build cache encryption key'
        required: true
      CENTRAL_PORTAL_USERNAME:
        description: 'Central Portal username for Maven Central publishing'
        required: false
      CENTRAL_PORTAL_PASSWORD:
        description: 'Central Portal password for Maven Central publishing'
        required: false
      SIGNING_KEY:
        description: 'GPG private key for signing Maven Central artifacts'
        required: false
      SIGNING_PASSWORD:
        description: 'GPG private key password for signing'
        required: false
    outputs:
      published:
        description: 'Whether package was successfully published'
        value: ${{ jobs.publish-android.outputs.published }}
      skipped:
        description: 'Whether publishing was skipped (version exists)'
        value: ${{ jobs.publish-android.outputs.skipped }}
      package-name:
        description: 'Full Maven coordinates (for backward compatibility)'
        value: ${{ jobs.publish-android.outputs.package-name }}
      package-full-name:
        description: 'Complete Maven coordinates with version'
        value: ${{ jobs.publish-android.outputs.package-full-name }}

jobs:
  publish-android:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write   # Required for GitHub Packages publishing
    outputs:
      published: ${{ steps.publish-result.outputs.published }}
      skipped: ${{ steps.publish-result.outputs.skipped }}
      package-name: ${{ steps.package-info.outputs.package-name }}
      package-full-name: ${{ steps.package-info.outputs.package-full-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set package information
        id: package-info
        run: |
          # Determine artifact ID based on publish type
          if [[ "${{ inputs.publish-type }}" == "staging" ]]; then
            ANDROID_ARTIFACT_ID="${{ inputs.android-artifact-base-id }}-staging"
            echo "📦 STAGING Android package"
          else
            ANDROID_ARTIFACT_ID="${{ inputs.android-artifact-base-id }}"
            echo "🚀 PRODUCTION Android package"
          fi

          PACKAGE_NAME="${{ inputs.android-group-id }}:${ANDROID_ARTIFACT_ID}"
          PACKAGE_FULL_NAME="${PACKAGE_NAME}:${{ inputs.client-version }}"

          echo "android-artifact-id=${ANDROID_ARTIFACT_ID}" >> $GITHUB_OUTPUT
          echo "package-name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
          echo "package-full-name=${PACKAGE_FULL_NAME}" >> $GITHUB_OUTPUT

          echo "📱 Android Package Information:"
          echo "  Group ID: ${{ inputs.android-group-id }}"
          echo "  Artifact ID: ${ANDROID_ARTIFACT_ID}"
          echo "  Version: ${{ inputs.client-version }}"
          echo "  Full coordinates: ${PACKAGE_FULL_NAME}"
          echo "  Publish type: ${{ inputs.publish-type }}"

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Standardized Gradle caching for Android client publishing
      - name: Setup Gradle cache for Android client publishing
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle/configuration-cache
          key: gradle-android-publish-${{ runner.os }}-${{ github.ref_name }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-android-publish-${{ runner.os }}-${{ github.ref_name }}-
            gradle-android-publish-${{ runner.os }}-main-
            gradle-android-publish-${{ runner.os }}-

      # Optimized Gradle setup with standardized caching
      - name: Setup Gradle for Android publishing
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
          build-scan-publish: true
          build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
          build-scan-terms-of-use-agree: "yes"
          # Disable built-in cache since we're managing it manually for cross-workflow sharing
          cache-disabled: true

      - name: Generate Android client
        env:
          CLIENT_VERSION: ${{ inputs.client-version }}
          ANDROID_ARTIFACT_ID: ${{ steps.package-info.outputs.android-artifact-id }}
        run: |
          echo "🔧 Generating Android client..."
          echo "  Client version: ${CLIENT_VERSION}"
          echo "  Android artifact ID: ${ANDROID_ARTIFACT_ID}"

          # Generate only Android client and copy to submodule
          ./gradlew generateAndroidClient copyAndroidClientToSubmodule \
            -PclientVersion="${CLIENT_VERSION}" \
            -PandroidArtifactId="${ANDROID_ARTIFACT_ID}" \
            -PandroidGroupId="${{ inputs.android-group-id }}" \
            --build-cache --parallel --configuration-cache

          echo "✅ Android client generated successfully"

      - name: Check if Android package version already exists
        id: check-android-version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ANDROID_ARTIFACT_ID="${{ steps.package-info.outputs.android-artifact-id }}"
          echo "🔍 Checking if Android version already exists: ${{ inputs.android-group-id }}:${ANDROID_ARTIFACT_ID}:${{ inputs.client-version }}"

          # Check if version exists in GitHub Packages
          if gh api "/user/packages/maven/${{ inputs.android-group-id }}/${ANDROID_ARTIFACT_ID}/versions" --jq ".[].name" | grep -q "^${{ inputs.client-version }}$"; then
            echo "⚠️ Version ${{ inputs.client-version }} already exists for ${ANDROID_ARTIFACT_ID}"
            echo "skip-publish=true" >> $GITHUB_OUTPUT
          else
            echo "✅ Version ${{ inputs.client-version }} does not exist, proceeding with publish"
            echo "skip-publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish Android client to GitHub Packages (staging)
        if: inputs.publish-type == 'staging' && steps.check-android-version.outputs.skip-publish == 'false'
        env:
          CLIENT_VERSION: ${{ inputs.client-version }}
          ANDROID_PUBLISH_USER: ${{ github.actor }}
          ANDROID_PUBLISH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANDROID_ARTIFACT_ID: ${{ steps.package-info.outputs.android-artifact-id }}
          ANDROID_GROUP_ID: ${{ inputs.android-group-id }}
        run: |
          echo "📱 Publishing Android client to GitHub Packages (staging)..."
          echo "  Group ID: ${ANDROID_GROUP_ID}"
          echo "  Artifact ID: ${ANDROID_ARTIFACT_ID}"
          echo "  Version: ${CLIENT_VERSION}"

          # Build and publish Android client library to GitHub Packages
          ./gradlew :android-client-library:publish \
            -PpublishType="staging" \
            -PGitHubPackagesUsername="${ANDROID_PUBLISH_USER}" \
            -PGitHubPackagesPassword="${ANDROID_PUBLISH_TOKEN}" \
            -PclientVersion="${CLIENT_VERSION}" \
            -PandroidArtifactId="${ANDROID_ARTIFACT_ID}" \
            -PandroidGroupId="${ANDROID_GROUP_ID}" \
            --build-cache --parallel --configuration-cache --info

          echo "✅ Android client published to GitHub Packages successfully"

      - name: Publish Android client to Maven Central (production)
        if: inputs.publish-type == 'production'
        env:
          CLIENT_VERSION: ${{ inputs.client-version }}
          ANDROID_ARTIFACT_ID: ${{ steps.package-info.outputs.android-artifact-id }}
          ANDROID_GROUP_ID: ${{ inputs.android-group-id }}
          CENTRAL_PORTAL_USERNAME: ${{ secrets.CENTRAL_PORTAL_USERNAME }}
          CENTRAL_PORTAL_PASSWORD: ${{ secrets.CENTRAL_PORTAL_PASSWORD }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
        run: |
          echo "🚀 Publishing Android client to Maven Central (production)..."
          echo "  Group ID: ${ANDROID_GROUP_ID}"
          echo "  Artifact ID: ${ANDROID_ARTIFACT_ID}"
          echo "  Version: ${CLIENT_VERSION}"

          # Build and publish Android client library to Maven Central
          ./gradlew :android-client-library:publish \
            -PpublishType="production" \
            -PcentralPortalUsername="${CENTRAL_PORTAL_USERNAME}" \
            -PcentralPortalPassword="${CENTRAL_PORTAL_PASSWORD}" \
            -PsigningKey="${SIGNING_KEY}" \
            -PsigningPassword="${SIGNING_PASSWORD}" \
            -PclientVersion="${CLIENT_VERSION}" \
            -PandroidArtifactId="${ANDROID_ARTIFACT_ID}" \
            -PandroidGroupId="${ANDROID_GROUP_ID}" \
            --build-cache --parallel --configuration-cache --info

          echo "✅ Android client published to Maven Central successfully"

      - name: Skip Android publishing (version exists)
        if: inputs.publish-type == 'staging' && steps.check-android-version.outputs.skip-publish == 'true'
        run: |
          echo "⏭️ Skipping Android client publishing - version ${{ inputs.client-version }} already exists"

      - name: Set publish result
        id: publish-result
        run: |
          if [[ "${{ inputs.publish-type }}" == "staging" ]]; then
            if [[ "${{ steps.check-android-version.outputs.skip-publish }}" == "true" ]]; then
              echo "published=false" >> $GITHUB_OUTPUT
              echo "skipped=true" >> $GITHUB_OUTPUT
            else
              echo "published=true" >> $GITHUB_OUTPUT
              echo "skipped=false" >> $GITHUB_OUTPUT
            fi
          else
            # Production publishing doesn't check for existing versions
            echo "published=true" >> $GITHUB_OUTPUT
            echo "skipped=false" >> $GITHUB_OUTPUT
          fi

      - name: Android publishing summary
        run: |
          echo "🎯 Android Client Publishing Results:"
          echo "  Package: ${{ steps.package-info.outputs.package-full-name }}"
          echo "  Publish type: ${{ inputs.publish-type }}"
          echo "  Registry: ${{ inputs.publish-type == 'staging' && 'GitHub Packages' || 'Maven Central' }}"
          echo "  Published: ${{ steps.publish-result.outputs.published }}"
          echo "  Skipped: ${{ steps.publish-result.outputs.skipped }}"

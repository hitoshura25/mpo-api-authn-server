plugins {
    id("java-library")
    id("maven-publish")
    id("signing")
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

// Configure version from environment variables (properties not needed for non-publishing configuration)
val clientVersion = System.getenv("CLIENT_VERSION") ?: "1.0.0-SNAPSHOT"

// Configure artifact ID from environment variables
val androidArtifactId = System.getenv("ANDROID_ARTIFACT_ID") ?: "mpo-webauthn-android-client"

// Configure group ID from environment variables  
val androidGroupId = System.getenv("ANDROID_GROUP_ID") ?: "io.github.hitoshura25"

version = clientVersion

repositories {
    mavenCentral()
}

// Define versions to match generated client
val jakartaAnnotationVersion = "1.3.5"

// OpenAPI generator may include server-side dependencies that cause Android conflicts.
// These exclusions ensure the client library works correctly in Android projects.
configurations.all {
    // Exclude problematic dependencies that cause META-INF conflicts
    exclude(group = "jakarta.ws.rs", module = "jakarta.ws.rs-api")
    exclude(group = "jakarta.annotation", module = "jakarta.annotation-api")
}

dependencies {
    // GENERATED_DEPENDENCIES_PLACEHOLDER

    // Generated code uses @javax.annotation.Generated, so we need javax version
    // Jakarta version is excluded during dependency extraction to prevent conflicts
    implementation("javax.annotation:javax.annotation-api:1.3.2")
}

// Configure Javadoc to recognize OpenAPI generator custom tags
tasks.withType<Javadoc> {
    // Register custom tags used by OpenAPI generator
    (options as StandardJavadocDocletOptions).tags(
        "http.response.details:a:HTTP Response Details:",
        "http.request:a:HTTP Request:",
        "http.response:a:HTTP Response:",
        "http.method:a:HTTP Method:",
        "http.status:a:HTTP Status:",
        "apiNote:a:API Note:",
        "implNote:a:Implementation Note:",
        "since:a:Since:"
    )
    
    // Suppress warnings for missing @param and @return tags in generated code
    (options as StandardJavadocDocletOptions).addStringOption("Xdoclint:none", "-quiet")
}

publishing {
    publications {
        create<MavenPublication>("maven") {
            groupId = androidGroupId
            artifactId = androidArtifactId
            version = clientVersion

            from(components["java"])

            pom {
                name.set("MPO WebAuthn Android Client")
                description.set(
                    "Generated Android client library for MPO WebAuthn API - " +
                        "FIDO2/WebAuthn authentication",
                )
                url.set("https://github.com/hitoshura25/mpo-api-authn-server")

                licenses {
                    license {
                        name.set("MIT License")
                        url.set("https://opensource.org/licenses/MIT")
                    }
                }

                developers {
                    developer {
                        id.set("hitoshura25")
                        name.set("Hitoshura")
                        email.set("hitoshura25@users.noreply.github.com")
                    }
                }

                scm {
                    connection.set("scm:git:git://github.com/hitoshura25/mpo-api-authn-server.git")
                    developerConnection.set(
                        "scm:git:ssh://github.com:hitoshura25/mpo-api-authn-server.git",
                    )
                    url.set("https://github.com/hitoshura25/mpo-api-authn-server")
                }
            }
        }
    }

    repositories {
        // Repository configuration from central publishing config via environment variables
        val repositoryUrl = System.getenv("ANDROID_REPOSITORY_URL")
            ?: throw GradleException("ANDROID_REPOSITORY_URL environment variable is required")

        maven {
            name = "PublishingRepository"
            url = uri(repositoryUrl)
            credentials {
                // Use environment variables directly to avoid configuration cache invalidation
                // Credentials are set by workflow as environment variables
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

// Signing configuration for Maven Central (production only)
signing {
    val publishType = System.getenv("PUBLISH_TYPE") ?: "staging"
    val signingKey = System.getenv("SIGNING_KEY")
    val signingPassword = System.getenv("SIGNING_PASSWORD")

    // Only sign for production publishing and if we have the required properties
    if (publishType == "production" && signingKey != null && signingPassword != null) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign(publishing.publications["maven"])
    }
}

plugins {
    id("java-library")
    id("com.vanniktech.maven.publish") version "0.29.0"
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    // Note: withJavadocJar() and withSourcesJar() removed to prevent conflicts with vanniktech plugin
    // The vanniktech/gradle-maven-publish-plugin automatically generates these artifacts
}

// Configure version from environment variables (properties not needed for non-publishing configuration)
val clientVersion = System.getenv("CLIENT_VERSION") ?: "1.0.0-SNAPSHOT"

// Configure artifact ID from environment variables
val androidArtifactId = System.getenv("ANDROID_ARTIFACT_ID") ?: "mpo-webauthn-android-client"

// Configure group ID from environment variables
val androidGroupId = System.getenv("ANDROID_GROUP_ID") ?: "io.github.hitoshura25"

version = clientVersion

repositories {
    mavenCentral()
}

// Dependency locking configuration for supply chain security
// Ensures exact dependency versions are used across builds
dependencyLocking {
    lockAllConfigurations()
}

// Define versions to match generated client
val jakartaAnnotationVersion = "1.3.5"

// OpenAPI generator may include server-side dependencies that cause Android conflicts.
// These exclusions ensure the client library works correctly in Android projects.
configurations.all {
    // Exclude problematic dependencies that cause META-INF conflicts
    exclude(group = "jakarta.ws.rs", module = "jakarta.ws.rs-api")
    exclude(group = "jakarta.annotation", module = "jakarta.annotation-api")
}

dependencies {
    // GENERATED_DEPENDENCIES_PLACEHOLDER

    // Generated code uses @javax.annotation.Generated, so we need javax version
    // Jakarta version is excluded during dependency extraction to prevent conflicts
    implementation("javax.annotation:javax.annotation-api:1.3.2")
}

// Configure Javadoc to recognize OpenAPI generator custom tags
tasks.withType<Javadoc> {
    // Register custom tags used by OpenAPI generator
    (options as StandardJavadocDocletOptions).tags(
        "http.response.details:a:HTTP Response Details:",
        "http.request:a:HTTP Request:",
        "http.response:a:HTTP Response:",
        "http.method:a:HTTP Method:",
        "http.status:a:HTTP Status:",
        "apiNote:a:API Note:",
        "implNote:a:Implementation Note:",
        "since:a:Since:"
    )

    // Suppress warnings for missing @param and @return tags in generated code
    (options as StandardJavadocDocletOptions).addStringOption("Xdoclint:none", "-quiet")
}

// Configure vanniktech maven publish plugin
mavenPublishing {
    val publishType = System.getenv("PUBLISH_TYPE") ?: "staging"

    // Configure publishing target based on environment
    if (publishType == "production") {
        // Maven Central via Central Portal with automatic release
        publishToMavenCentral(com.vanniktech.maven.publish.SonatypeHost.CENTRAL_PORTAL, automaticRelease = true)
        signAllPublications()

        logger.lifecycle("ðŸš€ PRODUCTION Publishing Configuration:")
        logger.lifecycle("  Target: Maven Central (Central Portal)")
        logger.lifecycle("  Automatic Release: ENABLED")
        logger.lifecycle("  GPG Signing: ENABLED")
        logger.lifecycle("  Manual Steps: NONE REQUIRED")
    } else {
        // GitHub Packages for staging - do NOT use publishToMavenCentral()
        // vanniktech publishToMavenCentral() is only for Maven Central/OSSRH, not GitHub Packages

        logger.lifecycle("ðŸ“¦ STAGING Publishing Configuration:")
        logger.lifecycle("  Target: GitHub Packages")
        logger.lifecycle("  Automatic Release: N/A")
        logger.lifecycle("  GPG Signing: DISABLED")
        logger.lifecycle("  Publishing Method: Manual repository configuration")

        // Configure GitHub Packages repository manually for staging
        publishing {
            repositories {
                maven {
                    name = "GitHubPackages"
                    url = uri(System.getenv("ANDROID_REPOSITORY_URL")
                        ?: "https://maven.pkg.github.com/${System.getenv("GITHUB_REPOSITORY") ?: "hitoshura25/mpo-api-authn-server"}")
                    credentials(PasswordCredentials::class)
                }
            }
        }
    }

    coordinates(androidGroupId, androidArtifactId, clientVersion)

    pom {
        name.set("MPO WebAuthn Android Client")
        description.set("Generated Android client library for MPO WebAuthn API - FIDO2/WebAuthn authentication")
        url.set(System.getenv("PROJECT_URL") ?: "https://github.com/${System.getenv("GITHUB_REPOSITORY") ?: "hitoshura25/mpo-api-authn-server"}")

        licenses {
            license {
                name.set("MIT License")
                url.set("https://opensource.org/licenses/MIT")
            }
        }

        developers {
            developer {
                id.set("hitoshura25")
                name.set("Hitoshura")
                email.set("hitoshura25@users.noreply.github.com")
            }
        }

        scm {
            val repoPath = System.getenv("GITHUB_REPOSITORY") ?: "hitoshura25/mpo-api-authn-server"
            connection.set("scm:git:git://github.com/${repoPath}.git")
            developerConnection.set("scm:git:ssh://github.com:${repoPath}.git")
            url.set("https://github.com/${repoPath}")
        }
    }
}

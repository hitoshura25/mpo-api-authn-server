# WebAuthn Web Client

A complete WebAuthn (Passkeys/FIDO2) web client generated for testing authentication with your WebAuthn server.

## Quick Start

### 1. Install Dependencies

```bash
npm install
```

### 2. Install yq (Required for Service Addition)

If you plan to add additional services using `./scripts/add-service.sh`, you need `yq` v4+:

```bash
# macOS
brew install yq

# Linux
wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
chmod +x /usr/local/bin/yq

# Verify installation
yq --version  # Should show v4.x.x
```

*Note: yq is only needed for adding services, not for running the existing stack.*

### 3. Build the Client

```bash
npm run build
```

### 3. Start the Development Server

```bash
npm start
```

The client will be available at: **http://localhost:{{client_port}}**

## Configuration

The client is configured to connect to the zero-trust stack at:
- **Gateway URL**: `http://localhost:8000` (Envoy Gateway - entry point)
- **Client Port**: `{{client_port}}`
- **WebAuthn Server**: `{{server_url}}` (internal, accessed via gateway)

You can change the server URL in the web UI or by modifying the configuration.

### Port Assignments
- **8000** - Envoy Gateway (main entry point for all API calls)
- **{{client_port}}** - Web client development server (this client)
- **9000** - Service sidecars (mTLS termination, isolated per service)
- **9001+** - Application ports (configurable, e.g., example-service: 9001)
- **5432** - PostgreSQL database
- **6379** - Redis cache
- **9901** - Envoy admin interface

**Note:** Each service's Envoy sidecar uses port 9000 (no conflicts due to network isolation).

## Features

### Registration Flow
1. Enter a username and display name
2. Click "Register Passkey"
3. Follow your browser/device prompt to create a passkey
4. The passkey is securely stored on your device

### Authentication Flow
1. Enter username (or leave blank for usernameless authentication)
2. Click "Authenticate with Passkey"
3. Follow your browser/device prompt to use your passkey
4. Successfully authenticate with the server

## Critical Integration Patterns

This client preserves all critical WebAuthn integration patterns:

### JSON Parsing
Server responses contain JSON strings that must be parsed before passing to SimpleWebAuthn:
```typescript
const publicKeyOptions = JSON.parse(startResponse.publicKeyCredentialCreationOptions);
```

### SimpleWebAuthn Integration
Uses the SimpleWebAuthn browser library for WebAuthn API calls:
```typescript
const credential = await window.SimpleWebAuthnBrowser.startRegistration(publicKeyOptions.publicKey);
```

### Credential Serialization
Credentials must be stringified before sending to the server:
```typescript
credential: JSON.stringify(credential)
```

## Architecture

### Zero-Trust Architecture Overview

This project implements a **complete zero-trust architecture** with JWT-based authentication:

```
┌─────────────┐
│   Client    │
│  (Browser)  │
└──────┬──────┘
       │
       ▼
┌──────────────────────────────────────────┐
│        Envoy Gateway (Port 8000)         │
│  - JWT Verification for /api/* routes   │
│  - Public routes: /register, /authen... │
└──────┬───────────────────────────────────┘
       │
       ├─────────────────┬─────────────────┐
       ▼                 ▼                 ▼
┌─────────────┐   ┌─────────────┐   ┌─────────────┐
│  WebAuthn   │   │  Example    │   │  Your       │
│  Server     │   │  Service    │   │  Services   │
│  (JWT       │   │  (Protected │   │  (Add       │
│   Issuer)   │   │   APIs)     │   │   More)     │
└─────────────┘   └─────────────┘   └─────────────┘
```

**Key Components**:

1. **Envoy Gateway** - Entry point for all traffic
   - Validates JWT signatures using WebAuthn server's public key
   - Routes public endpoints (registration, authentication) without JWT
   - Requires JWT for all `/api/*` protected endpoints

2. **WebAuthn Server** - FIDO2 authentication + JWT issuer
   - Issues RS256-signed JWT tokens on successful authentication
   - Exports public key at `/public-key` endpoint
   - 15-minute token expiration for security

3. **Example Service** - Python FastAPI demonstrating JWT integration
   - Verifies JWT tokens using public key from WebAuthn server
   - Provides protected `/api/*` endpoints
   - Template for adding your own services

**Security Benefits**:
- ✅ No session state (stateless authentication)
- ✅ Short-lived tokens (15 minutes)
- ✅ Public key cryptography (RS256)
- ✅ Gateway-level JWT validation
- ✅ Zero-trust principle (verify every request)

## Adding Additional Services

Use the automated helper script to add new services to the zero-trust stack:

```bash
# Auto-detect next available port
./scripts/add-service.sh my-service

# Specify custom port
./scripts/add-service.sh my-service --app-port 9005

# Custom API route prefix
./scripts/add-service.sh billing-api --route /api/billing

# Show help and options
./scripts/add-service.sh --help
```

**Requirements:**
- `yq` v4+ installed (see installation instructions above)

**What the script does automatically:**
1. Scaffolds service directory from `example-service` template
2. Generates mTLS certificates (CA-signed)
3. Creates Envoy sidecar configuration
4. Updates `docker-compose.yml` with service and sidecar containers
5. Updates `envoy-gateway.yaml` with explicit routing and mTLS cluster
6. Validates port conflicts and configuration
7. Creates backup files (`.backup`) before modifying YAML files

**See `docs/INTEGRATION.md` for comprehensive integration guide and manual setup options.**

### Server Design: Express vs webpack-dev-server

This project uses **Express server** (`src/server.ts`) instead of webpack-dev-server for serving the application. This design choice provides:

1. **Production-like environment** - Same server code in dev and production
2. **Custom middleware** - CORS, health checks, static file serving
3. **Deployment-ready** - Express server can be deployed as-is
4. **Flexibility** - Easy to add API endpoints, authentication, etc.

The Express server serves:
- Static files from `dist/` (webpack bundles)
- HTML from source `public/` directory
- Health check endpoint at `/health`

### Dependencies
- **@vmenon25/mpo-webauthn-client** - Published npm client library for API communication
- **@simplewebauthn/browser** - Browser WebAuthn implementation (loaded via CDN)
- **Express** - Development and production server
- **Webpack** - Module bundling and optimization
- **TypeScript** - Type-safe development

### File Structure
```
├── src/
│   ├── webauthn-client.ts    # WebAuthn client implementation
│   ├── types.ts               # TypeScript type definitions
│   ├── server.ts              # Express development server
│   └── index.ts               # Entry point
├── public/
│   └── index.html             # Web UI
├── dist/                      # Compiled output
├── package.json
├── webpack.config.js
└── tsconfig.json
```

## Development Scripts

### Production Workflow
- `npm run build` - Full production build (webpack + TypeScript server compilation)
- `npm start` - Start the Express server (requires prior build)

### Development Workflow
- `npm run dev` - Quick development build and start (webpack dev mode + TypeScript server compilation)
- `npm run dev:watch` - Hot-reload development server using ts-node (no build required, watches for changes)

### Individual Build Steps
- `npm run build:dev` - Development webpack build + server compilation
- `npm run build:server` - Compile TypeScript server only

### Recommended Workflows

**Production deployment:**
```bash
npm install
npm run build
npm start
```

**Development (quick iteration):**
```bash
npm install
npm run dev:watch  # Hot-reload with ts-node
```

**Development (test production-like build):**
```bash
npm install
npm run dev  # Build dev bundle + start
```

## Testing

### Automated End-to-End Tests

The generated client includes Playwright tests to validate WebAuthn functionality end-to-end.

**Prerequisites:**
- WebAuthn server running at `{{server_url}}`
- Client built and ready to start

**Running Tests:**
```bash
# Ensure client is built
npm run build

# Run all E2E tests
npm test

# Run with interactive UI (great for debugging)
npm run test:ui

# Run in headed mode (see browser)
npm run test:headed

# View test report after run
npm run test:report
```

**What the Tests Cover:**
- ✅ Complete registration flow (create passkey)
- ✅ Complete authentication flow (use passkey)
- ✅ Uses Chromium virtual authenticator (no real device needed)
- ✅ Validates both flows work end-to-end with your server

**How It Works:**
1. Playwright starts the web client automatically
2. Sets up a virtual authenticator (simulates passkey device)
3. Tests full registration and authentication flows
4. Cleans up after tests complete

**Note**: Tests use Chromium's virtual authenticator, so no physical security key or biometric device is required. The tests validate your WebAuthn server integration is working correctly.

### Manual Testing

1. **Test Connection**: Click "Test Connection" to verify server availability
2. **Register**: Create a new passkey with username and display name
3. **Authenticate**: Use your passkey to authenticate

## JWT Authentication Flow

After successfully completing WebAuthn authentication, you receive a JWT token that can be used to access protected API endpoints.

### Obtaining a JWT Token

1. **Authenticate with WebAuthn**:
```bash
# 1. Start authentication
curl -X POST http://localhost:8000/authenticate/start \
  -H "Content-Type: application/json" \
  -d '{"username": "user@example.com"}'

# 2. Complete authentication (with WebAuthn credential)
curl -X POST http://localhost:8000/authenticate/complete \
  -H "Content-Type: application/json" \
  -d '{"requestId": "...", "credential": "..."}'
```

2. **Extract JWT from Response**:
```json
{
  "success": true,
  "access_token": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...",
  "token_type": "Bearer",
  "expires_in": 900,
  "username": "user@example.com"
}
```

### Using JWT to Access Protected Endpoints

All `/api/*` routes require a valid JWT token in the Authorization header:

```bash
# Store the token
TOKEN="eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."

# Call protected endpoint
curl http://localhost:8000/api/user/profile \
  -H "Authorization: Bearer $TOKEN"

# Response
{
  "username": "user@example.com",
  "message": "This is protected data from the example service",
  "authenticated_at": 1234567890,
  "expires_at": 1234568790
}
```

### Token Expiration

- **Lifetime**: 15 minutes (900 seconds)
- **Handling Expiration**: Re-authenticate with WebAuthn to get a new token
- **No Refresh Tokens**: For security, you must re-authenticate (passwordless is fast!)

## Protected API Endpoints

The generated project includes an example service with protected endpoints demonstrating JWT integration:

### Available Endpoints

#### Public Endpoints (No JWT Required)
- `GET /health` - Health check
- `POST /register/start` - Start WebAuthn registration
- `POST /register/complete` - Complete WebAuthn registration
- `POST /authenticate/start` - Start WebAuthn authentication
- `POST /authenticate/complete` - Complete WebAuthn authentication (returns JWT)
- `GET /public-key` - Get RSA public key for JWT verification

#### Protected Endpoints (JWT Required)
- `GET /api/user/profile` - Get authenticated user profile
- `GET /api/example/data` - Get example protected data

### Example: Calling Protected Endpoints

```bash
# 1. Authenticate and get token (via web UI or API)
TOKEN=$(curl -s http://localhost:8000/authenticate/complete \
  -H "Content-Type: application/json" \
  -d '{"requestId":"...","credential":"..."}' \
  | jq -r '.access_token')

# 2. Call protected endpoint with JWT
curl http://localhost:8000/api/user/profile \
  -H "Authorization: Bearer $TOKEN"

# 3. Try without JWT (will fail with 401)
curl http://localhost:8000/api/user/profile
# Response: 401 Unauthorized
```

### Adding Custom Protected Endpoints

See `example-service/README.md` for detailed instructions on:
- Adding new protected endpoints to the example service
- Creating additional services in the stack
- JWT verification patterns in Python/TypeScript/etc.

All endpoints under `/api/*` are automatically protected by Envoy Gateway's JWT filter - no additional code needed!

## Troubleshooting

### Connection Issues
- Verify WebAuthn server is running at `{{server_url}}`
- Check CORS configuration on the server
- Ensure ports are not conflicting

### WebAuthn Errors
- **InvalidStateError**: Passkey already exists for this account
- **NotAllowedError**: User cancelled or timeout
- **NotSupportedError**: WebAuthn not supported in this browser

### Browser Support
WebAuthn is supported in modern browsers:
- Chrome/Edge 67+
- Firefox 60+
- Safari 13+
- Opera 54+

**Note**: This project excludes IE 11 from transpilation targets since WebAuthn is not supported on IE 11.

## Security Notes

### WebAuthn Security
- Passkeys are stored securely on your device
- Private keys never leave your device
- Server validates all credentials
- Replay attacks are prevented
- Username enumeration is protected

### Docker Secrets Management

This project uses **Docker Compose secrets** for secure credential management:

#### How It Works
- Passwords are auto-generated using cryptographically secure random bytes
- Secrets are stored in `docker/secrets/` directory (gitignored)
- Secrets are mounted as read-only files at `/run/secrets/` in containers
- No hardcoded passwords in docker-compose.yml or source code

#### Secret Files
```
docker/secrets/
├── .gitignore          # Prevents accidental commits
├── postgres_password   # PostgreSQL password (auto-generated)
└── redis_password      # Redis password (auto-generated)
```

#### Secret Rotation
To rotate secrets (change passwords):

1. Generate new passwords:
```bash
openssl rand -base64 32 | cut -c1-32 > docker/secrets/postgres_password
openssl rand -base64 32 | cut -c1-32 > docker/secrets/redis_password
```

2. Restart services:
```bash
cd docker && docker compose restart
```

#### Verification
Run the setup script to verify secrets:
```bash
cd docker && bash setup-secrets.sh
```

**Important**: The `docker/secrets/` directory is automatically excluded from git via `.gitignore` to prevent accidental exposure of credentials.

## Integration with Zero-Trust Stack

This client connects to a complete zero-trust architecture stack via Envoy Gateway at `http://localhost:8000`.

### Docker Stack Components

The generated `docker/docker-compose.yml` includes:

1. **Envoy Gateway** (port 8000) - Entry point with JWT verification
2. **WebAuthn Server** (internal) - FIDO2 authentication + JWT issuer
3. **Example Service** (internal) - Python FastAPI with JWT verification
4. **PostgreSQL** (port 5432) - Credential storage
5. **Redis** (port 6379) - Session cache

### Starting the Stack

```bash
cd docker
docker compose up -d

# Verify all services are healthy
docker compose ps

# View logs
docker compose logs -f
```

### WebAuthn Endpoints (via Gateway)

#### Registration
- `POST http://localhost:8000/register/start` - Start passkey registration
- `POST http://localhost:8000/register/complete` - Complete passkey registration

#### Authentication
- `POST http://localhost:8000/authenticate/start` - Start passkey authentication
- `POST http://localhost:8000/authenticate/complete` - Complete passkey authentication (returns JWT)

#### Zero-Trust Endpoints
- `GET http://localhost:8000/public-key` - Get RSA public key for JWT verification
- `GET http://localhost:8000/api/user/profile` - Protected endpoint (requires JWT)

### Health Check
- `GET http://localhost:8000/health` - Server health status

## License

Apache-2.0

## Generated By

This client was generated using the [@vmenon25/mcp-server-webauthn-client](https://github.com/hitoshura25/mpo-api-authn-server/tree/main/mcp-server-webauthn-client) MCP server.

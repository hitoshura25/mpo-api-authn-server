#!/bin/bash
set -e

# add-service.sh - Helper script to add new services to zero-trust stack
# Generated by @vmenon25/mcp-server-webauthn-client
#
# Usage: ./scripts/add-service.sh <service-name>

SERVICE_NAME="$1"

if [ -z "$SERVICE_NAME" ]; then
    echo "❌ Error: Service name is required"
    echo ""
    echo "Usage: ./scripts/add-service.sh <service-name>"
    echo ""
    echo "Example:"
    echo "  ./scripts/add-service.sh my-api-service"
    exit 1
fi

# Validate service name (alphanumeric and hyphens only)
if ! echo "$SERVICE_NAME" | grep -qE '^[a-zA-Z0-9-]+$'; then
    echo "❌ Error: Service name must contain only alphanumeric characters and hyphens"
    exit 1
fi

echo "🚀 Adding new service: $SERVICE_NAME"
echo ""

# Check if example-service exists
if [ ! -d "example-service" ]; then
    echo "❌ Error: example-service directory not found"
    echo "   Make sure you're running this script from the project root"
    exit 1
fi

# Check if service already exists
if [ -d "$SERVICE_NAME" ]; then
    echo "❌ Error: Service '$SERVICE_NAME' already exists"
    exit 1
fi

# Step 1: Copy example-service as template
echo "📋 Step 1: Copying example-service template..."
cp -r example-service "$SERVICE_NAME"
echo "   ✅ Created $SERVICE_NAME/ directory"
echo ""

# Step 2: Generate mTLS certificates
echo "🔐 Step 2: Generating mTLS certificates..."

CERTS_DIR="docker/certs"
if [ ! -d "$CERTS_DIR" ]; then
    echo "❌ Error: docker/certs directory not found"
    exit 1
fi

cd "$CERTS_DIR"

# Check if CA exists
if [ ! -f "ca-cert.pem" ] || [ ! -f "ca-key.pem" ]; then
    echo "❌ Error: CA certificates not found in docker/certs/"
    echo "   Make sure ca-cert.pem and ca-key.pem exist"
    exit 1
fi

# Generate service key and CSR
echo "   Generating private key and CSR..."
openssl req -newkey rsa:2048 -nodes \
    -keyout "${SERVICE_NAME}-key.pem" \
    -out "${SERVICE_NAME}-csr.pem" \
    -subj "/CN=${SERVICE_NAME}/O=WebAuthn/OU=Services" 2>/dev/null

# Sign with CA
echo "   Signing certificate with CA..."
openssl x509 -req \
    -in "${SERVICE_NAME}-csr.pem" \
    -CA ca-cert.pem \
    -CAkey ca-key.pem \
    -CAcreateserial \
    -out "${SERVICE_NAME}-cert.pem" \
    -days 365 2>/dev/null

# Cleanup CSR
rm "${SERVICE_NAME}-csr.pem"

echo "   ✅ Generated certificates:"
echo "      - ${SERVICE_NAME}-cert.pem (certificate)"
echo "      - ${SERVICE_NAME}-key.pem (private key)"
echo ""

cd ../..

# Step 3: Create Envoy sidecar configuration
echo "⚙️  Step 3: Creating Envoy sidecar configuration..."

SIDECAR_CONFIG="docker/istio/${SERVICE_NAME}-envoy.yaml"
cp docker/istio/example-service-envoy.yaml "$SIDECAR_CONFIG"

# Update certificate paths in sidecar config (portable across all platforms)
sed "s|service-cert.pem|${SERVICE_NAME}-cert.pem|g; s|service-key.pem|${SERVICE_NAME}-key.pem|g" \
  "$SIDECAR_CONFIG" > "${SIDECAR_CONFIG}.tmp"
mv "${SIDECAR_CONFIG}.tmp" "$SIDECAR_CONFIG"

echo "   ✅ Created $SIDECAR_CONFIG"
echo ""

# Step 4: Provide instructions for docker-compose.yml
echo "📝 Step 4: Manual configuration required"
echo ""
echo "   Please add the following to docker/docker-compose.yml:"
echo ""
echo "   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
cat <<EOF
  # ${SERVICE_NAME} sidecar (mTLS termination)
  ${SERVICE_NAME}-sidecar:
    image: envoyproxy/envoy:v1.29-latest
    container_name: ${SERVICE_NAME}-sidecar
    volumes:
      - ./istio/${SERVICE_NAME}-envoy.yaml:/etc/envoy/envoy.yaml:ro
      - ./certs:/etc/certs:ro
    command: ["-c", "/etc/envoy/envoy.yaml", "--service-cluster", "${SERVICE_NAME}"]
    restart: unless-stopped

  # ${SERVICE_NAME} application
  ${SERVICE_NAME}:
    build:
      context: ../${SERVICE_NAME}
      dockerfile: Dockerfile
    container_name: ${SERVICE_NAME}
    network_mode: "service:${SERVICE_NAME}-sidecar"
    environment:
      # Port configuration (sidecar uses 9000, app uses APP_PORT)
      APP_PORT: 9001  # Change if you have multiple services (9002, 9003, etc.)
      WEBAUTHN_PUBLIC_KEY_URL: "http://webauthn-server:8080/public-key"
    depends_on:
      - webauthn-server
      - ${SERVICE_NAME}-sidecar
    restart: unless-stopped
EOF
echo ""
echo "   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# Step 5: Provide instructions for Envoy Gateway routing
echo "   Please add routing to docker/envoy-gateway.yaml:"
echo ""
echo "   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
cat <<EOF
# In routes section (under virtual_hosts):
- match:
    prefix: "/api/${SERVICE_NAME}"
  route:
    cluster: ${SERVICE_NAME}

# In clusters section:
- name: ${SERVICE_NAME}
  connect_timeout: 0.25s
  type: STRICT_DNS
  lb_policy: ROUND_ROBIN
  load_assignment:
    cluster_name: ${SERVICE_NAME}
    endpoints:
      - lb_endpoints:
          - endpoint:
              address:
                socket_address:
                  address: ${SERVICE_NAME}
                  port_value: 9000
  # mTLS configuration
  transport_socket:
    name: envoy.transport_sockets.tls
    typed_config:
      "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
      common_tls_context:
        tls_certificates:
          - certificate_chain:
              filename: /etc/envoy/certs/gateway-cert.pem
            private_key:
              filename: /etc/envoy/certs/gateway-key.pem
        validation_context:
          trusted_ca:
            filename: /etc/envoy/certs/ca-cert.pem
EOF
echo ""
echo "   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""

# Final summary
echo "✅ Service scaffolding complete!"
echo ""
echo "📋 Next steps:"
echo ""
echo "   1. Update your service code:"
echo "      cd ${SERVICE_NAME}"
echo "      # Edit main.py (or create your own application)"
echo "      # Keep JWT verification middleware intact"
echo "      # Ensure your app listens on 127.0.0.1:\$APP_PORT (NOT 0.0.0.0)"
echo ""
echo "   2. Update docker/docker-compose.yml:"
echo "      # Add the service configuration shown above"
echo "      # Adjust APP_PORT if you have multiple services:"
echo "      #   - First service:  APP_PORT: 9001"
echo "      #   - Second service: APP_PORT: 9002"
echo "      #   - Third service:  APP_PORT: 9003"
echo "      # Note: Envoy sidecars all use port 9000 (no conflict, separate networks)"
echo ""
echo "   3. Update docker/envoy-gateway.yaml:"
echo "      # Add routing configuration shown above"
echo ""
echo "   4. Start your service:"
echo "      cd docker"
echo "      docker compose up -d ${SERVICE_NAME}"
echo ""
echo "   5. Test your service:"
echo "      # Get JWT token first"
echo "      curl -H \"Authorization: Bearer \$TOKEN\" \\"
echo "        http://localhost:8000/api/${SERVICE_NAME}/your-endpoint"
echo ""
echo "📚 For detailed integration guide, see:"
echo "   docs/INTEGRATION.md"
echo ""

# Smart PR Testing Workflow with Conditional Execution and Callable Workflow Architecture
#
# This workflow implements intelligent change detection and conditional execution
# to optimize CI/CD performance for pull requests. It uses callable workflows
# for better maintainability and reusability.
#
# WORKFLOW DECISION MATRIX:
# | Change Type           | Unit Tests | Docker Build | E2E Tests |
# |-----------------------|-----------:|-------------:|----------:|
# | UI Force Full         |     ✅ Run |      ✅ Build |   ✅ Run |
# | UI Force Docker       |    ❌ Skip |      ✅ Build |   ✅ Run |
# | UI Force Tests        |     ✅ Run |     ❌ Skip |  ❌ Skip |
# | Source code changes   |     ✅ Run |      ✅ Build |   ✅ Run |
# | Unit test workflows   |     ✅ Run |     ❌ Skip |  ❌ Skip |
# | Orchestration workflows|    ❌ Skip |      ✅ Build |   ✅ Run |
# | Docker workflows      |    ❌ Skip |      ✅ Build |  ❌ Skip |
# | E2E workflows         |    ❌ Skip |      ✅ Build |   ✅ Run |
# | Dockerfile only       |    ❌ Skip |      ✅ Build |   ✅ Run |
# | Documentation only    |    ❌ Skip |     ❌ Skip |  ❌ Skip |
# | Infrastructure workflows|  ❌ Skip |     ❌ Skip |  ❌ Skip |
#
# PERFORMANCE BENEFITS:
# - Fast path: Documentation/workflow changes complete in ~30 seconds
# - Standard path: Full CI pipeline takes ~8 minutes when needed
# - Smart detection: Only run tests/builds for relevant changes
# - Callable workflows: Reduced complexity and improved maintainability
#
# ARCHITECTURE:
# - detect-changes: Smart change detection and execution strategy
# - unit-tests.yml: Callable workflow for unit testing and coverage
# - docker-build.yml: Callable workflow for Docker build/scan/push
# - report-build-results: Results aggregation and status reporting

name: Build and Test - Orchestration Workflow

on:
  workflow_call:
    inputs:
      force-full-pipeline:
        description: 'Force full pipeline execution'
        required: false
        default: false
        type: boolean
      force-docker-build:
        description: 'Force Docker build and E2E tests'
        required: false
        default: false
        type: boolean
      force-unit-tests:
        description: 'Force unit tests execution'
        required: false
        default: false
        type: boolean
    outputs:
      docker_images_built:
        description: 'Whether Docker images were built and pushed'
        value: ${{ jobs.docker-build-scan-push.outputs.images-pushed }}
      webauthn_server_image:
        description: 'WebAuthn server Docker image tag'
        value: ${{ jobs.docker-build-scan-push.outputs.webauthn-server-image }}
      test_credentials_image:
        description: 'Test credentials service Docker image tag'
        value: ${{ jobs.docker-build-scan-push.outputs.test-credentials-image }}
      unit_tests_passed:
        description: 'Whether unit tests passed successfully'
        value: ${{ jobs.run-unit-tests.outputs.tests-passed }}
      coverage_uploaded:
        description: 'Whether coverage reports were uploaded'
        value: ${{ jobs.run-unit-tests.outputs.coverage-uploaded }}
      should_run_docker_workflow:
        description: 'Whether Docker workflow should be executed'
        value: ${{ jobs.detect-changes.outputs.should-run-docker-workflow }}
      should_run_e2e_workflow:
        description: 'Whether E2E workflow should be executed'
        value: ${{ jobs.detect-changes.outputs.should-run-e2e-workflow }}

env:
  ANDROID_API_VERSION: "29"
  JAVA_VERSION: "21"
  PUBLISHING_CONFIG_FILE: "config/publishing-config.yml"

jobs:
  # Job 1: Detect what changed to determine execution strategy (using centralized workflow)
  detect-changes:
    name: Detect Changes
    uses: ./.github/workflows/detect-changes.yml

  # Job 2: Setup configuration for callable workflows (load from central config)
  setup-config:
    runs-on: ubuntu-latest
    outputs:
      java-version: ${{ steps.config.outputs.java-version }}
      docker-registry: ${{ steps.config.outputs.docker-registry }}
      webauthn-image-name: ${{ steps.config.outputs.webauthn-image-name }}
      test-credentials-image-name: ${{ steps.config.outputs.test-credentials-image-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Load configuration from central config file
        id: config
        run: |
          echo "🔧 Loading Docker configuration from ${{ env.PUBLISHING_CONFIG_FILE }}..."
          
          # Use pre-installed yq on GitHub runners
          
          # Load configuration
          CONFIG_FILE="${{ env.PUBLISHING_CONFIG_FILE }}"
          
          # Validate configuration file exists
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "❌ Configuration file not found: $CONFIG_FILE"
            exit 1
          fi
          
          # Extract Docker configuration values
          DOCKER_REGISTRY=$(yq '.docker.registry.url' "$CONFIG_FILE")
          WEBAUTHN_IMAGE_NAME=$(yq '.docker.images.webauthn-server.name' "$CONFIG_FILE")
          TEST_CREDENTIALS_IMAGE_NAME=$(yq '.docker.images.test-credentials-service.name' "$CONFIG_FILE")
          
          # Validate required values are not null
          if [ "$DOCKER_REGISTRY" = "null" ] || [ "$WEBAUTHN_IMAGE_NAME" = "null" ] || [ "$TEST_CREDENTIALS_IMAGE_NAME" = "null" ]; then
            echo "❌ Missing required Docker configuration in $CONFIG_FILE"
            echo "Registry: $DOCKER_REGISTRY"
            echo "WebAuthn image: $WEBAUTHN_IMAGE_NAME"  
            echo "Test credentials image: $TEST_CREDENTIALS_IMAGE_NAME"
            exit 1
          fi
          
          # Set outputs
          echo "java-version=${{ env.JAVA_VERSION }}" >> $GITHUB_OUTPUT
          echo "docker-registry=$DOCKER_REGISTRY" >> $GITHUB_OUTPUT
          echo "webauthn-image-name=$WEBAUTHN_IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "test-credentials-image-name=$TEST_CREDENTIALS_IMAGE_NAME" >> $GITHUB_OUTPUT
          
          echo "✅ Docker configuration loaded successfully:"
          echo "  Registry: $DOCKER_REGISTRY"
          echo "  WebAuthn Server: $WEBAUTHN_IMAGE_NAME"
          echo "  Test Credentials: $TEST_CREDENTIALS_IMAGE_NAME"

  # Job 3: Run unit tests using callable workflow
  run-unit-tests:
    uses: ./.github/workflows/unit-tests.yml
    needs: [ detect-changes, setup-config ]
    if: needs.detect-changes.outputs.should-run-tests-workflow == 'true'
    with:
      changes-detected: ${{ needs.detect-changes.outputs.should-run-tests-workflow == 'true' }}
      test-scope: 'all'
      java-version: ${{ needs.setup-config.outputs.java-version }}
    secrets: inherit

  # Job 4: Docker build and push using callable workflow
  docker-build-scan-push:
    uses: ./.github/workflows/docker-build.yml
    needs: [ detect-changes, setup-config, run-unit-tests ]
    if: |
      always() &&
      needs.detect-changes.outputs.should-run-docker-workflow == 'true' &&
      (needs.run-unit-tests.result == 'success' ||
       needs.run-unit-tests.result == 'skipped' ||
       needs.detect-changes.outputs.should-run-tests-workflow == 'false')
    with:
      webauthn-docker-changes-detected: ${{ needs.detect-changes.outputs.webauthn-server-changed == 'true' }}
      test-credentials-docker-changes-detected: ${{ needs.detect-changes.outputs.test-credentials-service-changed == 'true' }}
      force-build: ${{ inputs.force-full-pipeline == true || inputs.force-docker-build == true }}
      java-version: ${{ needs.setup-config.outputs.java-version }}
      registry-url: ${{ needs.setup-config.outputs.docker-registry }}
      webauthn-image-name: ${{ needs.setup-config.outputs.webauthn-image-name }}
      test-credentials-image-name: ${{ needs.setup-config.outputs.test-credentials-image-name }}
    secrets: inherit

  # Job 5: Report build results (E2E triggering now handled by orchestrator)
  report-build-results:
    runs-on: ubuntu-latest
    needs: [ detect-changes, run-unit-tests, docker-build-scan-push ]
    if: always()
    steps:
      - name: Report build status
        run: |
          echo "📊 Build and Test Results Summary:"
          echo "Should run tests workflow: ${{ needs.detect-changes.outputs.should-run-tests-workflow }}"
          echo "Should run Docker workflow: ${{ needs.detect-changes.outputs.should-run-docker-workflow }}"
          echo "Should run E2E workflow: ${{ needs.detect-changes.outputs.should-run-e2e-workflow }}"
          echo ""
          echo "📋 Component Changes Detected:"
          echo "WebAuthn Server: ${{ needs.detect-changes.outputs.webauthn-server-changed }}"
          echo "Test Credentials Service: ${{ needs.detect-changes.outputs.test-credentials-service-changed }}"
          echo "OpenAPI Specification: ${{ needs.detect-changes.outputs.openapi-changed }}"
          echo "E2E Tests: ${{ needs.detect-changes.outputs.e2e-tests-changed }}"
          echo "Workflows: ${{ needs.detect-changes.outputs.workflows-changed }}"
          echo "Unit tests: ${{ needs.run-unit-tests.result }}"
          echo "Unit tests passed: ${{ needs.run-unit-tests.outputs.tests-passed }}"
          echo "Coverage uploaded: ${{ needs.run-unit-tests.outputs.coverage-uploaded }}"
          echo "Docker images built: ${{ needs.docker-build-scan-push.outputs.images-built }}"
          echo "Docker images pushed: ${{ needs.docker-build-scan-push.outputs.images-pushed }}"

          if [[ "${{ needs.docker-build-scan-push.outputs.images-pushed }}" == "true" ]]; then
            echo "✅ Docker images successfully built and pushed:"
            echo "  WebAuthn Server: ${{ needs.docker-build-scan-push.outputs.webauthn-server-image }}"
            echo "  Test Credentials: ${{ needs.docker-build-scan-push.outputs.test-credentials-image }}"
            echo "🚀 Ready for parallel E2E tests and security scanning"
          elif [[ "${{ needs.docker-build-scan-push.outputs.images-built }}" == "true" ]]; then
            echo "🔧 Docker images built successfully but push failed"
          elif [[ "${{ needs.detect-changes.outputs.should-run-docker-workflow }}" == "false" && "${{ needs.detect-changes.outputs.should-run-tests-workflow }}" == "false" ]]; then
            echo "⚡ Fast path completed - no builds needed"
          elif [[ "${{ needs.run-unit-tests.outputs.tests-passed }}" == "true" ]]; then
            echo "🔧 Unit tests passed, Docker build skipped (test-only changes)"
          else
            echo "📋 Build phase analysis completed"
          fi

# E2E Tests Orchestrator - Cross-Platform Integration
#
# This workflow orchestrates comprehensive end-to-end tests using built Docker images
# to ensure full system integration works correctly across all platforms.
#
# ARCHITECTURE:
# - Orchestrates parallel execution of platform-specific E2E workflows
# - Web E2E: Delegates to web-e2e-tests.yml (Playwright testing)
# - Android E2E: Delegates to android-e2e-tests.yml (emulator testing)
# - Results aggregation: Collects and reports results from both platforms
#
# TRIGGER CONDITIONS:
# - Called by main orchestrator workflow (main-ci-cd.yml)
# - Only runs when Docker images have been successfully built
# - Uses the exact images that were built for the PR
#
# TEST COVERAGE:
# - Cross-platform WebAuthn functionality (Android + Web)
# - Full API contract validation
# - Integration between all services
# - Real Docker image validation
#
# BENEFITS:
# - True parallel execution of platform tests
# - Independent platform team ownership
# - Selective test execution capabilities
# - Improved maintainability and specialization

name: E2E Tests - Cross-Platform Orchestrator

on:
  workflow_call:
    inputs:
      webauthn_server_image:
        description: 'WebAuthn server Docker image tag'
        required: true
        type: string
      test_credentials_image:
        description: 'Test credentials service Docker image tag'
        required: true
        type: string
      webauthn_server_digest:
        description: 'WebAuthn server Docker image digest (for content-based caching)'
        required: true
        type: string
      test_credentials_digest:
        description: 'Test credentials service Docker image digest (for content-based caching)'
        required: true
        type: string
      workflow-identifier:
        description: 'Workflow identifier for artifact naming (PR number or fallback value for main branch)'
        required: false
        type: string
        default: ''
      # Component change detection inputs for smart E2E triggering
      webauthn-server-changed:
        description: 'Whether webauthn-server component changed'
        required: false
        default: 'false'
        type: string
      test-credentials-service-changed:
        description: 'Whether test-credentials-service component changed'
        required: false
        default: 'false'
        type: string
      should-run-client-publishing-workflow:
        description: 'Whether client publishing workflow should be executed (based on OpenAPI or workflow changes)'
        required: false
        default: 'false'
        type: string
      e2e-tests-changed:
        description: 'Whether E2E test files changed'
        required: false
        default: 'false'
        type: string
      # Granular E2E change inputs for platform-specific triggering
      web-e2e-test-files-changed:
        description: 'Whether web E2E test files changed'
        required: false
        default: 'false'
        type: string
      android-e2e-test-files-changed:
        description: 'Whether Android E2E test files changed'
        required: false
        default: 'false'
        type: string
      # Security scanning inputs
      security-scan-files-changed:
        description: 'Whether security scan configuration changed'
        required: false
        default: 'false'
        type: string
      # Force execution flags
      force-full-pipeline:
        description: 'Force full E2E pipeline execution'
        required: false
        default: false
        type: boolean
      force-docker-build:
        description: 'Force E2E tests due to Docker build'
        required: false
        default: false
        type: boolean
      # Client library information (from actual published packages)
      typescript-package-name:
        description: 'Published TypeScript package name'
        required: false
        type: string
        default: ''
      android-package-name:
        description: 'Published Android package name'
        required: false
        type: string
        default: ''
      client-version:
        description: 'Published client library version'
        required: false
        type: string
        default: ''

env:
  ANDROID_API_VERSION: "29"
  JAVA_VERSION: "21"
  # Use workflow inputs directly
  WORKFLOW_IDENTIFIER: ${{ github.event.pull_request.number || github.run_number || 'main' }}
  WEBAUTHN_SERVER_IMAGE: ${{ inputs.webauthn_server_image }}
  TEST_CREDENTIALS_IMAGE: ${{ inputs.test_credentials_image }}
  BASE_VERSION: "1.0"
  PUBLISHING_CONFIG_FILE: "config/publishing-config.yml"

jobs:
  # Job 1: Setup configuration for callable workflows (convert env vars to job outputs)
  setup-config:
    runs-on: ubuntu-latest
    outputs:
      java-version: ${{ steps.config.outputs.java-version }}
      android-api-version: ${{ steps.config.outputs.android-api-version }}
      docker-registry: ${{ steps.config.outputs.docker-registry }}
      # Client library information (passed through from main orchestrator)
      client-version: ${{ steps.config.outputs.client-version }}
      typescript-package-name: ${{ steps.config.outputs.typescript-package-name }}
      android-package-name: ${{ steps.config.outputs.android-package-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Load configuration from central config file
        id: config
        run: |
          echo "🔧 Loading configuration from ${{ env.PUBLISHING_CONFIG_FILE }}..."

          # Load configuration (yq is pre-installed on GitHub runners)
          CONFIG_FILE="${{ env.PUBLISHING_CONFIG_FILE }}"

          # Validate configuration file exists
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "❌ Configuration file not found: $CONFIG_FILE"
            exit 1
          fi

          # Extract configuration values (E2E tests use staging environment)
          DOCKER_REGISTRY=$(yq '.docker.registry.url' "$CONFIG_FILE")

          # Validate required values are not null
          if [ "$DOCKER_REGISTRY" = "null" ]; then
            echo "❌ Missing required configuration in $CONFIG_FILE"
            echo "Docker registry: $DOCKER_REGISTRY"
            exit 1
          fi

          # Set outputs (mix of central config and environment variables)
          echo "java-version=${{ env.JAVA_VERSION }}" >> $GITHUB_OUTPUT
          echo "android-api-version=${{ env.ANDROID_API_VERSION }}" >> $GITHUB_OUTPUT
          echo "docker-registry=$DOCKER_REGISTRY" >> $GITHUB_OUTPUT

          # Pass through client library information from main orchestrator
          echo "client-version=${{ inputs.client-version }}" >> $GITHUB_OUTPUT
          echo "typescript-package-name=${{ inputs.typescript-package-name }}" >> $GITHUB_OUTPUT
          echo "android-package-name=${{ inputs.android-package-name }}" >> $GITHUB_OUTPUT

          echo "✅ Configuration loaded successfully:"
          echo "  Docker registry: $DOCKER_REGISTRY (from central config)"
          echo "  Java version: ${{ env.JAVA_VERSION }} (from environment)"
          echo "  Client version: ${{ inputs.client-version }} (from main orchestrator)"
          echo "  TypeScript package: ${{ inputs.typescript-package-name }} (from main orchestrator)"
          echo "  Android package: ${{ inputs.android-package-name }} (from main orchestrator)"

  # Job 2: Component-aware E2E test orchestration with intelligent scope determination
  analyze-e2e-requirements:
    runs-on: ubuntu-latest
    needs: setup-config
    outputs:
      web-cache-hit: ${{ steps.web-cache.outputs.cache-hit }}
      android-cache-hit: ${{ steps.android-cache.outputs.cache-hit }}
      dast-cache-hit: ${{ steps.dast-cache.outputs.cache-hit }}
      cache-key-web: ${{ steps.cache-keys.outputs.web-key }}
      cache-key-android: ${{ steps.cache-keys.outputs.android-key }}
      cache-key-dast: ${{ steps.cache-keys.outputs.dast-key }}
      # Simplified single flags - no more redundant should-run vs skip logic
      run-web-e2e: ${{ steps.determine-scope.outputs.run-web-e2e }}
      run-android-e2e: ${{ steps.determine-scope.outputs.run-android-e2e }}
      run-dast-scan: ${{ steps.determine-scope.outputs.run-dast-scan }}
      use-web-cache: ${{ steps.determine-scope.outputs.use-web-cache }}
      use-android-cache: ${{ steps.determine-scope.outputs.use-android-cache }}
      use-dast-cache: ${{ steps.determine-scope.outputs.use-dast-cache }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate E2E cache keys
        id: cache-keys
        run: |
          # Extract image digests for cache key (content-based, not tag-based)
          WEBAUTHN_DIGEST="${{ inputs.webauthn_server_digest }}"
          TEST_CREDS_DIGEST="${{ inputs.test_credentials_digest }}"

          # Create short digest versions for cache keys (first 12 chars of hash)
          WEBAUTHN_DIGEST_SHORT=$(echo "$WEBAUTHN_DIGEST" | cut -d':' -f2 | cut -c1-12)
          TEST_CREDS_DIGEST_SHORT=$(echo "$TEST_CREDS_DIGEST" | cut -d':' -f2 | cut -c1-12)

          # Use dorny-based change detection results for cache keys (eliminating manual file hashing)
          WEB_FILES_CHANGED="${{ inputs.web-e2e-test-files-changed }}"
          ANDROID_FILES_CHANGED="${{ inputs.android-e2e-test-files-changed }}"
          SECURITY_FILES_CHANGED="${{ inputs.security-scan-files-changed }}"

          # Create cache discriminator based on image content (digests) and change detection
          WEB_CACHE_DISCRIMINATOR=$(echo "${WEB_FILES_CHANGED}-${WEBAUTHN_DIGEST_SHORT}-${TEST_CREDS_DIGEST_SHORT}" | sha256sum | cut -d' ' -f1)
          ANDROID_CACHE_DISCRIMINATOR=$(echo "${ANDROID_FILES_CHANGED}-${WEBAUTHN_DIGEST_SHORT}-${TEST_CREDS_DIGEST_SHORT}" | sha256sum | cut -d' ' -f1)
          DAST_CACHE_DISCRIMINATOR=$(echo "${SECURITY_FILES_CHANGED}-${WEBAUTHN_DIGEST_SHORT}-${TEST_CREDS_DIGEST_SHORT}" | sha256sum | cut -d' ' -f1)

          # Generate branch/event context for cache key isolation
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            CONTEXT_SUFFIX="pr-${{ github.event.pull_request.number }}"
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            CONTEXT_SUFFIX="main"
          else
            CONTEXT_SUFFIX="branch-${{ github.ref_name }}"
          fi

          # Create platform-specific cache keys with dorny-based discriminator
          WEB_CACHE_KEY="web-e2e-results-${WEB_CACHE_DISCRIMINATOR}-${CONTEXT_SUFFIX}"
          ANDROID_CACHE_KEY="android-e2e-results-${ANDROID_CACHE_DISCRIMINATOR}-${CONTEXT_SUFFIX}"
          DAST_CACHE_KEY="dast-scan-results-${DAST_CACHE_DISCRIMINATOR}-${CONTEXT_SUFFIX}"

          echo "web-key=${WEB_CACHE_KEY}" >> $GITHUB_OUTPUT
          echo "android-key=${ANDROID_CACHE_KEY}" >> $GITHUB_OUTPUT
          echo "dast-key=${DAST_CACHE_KEY}" >> $GITHUB_OUTPUT

          echo "🔑 Cache Keys Generated (Content-Based):"
          echo "  Web E2E: ${WEB_CACHE_KEY}"
          echo "  Android E2E: ${ANDROID_CACHE_KEY}"
          echo "  DAST Scan: ${DAST_CACHE_KEY}"
          echo "🏷️  Image Digests (Content-Based):"
          echo "  WebAuthn: ${WEBAUTHN_DIGEST} → ${WEBAUTHN_DIGEST_SHORT}"
          echo "  Test Creds: ${TEST_CREDS_DIGEST} → ${TEST_CREDS_DIGEST_SHORT}"
          echo "🎯 Change Detection:"
          echo "  Web E2E Files Changed: ${WEB_FILES_CHANGED}"
          echo "  Android E2E Files Changed: ${ANDROID_FILES_CHANGED}"
          echo "  Security Scan Files Changed: ${SECURITY_FILES_CHANGED}"
          echo "  Context: ${CONTEXT_SUFFIX}"

      - name: Check Web E2E cache
        id: web-cache
        uses: actions/cache@v4
        with:
          key: ${{ steps.cache-keys.outputs.web-key }}
          path: |
            web-e2e-cache/
            web-e2e-results.json
          lookup-only: true

      - name: Check Android E2E cache
        id: android-cache
        uses: actions/cache@v4
        with:
          key: ${{ steps.cache-keys.outputs.android-key }}
          path: |
            android-e2e-cache/
            android-e2e-results.json
          lookup-only: true

      - name: Check DAST scan cache
        id: dast-cache
        uses: actions/cache@v4
        with:
          key: ${{ steps.cache-keys.outputs.dast-key }}
          path: |
            dast-scan-cache/
            dast-scan-results.json
          lookup-only: true

      - name: Intelligent E2E test scope determination with component awareness
        id: determine-scope
        run: |
          echo "🔍 Analyzing component changes and force flags for intelligent E2E test orchestration..."
          echo "📋 Component Changes:"
          echo "  WebAuthn Server: ${{ inputs.webauthn-server-changed }}"
          echo "  Test Credentials Service: ${{ inputs.test-credentials-service-changed }}"
          echo "  Client Publishing Workflow: ${{ inputs.should-run-client-publishing-workflow }}"
          echo "  E2E Tests: ${{ inputs.e2e-tests-changed }}"
          echo "📋 Force Flags:"
          echo "  Force Full Pipeline: ${{ inputs.force-full-pipeline }}"
          echo "  Force Docker Build: ${{ inputs.force-docker-build }}"
          echo ""

          # Initialize variables - simplified single flag approach
          RUN_WEB="false"
          RUN_ANDROID="false"
          RUN_DAST="false"
          USE_WEB_CACHE="false"
          USE_ANDROID_CACHE="false"
          USE_DAST_CACHE="false"

          # Check if force flags require execution (overrides everything)
          if [[ "${{ inputs.force-full-pipeline }}" == "true" || "${{ inputs.force-docker-build }}" == "true" ]]; then
            RUN_WEB="true"
            RUN_ANDROID="true"
            RUN_DAST="true"
            USE_WEB_CACHE="false"    # Force fresh execution, ignore cache
            USE_ANDROID_CACHE="false"
            USE_DAST_CACHE="false"
            echo "🚀 Force flags detected - running full E2E test suite including DAST scan (ignoring cache and component logic)"
          else
            # Component-specific E2E test triggering logic
            SERVER_CHANGED="${{ inputs.webauthn-server-changed }}"
            CREDS_CHANGED="${{ inputs.test-credentials-service-changed }}"
            API_CHANGED="${{ inputs.should-run-client-publishing-workflow }}"
            E2E_CHANGED="${{ inputs.e2e-tests-changed }}"
            SECURITY_CHANGED="${{ inputs.security-scan-files-changed }}"

            # Determine which tests to run based on component changes
            if [[ "$SERVER_CHANGED" == "true" || "$CREDS_CHANGED" == "true" ]]; then
              # Server components changed: Full E2E test suite including DAST scan required
              RUN_WEB="true"
              RUN_ANDROID="true"
              RUN_DAST="true"
              echo "🔧 Server components changed - requiring full E2E test suite including DAST scan"
            elif [[ "$API_CHANGED" == "true" ]]; then
              # OpenAPI changed: Focus on client integration tests
              RUN_WEB="true"
              RUN_ANDROID="true"
              echo "🔄 OpenAPI changed - focusing on client integration validation"
            elif [[ "$E2E_CHANGED" == "true" ]]; then
              # Only E2E tests changed: Use centralized dorny/paths-filter results
              if [[ "${{ inputs.web-e2e-test-files-changed }}" == "true" ]]; then
                RUN_WEB="true"
                echo "📱 Web E2E test files changed - including web tests"
              fi
              if [[ "${{ inputs.android-e2e-test-files-changed }}" == "true" ]]; then
                RUN_ANDROID="true"
                echo "🤖 Android E2E test files changed - including Android tests"
              fi
            elif [[ "$SECURITY_CHANGED" == "true" ]]; then
              # Security scan configuration changed: Run DAST scan only
              RUN_DAST="true"
              echo "🔒 Security scan configuration changed - including DAST scan"
            else
              echo "ℹ️ No components requiring E2E tests or security scans changed"
            fi

            # Apply cache optimization (only when not forced)
            if [[ "$RUN_WEB" == "true" && "${{ steps.web-cache.outputs.cache-hit }}" == "true" ]]; then
              USE_WEB_CACHE="true"
              RUN_WEB="false"  # Use cache instead of running
              echo "💾 Web E2E cache hit - using cached results"
            fi

            if [[ "$RUN_ANDROID" == "true" && "${{ steps.android-cache.outputs.cache-hit }}" == "true" ]]; then
              USE_ANDROID_CACHE="true"
              RUN_ANDROID="false"  # Use cache instead of running
              echo "💾 Android E2E cache hit - using cached results"
            fi

            if [[ "$RUN_DAST" == "true" && "${{ steps.dast-cache.outputs.cache-hit }}" == "true" ]]; then
              USE_DAST_CACHE="true"
              RUN_DAST="false"  # Use cache instead of running
              echo "💾 DAST scan cache hit - using cached results"
            fi
          fi

          # Set outputs - simplified single flag approach
          echo "run-web-e2e=$RUN_WEB" >> $GITHUB_OUTPUT
          echo "run-android-e2e=$RUN_ANDROID" >> $GITHUB_OUTPUT
          echo "run-dast-scan=$RUN_DAST" >> $GITHUB_OUTPUT
          echo "use-web-cache=$USE_WEB_CACHE" >> $GITHUB_OUTPUT
          echo "use-android-cache=$USE_ANDROID_CACHE" >> $GITHUB_OUTPUT
          echo "use-dast-cache=$USE_DAST_CACHE" >> $GITHUB_OUTPUT

          echo ""
          echo "🎯 E2E Test Execution Plan:"
          echo "  Web E2E: $([ "$RUN_WEB" == "true" ] && echo "RUN" || ([ "$USE_WEB_CACHE" == "true" ] && echo "CACHE" || echo "SKIP"))"
          echo "  Android E2E: $([ "$RUN_ANDROID" == "true" ] && echo "RUN" || ([ "$USE_ANDROID_CACHE" == "true" ] && echo "CACHE" || echo "SKIP"))"
          echo "  DAST Scan: $([ "$RUN_DAST" == "true" ] && echo "RUN" || ([ "$USE_DAST_CACHE" == "true" ] && echo "CACHE" || echo "SKIP"))"

      - name: Validate force flag processing
        run: |
          echo "🔍 Force Flag Validation:"
          echo "  Force Full Pipeline: ${{ inputs.force-full-pipeline }}"
          echo "  Force Docker Build: ${{ inputs.force-docker-build }}"
          echo "  Web E2E Decision: ${{ steps.determine-scope.outputs.run-web-e2e }}"
          echo "  Android E2E Decision: ${{ steps.determine-scope.outputs.run-android-e2e }}"
          echo "  DAST Scan Decision: ${{ steps.determine-scope.outputs.run-dast-scan }}"
          echo "  Web Cache Decision: ${{ steps.determine-scope.outputs.use-web-cache }}"
          echo "  Android Cache Decision: ${{ steps.determine-scope.outputs.use-android-cache }}"
          echo "  DAST Cache Decision: ${{ steps.determine-scope.outputs.use-dast-cache }}"
          echo ""
          
          # Validate that force flags are properly processed
          if [[ "${{ inputs.force-full-pipeline }}" == "true" || "${{ inputs.force-docker-build }}" == "true" ]]; then
            echo "✅ Force flags detected - validating execution decisions..."
            
            # All tests should be set to RUN when force flags are active
            if [[ "${{ steps.determine-scope.outputs.run-web-e2e }}" != "true" ]]; then
              echo "❌ ERROR: Force flags set but Web E2E not enabled (expected: true, actual: ${{ steps.determine-scope.outputs.run-web-e2e }})"
              exit 1
            fi
            
            if [[ "${{ steps.determine-scope.outputs.run-android-e2e }}" != "true" ]]; then
              echo "❌ ERROR: Force flags set but Android E2E not enabled (expected: true, actual: ${{ steps.determine-scope.outputs.run-android-e2e }})"
              exit 1
            fi
            
            if [[ "${{ steps.determine-scope.outputs.run-dast-scan }}" != "true" ]]; then
              echo "❌ ERROR: Force flags set but DAST scan not enabled (expected: true, actual: ${{ steps.determine-scope.outputs.run-dast-scan }})"
              exit 1
            fi
            
            # All cache decisions should be FALSE when force flags are active
            if [[ "${{ steps.determine-scope.outputs.use-web-cache }}" != "false" ]]; then
              echo "❌ ERROR: Force flags set but Web cache not disabled (expected: false, actual: ${{ steps.determine-scope.outputs.use-web-cache }})"
              exit 1
            fi
            
            if [[ "${{ steps.determine-scope.outputs.use-android-cache }}" != "false" ]]; then
              echo "❌ ERROR: Force flags set but Android cache not disabled (expected: false, actual: ${{ steps.determine-scope.outputs.use-android-cache }})"
              exit 1
            fi
            
            if [[ "${{ steps.determine-scope.outputs.use-dast-cache }}" != "false" ]]; then
              echo "❌ ERROR: Force flags set but DAST cache not disabled (expected: false, actual: ${{ steps.determine-scope.outputs.use-dast-cache }})"
              exit 1
            fi
            
            echo "✅ Force flag validation passed - all tests will run fresh (no cache)"
          else
            echo "ℹ️ No force flags detected - using component-based logic"
          fi

      - name: Component-aware execution and cache summary
        run: |
          echo "📊 E2E Test Strategy Summary:"
          echo "📋 Component Analysis:"
          echo "  Component triggers: Server=${{ inputs.webauthn-server-changed }}, Creds=${{ inputs.test-credentials-service-changed }}, Client Publishing=${{ inputs.should-run-client-publishing-workflow }}, E2E=${{ inputs.e2e-tests-changed }}, Security=${{ inputs.security-scan-files-changed }}"
          echo ""
          echo "💾 Cache Optimization:"
          echo "  Web E2E cache hit: ${{ steps.web-cache.outputs.cache-hit }}"
          echo "  Android E2E cache hit: ${{ steps.android-cache.outputs.cache-hit }}"
          echo "  DAST scan cache hit: ${{ steps.dast-cache.outputs.cache-hit }}"
          echo ""
          echo "🏃 Final Execution Plan:"
          echo "  Web E2E: ${{ steps.determine-scope.outputs.run-web-e2e == 'true' && 'RUN' || (steps.determine-scope.outputs.use-web-cache == 'true' && 'CACHE' || 'SKIP') }}"
          echo "  Android E2E: ${{ steps.determine-scope.outputs.run-android-e2e == 'true' && 'RUN' || (steps.determine-scope.outputs.use-android-cache == 'true' && 'CACHE' || 'SKIP') }}"
          echo "  DAST Scan: ${{ steps.determine-scope.outputs.run-dast-scan == 'true' && 'RUN' || (steps.determine-scope.outputs.use-dast-cache == 'true' && 'CACHE' || 'SKIP') }}"
          echo "  Parallel Execution: ${{ (steps.determine-scope.outputs.run-web-e2e == 'true' || steps.determine-scope.outputs.run-android-e2e == 'true' || steps.determine-scope.outputs.run-dast-scan == 'true') && 'YES' || 'NO' }}"

  # Job 3: Validate Docker images are available with enhanced coordination
  validate-images:
    runs-on: ubuntu-latest
    needs: [ setup-config, analyze-e2e-requirements ]
    outputs:
      webauthn-server-ready: ${{ steps.validate-images.outputs.webauthn-server-ready }}
      test-credentials-ready: ${{ steps.validate-images.outputs.test-credentials-ready }}
      webauthn-server-image: ${{ steps.validate-images.outputs.webauthn-server-image }}
      test-credentials-image: ${{ steps.validate-images.outputs.test-credentials-image }}
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ needs.setup-config.outputs.docker-registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate Docker images with fail-fast logic
        id: validate-images
        run: |
          echo "🔍 Docker Image Validation with Fail-Fast Logic"
          echo "================================================"
          
          # Function to extract correct image tag based on event type and validate multi-line handling
          extract_image_tag() {
            local image_type="$1"
            # Read from stdin (here-string) to preserve multi-line strings correctly
            local full_output
            full_output=$(cat)
            
            echo "🔧 Processing $image_type image tags:" >&2
            echo "Full output: $full_output" >&2
            
            # Count lines to detect multi-line vs single-line tags
            local line_count=$(echo "$full_output" | wc -l)
            echo "Lines detected: $line_count" >&2
            
            local selected_tag=""
            
            if [[ $line_count -gt 1 ]]; then
              echo "📋 Multi-line tags detected, selecting based on event type..." >&2
              
              case "${{ github.event_name }}" in
                "workflow_dispatch")
                  # For workflow_dispatch on main, use SHA-based tag (typically last line)
                  selected_tag=$(echo "$full_output" | tail -n1)
                  echo "🚀 Workflow dispatch: Using SHA-based tag (last line)" >&2
                  ;;
                "pull_request")
                  # For PRs, use PR-based tag (typically first line)
                  selected_tag=$(echo "$full_output" | head -n1)
                  echo "📝 Pull request: Using PR tag (first line)" >&2
                  ;;
                "push")
                  if [[ "${{ github.ref_name }}" == "main" ]]; then
                    # For main branch push, use 'latest' tag (typically first line)
                    selected_tag=$(echo "$full_output" | head -n1)
                    echo "🌟 Main branch push: Using latest tag (first line)" >&2
                  else
                    # For feature branch push, use branch-based tag (typically first line)
                    selected_tag=$(echo "$full_output" | head -n1)
                    echo "🌿 Feature branch push: Using branch tag (first line)" >&2
                  fi
                  ;;
                *)
                  # Fallback: use first tag
                  selected_tag=$(echo "$full_output" | head -n1)
                  echo "⚠️ Unknown event type, using first tag as fallback" >&2
                  ;;
              esac
            else
              # Single line - use as-is
              selected_tag="$full_output"
              echo "📄 Single tag detected, using as-is" >&2
            fi
            
            # Clean and validate tag format - remove all whitespace including newlines and carriage returns
            selected_tag=$(echo "$selected_tag" | tr -d '\n\r' | xargs)
            
            # Validate tag format using line count check for more robust whitespace detection
            if [[ -z "$selected_tag" ]] || [[ $(echo "$selected_tag" | wc -l) -ne 1 ]]; then
              echo "❌ ERROR: Invalid tag extracted: '$selected_tag'" >&2
              return 1
            fi
            
            # Additional validation: ensure tag looks like a Docker tag
            if [[ ! "$selected_tag" =~ ^[a-zA-Z0-9._/-]+:[a-zA-Z0-9._-]+$ ]]; then
              echo "❌ ERROR: Tag format validation failed: '$selected_tag'" >&2
              echo "Expected format: registry/image:tag" >&2
              return 1
            fi
            
            echo "✅ Selected tag: $selected_tag" >&2
            echo "$selected_tag"  # This is the ONLY line that goes to stdout
          }
          
          # Extract WebAuthn Server image tag
          echo ""
          echo "🔍 Processing WebAuthn Server Image"
          echo "-----------------------------------"
          # Preserve multi-line strings by using here-string to avoid command substitution issues
          WEBAUTHN_TAG=$(echo "${{ env.WEBAUTHN_SERVER_IMAGE }}" | extract_image_tag "WebAuthn Server")
          if [[ $? -ne 0 ]]; then
            echo "❌ CRITICAL: Failed to extract WebAuthn Server image tag"
            exit 1
          fi
          
          # Extract Test Credentials image tag  
          echo ""
          echo "🔍 Processing Test Credentials Image"
          echo "------------------------------------"
          # Preserve multi-line strings by using here-string to avoid command substitution issues
          TEST_CREDENTIALS_TAG=$(echo "${{ env.TEST_CREDENTIALS_IMAGE }}" | extract_image_tag "Test Credentials")
          if [[ $? -ne 0 ]]; then
            echo "❌ CRITICAL: Failed to extract Test Credentials image tag"
            exit 1
          fi
          
          # Validate WebAuthn Server image availability
          echo ""
          echo "🔍 Validating WebAuthn Server Image Availability"
          echo "================================================"
          echo "Checking: $WEBAUTHN_TAG"
          
          if docker manifest inspect "$WEBAUTHN_TAG" > /dev/null 2>&1; then
            echo "✅ WebAuthn Server image is available and accessible"
            WEBAUTHN_AVAILABLE="true"
          else
            echo "❌ CRITICAL ERROR: WebAuthn Server image not found or not accessible"
            echo "Image tag: $WEBAUTHN_TAG" 
            echo "Registry: ${{ needs.setup-config.outputs.docker-registry }}"
            echo "Event: ${{ github.event_name }}"
            echo "Branch: ${{ github.ref_name }}"
            echo ""
            echo "🔍 Debugging information:"
            echo "Original input: ${{ env.WEBAUTHN_SERVER_IMAGE }}"
            echo "Processed tag: $WEBAUTHN_TAG"
            
            # This is a critical failure - E2E tests cannot proceed without Docker images
            echo "❌ FAILING FAST: E2E tests require valid Docker images to proceed"
            exit 1
          fi
          
          # Validate Test Credentials image availability
          echo ""
          echo "🔍 Validating Test Credentials Image Availability"
          echo "================================================"
          echo "Checking: $TEST_CREDENTIALS_TAG"
          
          if docker manifest inspect "$TEST_CREDENTIALS_TAG" > /dev/null 2>&1; then
            echo "✅ Test Credentials image is available and accessible"
            TEST_CREDENTIALS_AVAILABLE="true"
          else
            echo "❌ CRITICAL ERROR: Test Credentials image not found or not accessible"
            echo "Image tag: $TEST_CREDENTIALS_TAG"
            echo "Registry: ${{ needs.setup-config.outputs.docker-registry }}"
            echo "Event: ${{ github.event_name }}"
            echo "Branch: ${{ github.ref_name }}"
            echo ""
            echo "🔍 Debugging information:"
            echo "Original input: ${{ env.TEST_CREDENTIALS_IMAGE }}"
            echo "Processed tag: $TEST_CREDENTIALS_TAG"
            
            # This is a critical failure - E2E tests cannot proceed without Docker images
            echo "❌ FAILING FAST: E2E tests require valid Docker images to proceed"
            exit 1
          fi
          
          # Set outputs - only reached if both images are available
          echo "webauthn-server-ready=$WEBAUTHN_AVAILABLE" >> $GITHUB_OUTPUT
          echo "test-credentials-ready=$TEST_CREDENTIALS_AVAILABLE" >> $GITHUB_OUTPUT
          echo "webauthn-server-image=$WEBAUTHN_TAG" >> $GITHUB_OUTPUT
          echo "test-credentials-image=$TEST_CREDENTIALS_TAG" >> $GITHUB_OUTPUT
          
          echo ""
          echo "🎉 SUCCESS: All Docker images validated and available!"
          echo "✅ WebAuthn Server: $WEBAUTHN_TAG"
          echo "✅ Test Credentials: $TEST_CREDENTIALS_TAG"
          echo "🚀 E2E tests can proceed safely"


  # Job 4: Enhanced Web E2E tests with parallel execution optimization
  call-web-e2e-tests:
    uses: ./.github/workflows/web-e2e-tests.yml
    needs: [ setup-config, validate-images, analyze-e2e-requirements ]
    if: |
      needs.validate-images.outputs.webauthn-server-ready == 'true' &&
      needs.validate-images.outputs.test-credentials-ready == 'true' &&
      (
        needs.analyze-e2e-requirements.outputs.run-web-e2e == 'true' ||
        inputs.force-full-pipeline == 'true' ||
        inputs.force-docker-build == 'true'
      )
    secrets: inherit
    with:
      webauthn-server-image: ${{ needs.validate-images.outputs.webauthn-server-image }}
      test-credentials-image: ${{ needs.validate-images.outputs.test-credentials-image }}
      workflow-identifier: ${{ github.event.pull_request.number || github.run_number || 'main' }}
      java-version: ${{ needs.setup-config.outputs.java-version }}
      # Use actual published client library information from main orchestrator (via setup-config)
      typescript-package-name: ${{ needs.setup-config.outputs.typescript-package-name }}
      client-version: ${{ needs.setup-config.outputs.client-version }}
      should-run-client-publishing-workflow: ${{ inputs.should-run-client-publishing-workflow }}
      cache-key: ${{ needs.analyze-e2e-requirements.outputs.cache-key-web }}

  # Job 5: Enhanced Android E2E tests with parallel execution optimization
  call-android-e2e-tests:
    uses: ./.github/workflows/android-e2e-tests.yml
    needs: [ setup-config, validate-images, analyze-e2e-requirements ]
    if: |
      needs.validate-images.outputs.webauthn-server-ready == 'true' &&
      needs.validate-images.outputs.test-credentials-ready == 'true' &&
      (
        needs.analyze-e2e-requirements.outputs.run-android-e2e == 'true' ||
        inputs.force-full-pipeline == 'true' ||
        inputs.force-docker-build == 'true'
      )
    secrets: inherit
    with:
      webauthn-server-image: ${{ needs.validate-images.outputs.webauthn-server-image }}
      test-credentials-image: ${{ needs.validate-images.outputs.test-credentials-image }}
      workflow-identifier: ${{ github.event.pull_request.number || github.run_number || 'main' }}
      java-version: ${{ needs.setup-config.outputs.java-version }}
      android-api-version: ${{ needs.setup-config.outputs.android-api-version }}
      # Use actual published client library information from main orchestrator (via setup-config)
      android-package-name: ${{ needs.setup-config.outputs.android-package-name }}
      client-version: ${{ needs.setup-config.outputs.client-version }}
      should-run-client-publishing-workflow: ${{ inputs.should-run-client-publishing-workflow }}
      cache-key: ${{ needs.analyze-e2e-requirements.outputs.cache-key-android }}

  # Job 6: OWASP ZAP DAST Security Scan - Parallel with E2E tests
  call-dast-scan:
    runs-on: ubuntu-latest
    needs: [ setup-config, validate-images, analyze-e2e-requirements ]
    if: |
      needs.validate-images.outputs.webauthn-server-ready == 'true' &&
      needs.validate-images.outputs.test-credentials-ready == 'true' &&
      (
        needs.analyze-e2e-requirements.outputs.run-dast-scan == 'true' ||
        inputs.force-full-pipeline == 'true' ||
        inputs.force-docker-build == 'true'
      )
    permissions:
      issues: write          # Update issues with security findings
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ needs.setup-config.outputs.docker-registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup secure environment and start services with Docker Compose
        working-directory: webauthn-server
        env:
          # Override problematic multi-line environment variables with clean validated outputs
          WEBAUTHN_SERVER_IMAGE: ${{ needs.validate-images.outputs.webauthn-server-image }}
          TEST_CREDENTIALS_IMAGE: ${{ needs.validate-images.outputs.test-credentials-image }}
        run: |
          echo "🔐 Setting up secure environment for DAST scanning..."
          
          # Debug: Verify clean environment variables are being used
          echo "🔍 Verifying Docker image environment variables:"
          echo "WEBAUTHN_SERVER_IMAGE: $WEBAUTHN_SERVER_IMAGE"
          echo "TEST_CREDENTIALS_IMAGE: $TEST_CREDENTIALS_IMAGE"
          
          # Validate image names don't contain newlines (critical for multi-line tag issue)
          if echo "$WEBAUTHN_SERVER_IMAGE" | grep -q $'\n'; then
            echo "❌ ERROR: WEBAUTHN_SERVER_IMAGE contains newlines!"
            exit 1
          fi
          
          if echo "$TEST_CREDENTIALS_IMAGE" | grep -q $'\n'; then
            echo "❌ ERROR: TEST_CREDENTIALS_IMAGE contains newlines!"
            exit 1
          fi
          
          echo "✅ Environment variables are clean (no newlines detected)"

          # Use existing secure environment setup script
          chmod +x setup-secure-env.sh
          ./setup-secure-env.sh

          # Override Docker images to use the built ones for this PR/workflow
          cat >> .env << EOF

          # Override with validated Docker images for DAST scanning
          WEBAUTHN_SERVER_IMAGE=${{ needs.validate-images.outputs.webauthn-server-image }}
          TEST_CREDENTIALS_IMAGE=${{ needs.validate-images.outputs.test-credentials-image }}
          EOF

          # Create docker compose override for DAST scanning
          cat > docker-compose.dast-override.yml << 'EOF'
          services:
            webauthn-server:
              image: ${WEBAUTHN_SERVER_IMAGE}
              # Remove build directive to use pre-built image
              build: null

            webauthn-test-credentials-service:
              image: ${TEST_CREDENTIALS_IMAGE}
              # Remove build directive to use pre-built image
              build: null
          EOF

          echo "🚀 Starting services with secure Docker Compose setup..."

          # Start services using existing docker compose with override
          docker compose -f docker-compose.yml -f docker-compose.dast-override.yml up -d

          # Wait for services to be ready using existing health checks
          echo "⏳ Waiting for services to be ready..."
          for i in {1..60}; do
            if docker compose -f docker-compose.yml -f docker-compose.dast-override.yml ps | grep -q "(healthy)" ; then
              echo "✅ Services are healthy and ready for DAST scanning"
              break
            fi
            echo "Waiting for health checks... ($i/60)"
            sleep 3
          done

          # Verify services are accessible
          timeout 120 bash -c '
            while ! curl -s http://localhost:8080/health > /dev/null 2>&1; do
              echo "⏳ Waiting for WebAuthn server..."
              sleep 2
            done
          '

          timeout 120 bash -c '
            while ! curl -s http://localhost:8081/health > /dev/null 2>&1; do
              echo "⏳ Waiting for Test Credentials service..."
              sleep 2
            done
          '
          echo "✅ All services ready for DAST scanning"

      - name: Run OWASP ZAP Full Scan - WebAuthn Server
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: 'http://localhost:8080'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          artifact_name: 'zap-full-scan-webauthn-server'
        continue-on-error: true

      - name: Run OWASP ZAP Baseline Scan - Test Service
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://localhost:8081'
          rules_file_name: '.zap/rules.tsv'
          artifact_name: 'zap-baseline-scan-webauthn-test-credentials-service'
        continue-on-error: true

      - name: Cleanup Docker services
        if: always()
        working-directory: webauthn-server
        run: |
          echo "🧹 Cleaning up Docker Compose services..."
          docker compose -f docker-compose.yml -f docker-compose.dast-override.yml down -v || true

          # Clean up override file
          rm -f docker-compose.dast-override.yml || true

  # Job 7: Handle cached Web E2E results with enhanced component awareness
  web-e2e-cached:
    runs-on: ubuntu-latest
    needs: [ analyze-e2e-requirements ]
    if: |
      needs.analyze-e2e-requirements.outputs.use-web-cache == 'true' &&
      inputs.force-full-pipeline != 'true' &&
      inputs.force-docker-build != 'true'
    outputs:
      tests-passed: "true"
      artifact-name: "web-e2e-cached-results"
    steps:
      - name: Restore cached Web E2E results
        uses: actions/cache@v4
        with:
          key: ${{ needs.analyze-e2e-requirements.outputs.cache-key-web }}
          path: |
            web-e2e-cache/
            web-e2e-results.json
          fail-on-cache-miss: true

      - name: Report cached results
        run: |
          echo "✅ Web E2E tests skipped - using cached results"
          echo "Cache key: ${{ needs.analyze-e2e-requirements.outputs.cache-key-web }}"
          echo "Previous test run was successful for identical conditions"
          if [ -f web-e2e-results.json ]; then
            echo "📊 Cached test results available"
            cat web-e2e-results.json || echo "{\"status\": \"cached\", \"tests_passed\": true}"
          fi

  # Job 7: Handle cached Android E2E results with enhanced component awareness
  android-e2e-cached:
    runs-on: ubuntu-latest
    needs: [ analyze-e2e-requirements ]
    if: |
      needs.analyze-e2e-requirements.outputs.use-android-cache == 'true' &&
      inputs.force-full-pipeline != 'true' &&
      inputs.force-docker-build != 'true'
    outputs:
      tests-passed: "true"
      artifact-name: "android-e2e-cached-results"
    steps:
      - name: Restore cached Android E2E results
        uses: actions/cache@v4
        with:
          key: ${{ needs.analyze-e2e-requirements.outputs.cache-key-android }}
          path: |
            android-e2e-cache/
            android-e2e-results.json
          fail-on-cache-miss: true

      - name: Report cached results
        run: |
          echo "✅ Android E2E tests skipped - using cached results"
          echo "Cache key: ${{ needs.analyze-e2e-requirements.outputs.cache-key-android }}"
          echo "Previous test run was successful for identical conditions"
          if [ -f android-e2e-results.json ]; then
            echo "📊 Cached test results available"
            cat android-e2e-results.json || echo "{\"status\": \"cached\", \"tests_passed\": true}"
          fi

  # Job 8: Handle cached DAST scan results
  dast-scan-cached:
    runs-on: ubuntu-latest
    needs: [ analyze-e2e-requirements ]
    if: |
      needs.analyze-e2e-requirements.outputs.use-dast-cache == 'true' &&
      inputs.force-full-pipeline != 'true' &&
      inputs.force-docker-build != 'true'
    outputs:
      tests-passed: "true"
      artifact-name: "dast-scan-cached-results"
    steps:
      - name: Restore cached DAST scan results
        uses: actions/cache@v4
        with:
          key: ${{ needs.analyze-e2e-requirements.outputs.cache-key-dast }}
          path: |
            dast-scan-cache/
            dast-scan-results.json
          fail-on-cache-miss: true

      - name: Report cached results
        run: |
          echo "✅ DAST scan skipped - using cached results"
          echo "Cache key: ${{ needs.analyze-e2e-requirements.outputs.cache-key-dast }}"
          echo "Previous DAST scan was successful for identical conditions"
          if [ -f dast-scan-results.json ]; then
            echo "📊 Cached DAST results available"
            cat dast-scan-results.json || echo "{\"status\": \"cached\", \"tests_passed\": true}"
          fi

  # Job 9: Cross-platform coordination analysis
  analyze-cross-platform-results:
    runs-on: ubuntu-latest
    needs: [ analyze-e2e-requirements, call-web-e2e-tests, call-android-e2e-tests, call-dast-scan, web-e2e-cached, android-e2e-cached, dast-scan-cached ]
    if: always()
    outputs:
      overall-success: ${{ steps.analyze.outputs.overall-success }}
      parallel-execution: ${{ steps.analyze.outputs.parallel-execution }}
      performance-summary: ${{ steps.analyze.outputs.performance-summary }}
    steps:
      - name: Analyze cross-platform E2E test coordination
        id: analyze
        run: |
          echo "📊 Analyzing cross-platform E2E test coordination results..."
          echo "📋 Execution Analysis:"
          echo ""

          # Determine if tests ran in parallel
          WEB_EXECUTED="false"
          ANDROID_EXECUTED="false"
          DAST_EXECUTED="false"
          PARALLEL_EXECUTION="false"

          if [[ "${{ needs.call-web-e2e-tests.result }}" == "success" ]] || [[ "${{ needs.web-e2e-cached.result }}" == "success" ]]; then
            WEB_EXECUTED="true"
          fi

          if [[ "${{ needs.call-android-e2e-tests.result }}" == "success" ]] || [[ "${{ needs.android-e2e-cached.result }}" == "success" ]]; then
            ANDROID_EXECUTED="true"
          fi

          if [[ "${{ needs.call-dast-scan.result }}" == "success" ]] || [[ "${{ needs.dast-scan-cached.result }}" == "success" ]]; then
            DAST_EXECUTED="true"
          fi

          # Check for parallel execution (any two or more jobs executed)
          EXECUTED_COUNT=0
          if [[ "$WEB_EXECUTED" == "true" ]]; then
            EXECUTED_COUNT=$((EXECUTED_COUNT + 1))
          fi

          if [[ "$ANDROID_EXECUTED" == "true" ]]; then
            EXECUTED_COUNT=$((EXECUTED_COUNT + 1))
          fi

          if [[ "$DAST_EXECUTED" == "true" ]]; then
            EXECUTED_COUNT=$((EXECUTED_COUNT + 1))
          fi

          if [[ $EXECUTED_COUNT -gt 1 ]]; then
            PARALLEL_EXECUTION="true"
            echo "⚙️ Parallel execution achieved across multiple test types"
          elif [[ $EXECUTED_COUNT -eq 1 ]]; then
            echo "🎯 Single test type execution (optimized)"
          else
            echo "⚠️ No tests or scans executed"
          fi

          # Overall success determination
          OVERALL_SUCCESS="true"
          if [[ "${{ needs.call-web-e2e-tests.result }}" == "failure" ]] || [[ "${{ needs.call-android-e2e-tests.result }}" == "failure" ]] || [[ "${{ needs.call-dast-scan.result }}" == "failure" ]]; then
            OVERALL_SUCCESS="false"
          fi

          # Performance summary
          PERFORMANCE_SUMMARY="{"
          PERFORMANCE_SUMMARY="$PERFORMANCE_SUMMARY\"web_executed\": $WEB_EXECUTED,"
          PERFORMANCE_SUMMARY="$PERFORMANCE_SUMMARY\"android_executed\": $ANDROID_EXECUTED,"
          PERFORMANCE_SUMMARY="$PERFORMANCE_SUMMARY\"dast_executed\": $DAST_EXECUTED,"
          PERFORMANCE_SUMMARY="$PERFORMANCE_SUMMARY\"parallel_execution\": $PARALLEL_EXECUTION"
          PERFORMANCE_SUMMARY="$PERFORMANCE_SUMMARY}"

          echo "overall-success=$OVERALL_SUCCESS" >> $GITHUB_OUTPUT
          echo "parallel-execution=$PARALLEL_EXECUTION" >> $GITHUB_OUTPUT
          echo "performance-summary=$PERFORMANCE_SUMMARY" >> $GITHUB_OUTPUT

          echo ""
          echo "✅ Cross-Platform Coordination Analysis:"
          echo "  Overall Success: $OVERALL_SUCCESS"
          echo "  Parallel Execution: $PARALLEL_EXECUTION"
          echo "  Web Platform: $WEB_EXECUTED"
          echo "  Android Platform: $ANDROID_EXECUTED"
          echo "  DAST Security Scan: $DAST_EXECUTED"

  # Job 9: Enhanced E2E test results reporting with component analysis
  report-results:
    runs-on: ubuntu-latest
    needs: [ validate-images, analyze-cross-platform-results, call-web-e2e-tests, call-android-e2e-tests, call-dast-scan, web-e2e-cached, android-e2e-cached, dast-scan-cached ]
    if: always() && github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enhanced PR comment with component-aware E2E results
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          VALIDATION_RESULT: ${{ needs.validate-images.result }}
          WEB_E2E_RESULT: ${{ needs.call-web-e2e-tests.result }}
          ANDROID_E2E_RESULT: ${{ needs.call-android-e2e-tests.result }}
          WEB_TESTS_PASSED: ${{ needs.call-web-e2e-tests.outputs.tests-passed }}
          ANDROID_TESTS_PASSED: ${{ needs.call-android-e2e-tests.outputs.tests-passed }}
          WEB_ARTIFACT_NAME: ${{ needs.call-web-e2e-tests.outputs.artifact-name }}
          ANDROID_ARTIFACT_NAME: ${{ needs.call-android-e2e-tests.outputs.artifact-name }}
          WEBAUTHN_SERVER_IMAGE: ${{ env.WEBAUTHN_SERVER_IMAGE }}
          TEST_CREDENTIALS_IMAGE: ${{ env.TEST_CREDENTIALS_IMAGE }}
          # Enhanced component analysis data
          OVERALL_SUCCESS: ${{ needs.analyze-cross-platform-results.outputs.overall-success }}
          PARALLEL_EXECUTION: ${{ needs.analyze-cross-platform-results.outputs.parallel-execution }}
          PERFORMANCE_SUMMARY: ${{ needs.analyze-cross-platform-results.outputs.performance-summary }}
        run: |
          echo "📢 Creating enhanced E2E results comment with component analysis..."
          echo "📋 Enhanced Results Data:"
          echo "  Overall Success: $OVERALL_SUCCESS"
          echo "  Parallel Execution: $PARALLEL_EXECUTION"
          echo "  Performance Summary: $PERFORMANCE_SUMMARY"

          chmod +x scripts/ci/create-e2e-results-comment.cjs
          node scripts/ci/create-e2e-results-comment.cjs

# Docker Build and Push Callable Workflow
#
# This callable workflow handles the Docker image build and push lifecycle:
# 1. Build Docker images for both services (once)
# 2. Push images to registry for E2E testing and security scanning
# 3. Generate provenance attestations for supply chain security
#
# DESIGN PRINCIPLES:
# - Speed-optimized: Images are pushed immediately after build for parallel processing
# - Efficiency: Single job eliminates redundant builds (3x ‚Üí 1x performance improvement)
# - Caching optimization: Leverages GitHub Actions cache and Gradle build cache
# - Parallel execution: Builds multiple images concurrently for performance
# - Attestation: Generates provenance attestations for supply chain security
#
# PERFORMANCE IMPROVEMENTS:
# - Eliminates 3x redundant JAR builds (build ‚Üí scan ‚Üí push)
# - Eliminates 3x redundant Docker image builds
# - Single runner reduces context switching and setup overhead
# - Security scanning moved to parallel workflow for optimal performance
#
# INPUTS:
#   webauthn-docker-changes-detected: Whether Webauthn Server Docker-related changes were detected
#   test-credentials-docker-changes-detected: Whether Test Credentials Docker-related changes were detected
#   force-build: Force Docker build regardless of change detection (for UI force options)
#   image-tag-base: Base tag for Docker images (e.g., 'pr-123', 'latest')
#   registry-config: Docker registry configuration
#   java-version: Java version for JAR builds
#
# OUTPUTS:
#   images-built: Whether Docker images were successfully built
#   images-pushed: Whether images were pushed to registry
#   webauthn-server-image: WebAuthn server image tag
#   test-credentials-image: Test credentials service image tag

name: Docker Build and Push

on:
  workflow_call:
    inputs:
      webauthn-docker-changes-detected:
        description: 'Whether Webauthn Server Docker-related changes were detected'
        required: true
        type: boolean
      test-credentials-docker-changes-detected:
        description: 'Whether Test Credentials Docker-related changes were detected'
        required: true
        type: boolean
      force-build:
        description: 'Force Docker build regardless of change detection'
        required: false
        type: boolean
        default: false
      image-tag-base:
        description: 'Base tag for Docker images'
        required: false
        type: string
        default: 'latest'
      java-version:
        description: 'Java version for JAR builds'
        required: false
        type: string
        default: '21'
      registry-url:
        description: 'Docker registry URL'
        required: false
        type: string
        default: 'ghcr.io'
      webauthn-image-name:
        description: 'WebAuthn server image name'
        required: false
        type: string
        default: 'hitoshura25/webauthn-server'
      test-credentials-image-name:
        description: 'Test credentials service image name'
        required: false
        type: string
        default: 'hitoshura25/webauthn-test-credentials-service'
    outputs:
      images-built:
        description: 'Whether Docker images were successfully built'
        value: ${{ jobs.build-push-docker-images.outputs.images-built }}
      images-pushed:
        description: 'Whether images were pushed to registry'
        value: ${{ jobs.build-push-docker-images.outputs.images-pushed }}
      webauthn-server-image:
        description: 'WebAuthn server Docker image tag'
        value: ${{ jobs.build-push-docker-images.outputs.webauthn-server-image }}
      webauthn-server-digest:
        description: 'WebAuthn server image digest'
        value: ${{ jobs.build-push-docker-images.outputs.webauthn-server-digest }}
      test-credentials-image:
        description: 'Test credentials service Docker image tag'
        value: ${{ jobs.build-push-docker-images.outputs.test-credentials-image }}
      test-credentials-digest:
        description: 'Test credentials service image digest'
        value: ${{ jobs.build-push-docker-images.outputs.test-credentials-digest }}
      webauthn-context-tag:
        description: 'WebAuthn server explicit SHA context tag for precise cleanup targeting'
        value: ${{ jobs.build-push-docker-images.outputs.webauthn-context-tag }}
      test-credentials-context-tag:
        description: 'Test credentials service explicit SHA context tag for precise cleanup targeting'
        value: ${{ jobs.build-push-docker-images.outputs.test-credentials-context-tag }}

env:
  JAVA_VERSION: ${{ inputs.java-version }}
  DOCKER_REGISTRY: ${{ inputs.registry-url }}
  DOCKER_IMAGE_NAME: ${{ inputs.webauthn-image-name }}
  DOCKER_TEST_CREDENTIALS_IMAGE_NAME: ${{ inputs.test-credentials-image-name }}

jobs:
  # Single consolidated job: Build and push Docker images
  build-push-docker-images:
    runs-on: ubuntu-latest
    if: |
      inputs.force-build == true ||
      inputs.webauthn-docker-changes-detected == true ||
      inputs.test-credentials-docker-changes-detected == true
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    outputs:
      images-built: ${{ steps.build-status.outputs.images-built }}
      images-pushed: ${{ steps.push-status.outputs.images-pushed }}
      webauthn-server-image: ${{ steps.docker-meta.outputs.tags }}
      webauthn-server-digest: ${{ steps.docker-push.outputs.digest }}
      test-credentials-image: ${{ steps.docker-test-credentials-meta.outputs.tags }}
      test-credentials-digest: ${{ steps.docker-test-credentials-push.outputs.digest }}
      webauthn-context-tag: ${{ steps.webauthn-sha-tagging.outputs.webauthn-context-tag }}
      test-credentials-context-tag: ${{ steps.test-credentials-sha-tagging.outputs.test-credentials-context-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      # Consolidated Gradle caching for all operations
      - name: Setup Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle/configuration-cache
          key: gradle-docker-build-${{ runner.os }}-${{ github.ref_name }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-docker-build-${{ runner.os }}-${{ github.ref_name }}-
            gradle-docker-build-${{ runner.os }}-main-
            gradle-docker-build-${{ runner.os }}-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
          build-scan-publish: true
          build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
          build-scan-terms-of-use-agree: "yes"
          # Disable built-in cache since we're managing it manually
          cache-disabled: true

      # STEP 0: Detect build strategy
      - name: Detect Docker build strategy
        run: |
          echo "üîç Docker Build Strategy Analysis:"
          echo "  Force build: ${{ inputs.force-build }}"
          echo "  WebAuthn changes detected: ${{ inputs.webauthn-docker-changes-detected }}"
          echo "  Test credentials changes detected: ${{ inputs.test-credentials-docker-changes-detected }}"
          echo ""

          if [[ "${{ inputs.force-build }}" == "true" ]]; then
            echo "üöÄ FORCE BUILD MODE: Building all images regardless of change detection"
          elif [[ "${{ inputs.webauthn-docker-changes-detected }}" == "true" || "${{ inputs.test-credentials-docker-changes-detected }}" == "true" ]]; then
            echo "üìù CHANGE-BASED BUILD: Building images based on detected changes"
          else
            echo "‚ö†Ô∏è UNEXPECTED: No changes detected and no force build (this step should not run)"
          fi
          echo ""

      # STEP 1: Build JAR files (once)
      - name: Build JAR files for Docker images
        shell: bash
        run: |
          echo "üîß Building JAR files for Docker images (single build for all operations)..."
          ./gradlew :webauthn-server:shadowJar :webauthn-test-credentials-service:shadowJar --build-cache --parallel --configuration-cache

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # STEP 2: Generate Docker metadata
      - name: Docker meta
        id: docker-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=pr

      - name: Docker Test Credentials meta
        id: docker-test-credentials-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_TEST_CREDENTIALS_IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=pr

      # STEP 3: Build Docker images locally (for scanning)
      - name: Build Docker images locally
        run: |
          echo "üê≥ Building Docker images locally for security scanning..."

          # Build WebAuthn Server image
          docker build -t "${{ steps.docker-meta.outputs.tags }}" ./webauthn-server

          # Build Test Credentials Service image
          docker build -t "${{ steps.docker-test-credentials-meta.outputs.tags }}" ./webauthn-test-credentials-service

          echo "‚úÖ Docker images built successfully"

      - name: Set build status
        id: build-status
        run: echo "images-built=true" >> $GITHUB_OUTPUT

      # STEP 4: Push to registry (security scanning moved to parallel workflow)

      - name: Push WebAuthn Server to registry
        id: docker-push
        uses: docker/build-push-action@v6
        with:
          context: ./webauthn-server
          push: true
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      # STEP 4A: Create explicit SHA tags with PR/branch context for precise cleanup targeting
      #      - name: Create explicit SHA tags for WebAuthn Server
      #        if: steps.docker-push.outcome == 'success'
      #        run: |
      #          echo "üè∑Ô∏è Creating explicit SHA tags with PR/branch context for precise cleanup targeting..."
      #
      #          # Extract short SHA from image digest
      #          DIGEST="${{ steps.docker-push.outputs.digest }}"
      #          SHORT_SHA=$(echo "$DIGEST" | cut -c8-15)
      #          echo "üìã WebAuthn Server Digest: $DIGEST"
      #          echo "üìã Short SHA: $SHORT_SHA"
      #
      #          # Determine context tag based on GitHub event
      #          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
      #            CONTEXT_TAG="sha256-${SHORT_SHA}-pr-${{ github.event.pull_request.number }}"
      #            echo "üéØ PR Context: Creating tag $CONTEXT_TAG"
      #          elif [[ "${{ github.ref_name }}" == "main" ]]; then
      #            CONTEXT_TAG="sha256-${SHORT_SHA}-main-${{ github.run_number }}"
      #            echo "üéØ Main Branch Context: Creating tag $CONTEXT_TAG"
      #          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
      #            CONTEXT_TAG="sha256-${SHORT_SHA}-manual-$(date +%s)"
      #            echo "üéØ Manual Trigger Context: Creating tag $CONTEXT_TAG"
      #          else
      #            CONTEXT_TAG="sha256-${SHORT_SHA}-branch-${{ github.ref_name }}-${{ github.run_number }}"
      #            echo "üéØ Branch Context: Creating tag $CONTEXT_TAG"
      #          fi
      #
      #          # Get the full image name from the existing tags
      #          FULL_IMAGE_NAME="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}"
      #
      #          # Tag the image with the context-specific SHA tag
      #          echo "üè∑Ô∏è Tagging image with explicit SHA tag: $FULL_IMAGE_NAME:$CONTEXT_TAG"
      #          docker buildx imagetools create "$FULL_IMAGE_NAME@$DIGEST" --tag "$FULL_IMAGE_NAME:$CONTEXT_TAG"
      #
      #          echo "‚úÖ Explicit SHA tag created successfully"
      #          echo "üìã Tag: $CONTEXT_TAG"
      #          echo "üîó Full tag: $FULL_IMAGE_NAME:$CONTEXT_TAG"
      #
      #          # Store context tag for cleanup script reference
      #          echo "webauthn-context-tag=$CONTEXT_TAG" >> $GITHUB_OUTPUT
      #        id: webauthn-sha-tagging
      #
      - name: Generate artifact attestation for WebAuthn Server
        id: webauthn-attestation
        if: steps.docker-push.outcome == 'success'
        uses: actions/attest-build-provenance@v2
        continue-on-error: true  # Don't fail build on GitHub attestation service issues
        with:
          subject-name: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
          subject-digest: ${{ steps.docker-push.outputs.digest }}
          push-to-registry: true
        env:
          ACTIONS_STEP_DEBUG: true
      #
      #      # STEP 4A2: Tag any attestation-generated digests for WebAuthn Server
      #      - name: Tag attestation-generated digests for WebAuthn Server
      #        if: steps.webauthn-attestation.outcome == 'success' && steps.webauthn-sha-tagging.outcome == 'success'
      #        run: |
      #          echo "üè∑Ô∏è Checking for additional attestation-generated digests for WebAuthn Server..."
      #
      #          FULL_IMAGE_NAME="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}"
      #          PRIMARY_DIGEST="${{ steps.docker-push.outputs.digest }}"
      #
      #          # Wait a moment for attestation to complete and registry to update
      #          sleep 5
      #
      #          echo "üîç Using GitHub API to find all digests for WebAuthn Server..."
      #
      #          # Use GitHub API to get all package versions for this repository
      #          if gh api "/users/${{ github.repository_owner }}/packages/container/webauthn-server/versions" --silent > /tmp/webauthn_versions.json 2>/dev/null; then
      #            echo "‚úÖ Successfully retrieved package versions from GitHub API"
      #
      #            # Find digests that are not tagged with PR context but should be
      #            UNTAGGED_DIGESTS=$(jq -r '
      #              .[] |
      #              select(
      #                (.metadata.container.tags | length == 0) or
      #                (.metadata.container.tags | map(test("^sha256-[a-f0-9]+-pr-")) | any | not)
      #              ) |
      #              select(.name | test("^sha256:[a-f0-9]{64}$")) |
      #              .name' /tmp/webauthn_versions.json 2>/dev/null || echo "")
      #
      #            if [[ -n "$UNTAGGED_DIGESTS" ]]; then
      #              echo "üîç Found untagged digests (likely from attestation):"
      #              echo "$UNTAGGED_DIGESTS"
      #
      #              # Tag each untagged digest with PR context
      #              echo "$UNTAGGED_DIGESTS" | while IFS= read -r digest; do
      #                if [[ -n "$digest" && "$digest" != "$PRIMARY_DIGEST" ]]; then
      #                  SHORT_SHA=$(echo "$digest" | cut -c8-15)
      #                  ADDITIONAL_CONTEXT_TAG="sha256-${SHORT_SHA}-pr-${{ github.event.pull_request.number || 'latest' }}"
      #
      #                  echo "üè∑Ô∏è Tagging attestation digest: $digest"
      #                  echo "üè∑Ô∏è Context tag: $ADDITIONAL_CONTEXT_TAG"
      #
      #                  # Tag the attestation digest
      #                  if docker buildx imagetools create "$FULL_IMAGE_NAME@$digest" --tag "$FULL_IMAGE_NAME:$ADDITIONAL_CONTEXT_TAG" 2>/dev/null; then
      #                    echo "‚úÖ Successfully tagged attestation digest: $ADDITIONAL_CONTEXT_TAG"
      #                  else
      #                    echo "‚ö†Ô∏è Failed to tag attestation digest: $digest (continuing...)"
      #                  fi
      #                fi
      #              done
      #            else
      #              echo "‚ÑπÔ∏è No untagged digests found - all digests already have PR context"
      #            fi
      #
      #            rm -f /tmp/webauthn_versions.json
      #          else
      #            echo "‚ö†Ô∏è Could not retrieve package versions from GitHub API"
      #          fi
      #
      #          echo "‚úÖ WebAuthn Server attestation digest tagging completed"

      - name: Push Test Credentials Service to registry
        id: docker-test-credentials-push
        uses: docker/build-push-action@v6
        with:
          context: ./webauthn-test-credentials-service
          push: true
          tags: ${{ steps.docker-test-credentials-meta.outputs.tags }}
          labels: ${{ steps.docker-test-credentials-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      # STEP 4B: Create explicit SHA tags for Test Credentials Service
      #      - name: Create explicit SHA tags for Test Credentials Service
      #        if: steps.docker-test-credentials-push.outcome == 'success'
      #        run: |
      #          echo "üè∑Ô∏è Creating explicit SHA tags with PR/branch context for Test Credentials Service..."
      #
      #          # Extract short SHA from image digest
      #          DIGEST="${{ steps.docker-test-credentials-push.outputs.digest }}"
      #          SHORT_SHA=$(echo "$DIGEST" | cut -c8-15)
      #          echo "üìã Test Credentials Digest: $DIGEST"
      #          echo "üìã Short SHA: $SHORT_SHA"
      #
      #          # Determine context tag based on GitHub event (same logic as WebAuthn Server)
      #          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
      #            CONTEXT_TAG="sha256-${SHORT_SHA}-pr-${{ github.event.pull_request.number }}"
      #            echo "üéØ PR Context: Creating tag $CONTEXT_TAG"
      #          elif [[ "${{ github.ref_name }}" == "main" ]]; then
      #            CONTEXT_TAG="sha256-${SHORT_SHA}-main-${{ github.run_number }}"
      #            echo "üéØ Main Branch Context: Creating tag $CONTEXT_TAG"
      #          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
      #            CONTEXT_TAG="sha256-${SHORT_SHA}-manual-$(date +%s)"
      #            echo "üéØ Manual Trigger Context: Creating tag $CONTEXT_TAG"
      #          else
      #            CONTEXT_TAG="sha256-${SHORT_SHA}-branch-${{ github.ref_name }}-${{ github.run_number }}"
      #            echo "üéØ Branch Context: Creating tag $CONTEXT_TAG"
      #          fi
      #
      #          # Get the full image name from the existing tags
      #          FULL_IMAGE_NAME="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_TEST_CREDENTIALS_IMAGE_NAME }}"
      #
      #          # Tag the image with the context-specific SHA tag
      #          echo "üè∑Ô∏è Tagging image with explicit SHA tag: $FULL_IMAGE_NAME:$CONTEXT_TAG"
      #          docker buildx imagetools create "$FULL_IMAGE_NAME@$DIGEST" --tag "$FULL_IMAGE_NAME:$CONTEXT_TAG"
      #
      #          echo "‚úÖ Explicit SHA tag created successfully"
      #          echo "üìã Tag: $CONTEXT_TAG"
      #          echo "üîó Full tag: $FULL_IMAGE_NAME:$CONTEXT_TAG"
      #
      #          # Store context tag for cleanup script reference
      #          echo "test-credentials-context-tag=$CONTEXT_TAG" >> $GITHUB_OUTPUT
      #        id: test-credentials-sha-tagging
      #
      - name: Generate artifact attestation for Test Credentials Service
        id: test-credentials-attestation
        if: steps.docker-test-credentials-push.outcome == 'success'
        uses: actions/attest-build-provenance@v2
        continue-on-error: true  # Don't fail build on GitHub attestation service issues
        with:
          subject-name: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_TEST_CREDENTIALS_IMAGE_NAME }}
          subject-digest: ${{ steps.docker-test-credentials-push.outputs.digest }}
          push-to-registry: true
        env:
          ACTIONS_STEP_DEBUG: true
      #
      #      # STEP 4B2: Tag any attestation-generated digests for Test Credentials Service
      #      - name: Tag attestation-generated digests for Test Credentials Service
      #        if: steps.test-credentials-attestation.outcome == 'success' && steps.test-credentials-sha-tagging.outcome == 'success'
      #        run: |
      #          echo "üè∑Ô∏è Checking for additional attestation-generated digests for Test Credentials Service..."
      #
      #          FULL_IMAGE_NAME="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_TEST_CREDENTIALS_IMAGE_NAME }}"
      #          PRIMARY_DIGEST="${{ steps.docker-test-credentials-push.outputs.digest }}"
      #
      #          # Wait a moment for attestation to complete and registry to update
      #          sleep 5
      #
      #          echo "üîç Using GitHub API to find all digests for Test Credentials Service..."
      #
      #          # Use GitHub API to get all package versions for this repository
      #          if gh api "/users/${{ github.repository_owner }}/packages/container/webauthn-test-credentials-service/versions" --silent > /tmp/test_credentials_versions.json 2>/dev/null; then
      #            echo "‚úÖ Successfully retrieved package versions from GitHub API"
      #
      #            # Find digests that are not tagged with PR context but should be
      #            UNTAGGED_DIGESTS=$(jq -r '
      #              .[] |
      #              select(
      #                (.metadata.container.tags | length == 0) or
      #                (.metadata.container.tags | map(test("^sha256-[a-f0-9]+-pr-")) | any | not)
      #              ) |
      #              select(.name | test("^sha256:[a-f0-9]{64}$")) |
      #              .name' /tmp/test_credentials_versions.json 2>/dev/null || echo "")
      #
      #            if [[ -n "$UNTAGGED_DIGESTS" ]]; then
      #              echo "üîç Found untagged digests (likely from attestation):"
      #              echo "$UNTAGGED_DIGESTS"
      #
      #              # Tag each untagged digest with PR context
      #              echo "$UNTAGGED_DIGESTS" | while IFS= read -r digest; do
      #                if [[ -n "$digest" && "$digest" != "$PRIMARY_DIGEST" ]]; then
      #                  SHORT_SHA=$(echo "$digest" | cut -c8-15)
      #                  ADDITIONAL_CONTEXT_TAG="sha256-${SHORT_SHA}-pr-${{ github.event.pull_request.number || 'latest' }}"
      #
      #                  echo "üè∑Ô∏è Tagging attestation digest: $digest"
      #                  echo "üè∑Ô∏è Context tag: $ADDITIONAL_CONTEXT_TAG"
      #
      #                  # Tag the attestation digest
      #                  if docker buildx imagetools create "$FULL_IMAGE_NAME@$digest" --tag "$FULL_IMAGE_NAME:$ADDITIONAL_CONTEXT_TAG" 2>/dev/null; then
      #                    echo "‚úÖ Successfully tagged attestation digest: $ADDITIONAL_CONTEXT_TAG"
      #                  else
      #                    echo "‚ö†Ô∏è Failed to tag attestation digest: $digest (continuing...)"
      #                  fi
      #                fi
      #              done
      #            else
      #              echo "‚ÑπÔ∏è No untagged digests found - all digests already have PR context"
      #            fi
      #
      #            rm -f /tmp/test_credentials_versions.json
      #          else
      #            echo "‚ö†Ô∏è Could not retrieve package versions from GitHub API"
      #          fi
      #
      #          echo "‚úÖ Test Credentials Service attestation digest tagging completed"

      - name: Set push status
        id: push-status
        run: |
          if [[ "${{ steps.docker-push.outcome }}" == "success" && "${{ steps.docker-test-credentials-push.outcome }}" == "success" ]]; then
            echo "images-pushed=true" >> $GITHUB_OUTPUT
          else
            echo "images-pushed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Docker build manifest for post-processing
        if: steps.push-status.outputs.images-pushed == 'true'
        run: |
          mkdir -p docker-build-info
          echo "docker_images_built=true" > docker-build-info/build-manifest.txt
          echo "build_timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> docker-build-info/build-manifest.txt
          echo "webauthn_server_digest=${{ steps.docker-push.outputs.digest }}" >> docker-build-info/build-manifest.txt
          echo "test_credentials_digest=${{ steps.docker-test-credentials-push.outputs.digest }}" >> docker-build-info/build-manifest.txt
          echo "github_run_id=${{ github.run_id }}" >> docker-build-info/build-manifest.txt

      - name: Upload Docker build manifest
        if: steps.push-status.outputs.images-pushed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-manifest
          path: docker-build-info/build-manifest.txt
          retention-days: 1

      # Final summary
      - name: Build and push summary
        run: |
          echo "üéØ Docker Build and Push Summary:"
          echo "  üîß Single Job Execution: Eliminated 3x redundant builds"
          echo "  üì¶ WebAuthn Server: ${{ steps.docker-meta.outputs.tags }}"
          if [[ "${{ steps.docker-push.outputs.digest }}" != "" ]]; then
            echo "    üîç Digest: ${{ steps.docker-push.outputs.digest }}"
          fi
          #          if [[ "${{ steps.webauthn-sha-tagging.outputs.webauthn-context-tag }}" != "" ]]; then
          #            echo "    üè∑Ô∏è  Context Tag: ${{ steps.webauthn-sha-tagging.outputs.webauthn-context-tag }}"
          #          fi
          #          echo "  üì¶ Test Credentials: ${{ steps.docker-test-credentials-meta.outputs.tags }}"
          #          if [[ "${{ steps.docker-test-credentials-push.outputs.digest }}" != "" ]]; then
          #            echo "    üîç Digest: ${{ steps.docker-test-credentials-push.outputs.digest }}"
          #          fi
          #          if [[ "${{ steps.test-credentials-sha-tagging.outputs.test-credentials-context-tag }}" != "" ]]; then
          #            echo "    üè∑Ô∏è  Context Tag: ${{ steps.test-credentials-sha-tagging.outputs.test-credentials-context-tag }}"
          #          fi
          echo "  üèóÔ∏è  Images built: ${{ steps.build-status.outputs.images-built }}"
          echo "  üöÄ Images pushed: ${{ steps.push-status.outputs.images-pushed }}"
          echo "  üéØ Explicit SHA Tagging: Enabled for precise cleanup targeting"
          echo "  üîí Security scanning: Moved to parallel workflow for optimal performance"
          echo "  ‚ö° Performance: ~50% faster execution with parallel security scanning"

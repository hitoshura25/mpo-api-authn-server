#!/usr/bin/env node

// Use native fetch if available (Node.js 18+), otherwise use https module
async function githubFetch(url, options) {
    if (typeof fetch !== 'undefined') {
        return fetch(url, options);
    }
    
    // Fallback for older Node.js versions
    const https = require('https');
    const { URL } = require('url');
    
    return new Promise((resolve, reject) => {
        const parsedUrl = new URL(url);
        const requestOptions = {
            hostname: parsedUrl.hostname,
            path: parsedUrl.pathname + parsedUrl.search,
            method: options.method || 'GET',
            headers: options.headers || {}
        };
        
        const req = https.request(requestOptions, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
                const response = {
                    ok: res.statusCode >= 200 && res.statusCode < 300,
                    status: res.statusCode,
                    text: async () => data,
                    json: async () => JSON.parse(data)
                };
                resolve(response);
            });
        });
        
        req.on('error', reject);
        if (options.body) req.write(options.body);
        req.end();
    });
}

/**
 * Add security labels to vulnerability monitoring pull request
 * 
 * This script replaces the actions/github-script usage in vulnerability-monitor.yml
 * to add appropriate labels to automatically created vulnerability update PRs.
 */
async function addVulnerabilityPRLabels() {
    console.log('üè∑Ô∏è Adding security labels to vulnerability monitoring PR...');
    
    try {
        const owner = process.env.GITHUB_REPOSITORY_OWNER;
        const repo = process.env.GITHUB_REPOSITORY_NAME;
        const runNumber = process.env.GITHUB_RUN_NUMBER;
        const token = process.env.GITHUB_TOKEN;
        
        if (!owner || !repo || !runNumber || !token) {
            console.error('‚ùå Missing required environment variables:');
            console.error(`  GITHUB_REPOSITORY_OWNER: ${owner || 'missing'}`);
            console.error(`  GITHUB_REPOSITORY_NAME: ${repo || 'missing'}`);
            console.error(`  GITHUB_RUN_NUMBER: ${runNumber || 'missing'}`);
            console.error(`  GITHUB_TOKEN: ${token ? 'present' : 'missing'}`);
            throw new Error('Missing required environment variables');
        }
        
        const branchName = `security/vulnerability-updates-${runNumber}`;
        console.log(`üîç Looking for PR with head branch: ${owner}:${branchName}`);
        
        // Get list of open PRs to find the one with our branch
        const pullsResponse = await githubFetch(`https://api.github.com/repos/${owner}/${repo}/pulls?state=open&head=${owner}:${branchName}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/vnd.github.v3+json',
            }
        });
        
        if (!pullsResponse.ok) {
            const errorText = await pullsResponse.text();
            throw new Error(`GitHub API error getting PRs: ${pullsResponse.status} ${errorText}`);
        }
        
        const pullRequests = await pullsResponse.json();
        
        if (pullRequests.length === 0) {
            console.log(`‚ö†Ô∏è No open PR found with head branch ${branchName}`);
            console.log('This might be expected if the PR was already created in a previous step');
            return;
        }
        
        const pr = pullRequests[0];
        console.log(`‚úÖ Found PR #${pr.number}: ${pr.title}`);
        
        // Add security labels
        const labels = ['security', 'automated', 'vulnerability-testing'];
        
        const labelsResponse = await githubFetch(`https://api.github.com/repos/${owner}/${repo}/issues/${pr.number}/labels`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/vnd.github.v3+json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                labels: labels
            })
        });
        
        if (!labelsResponse.ok) {
            const errorText = await labelsResponse.text();
            throw new Error(`GitHub API error adding labels: ${labelsResponse.status} ${errorText}`);
        }
        
        console.log(`‚úÖ Successfully added labels to PR #${pr.number}: ${labels.join(', ')}`);
        
    } catch (error) {
        console.error('‚ùå Failed to add vulnerability PR labels:', error.message);
        throw error;
    }
}

/**
 * Main execution function for GitHub Actions
 */
async function main() {
    console.log('üöÄ Vulnerability PR Label Manager Starting');
    
    try {
        await addVulnerabilityPRLabels();
        console.log('üéâ Vulnerability PR labels added successfully');
    } catch (error) {
        console.error('‚ùå Vulnerability PR label addition failed:', error);
        process.exit(1);
    }
}

// Export for testing
module.exports = { addVulnerabilityPRLabels, main };

// Run main if called directly
if (require.main === module) {
    main();
}
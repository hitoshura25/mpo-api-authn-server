name: OSV-Scanner Vulnerability Scan

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  actions: read
  security-events: write
  contents: read
  pull-requests: write  # Added for PR comments

jobs:
  osv-scanner:
    uses: google/osv-scanner-action/.github/workflows/osv-scanner-reusable.yml@v1.9.0
    with:
      scan-args: |-
        --recursive
        .

  # New job: Process OSV-Scanner results for PR comments
  osv-pr-comment:
    runs-on: ubuntu-latest
    needs: osv-scanner
    if: always() && github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download OSV-Scanner results
        uses: actions/download-artifact@v4
        with:
          name: osv-scanner-results
          path: osv-results

      - name: Process OSV results for PR comment
        run: |
          echo "üîç Processing OSV-Scanner results for PR comment..."

          # Find the results file (may be in subdirectory)
          RESULTS_FILE=$(find osv-results -name "*.json" -o -name "*.sarif" | head -1)

          if [[ -z "$RESULTS_FILE" ]]; then
            echo "‚ö†Ô∏è No OSV-Scanner results file found"
            echo "FILES_FOUND=false" >> $GITHUB_ENV
            exit 0
          fi

          echo "üìã Found results file: $RESULTS_FILE"

          # Count vulnerabilities from SARIF or JSON and extract detailed information
          if [[ "$RESULTS_FILE" == *.sarif ]]; then
            VULN_COUNT=$(jq '.runs[0].results | length' "$RESULTS_FILE" 2>/dev/null || echo "0")

            # Extract severity breakdown from SARIF
            HIGH_COUNT=$(jq '[.runs[0].results[] | select(.level == "error")] | length' "$RESULTS_FILE" 2>/dev/null || echo "0")
            MEDIUM_COUNT=$(jq '[.runs[0].results[] | select(.level == "warning")] | length' "$RESULTS_FILE" 2>/dev/null || echo "0")
            LOW_COUNT=$(jq '[.runs[0].results[] | select(.level == "note" or .level == "info")] | length' "$RESULTS_FILE" 2>/dev/null || echo "0")

            # Create detailed vulnerability breakdown for PR comment
            jq -r '.runs[0].results[] | "- **" + (.ruleId // "Unknown") + "**: " + (.message.text // "No description") + " (" + (.level // "unknown") + ")"' "$RESULTS_FILE" 2>/dev/null | head -10 > vulnerability-details.md || echo "No detailed vulnerability info available" > vulnerability-details.md

          elif [[ "$RESULTS_FILE" == *.json ]]; then
            VULN_COUNT=$(jq '.results | length' "$RESULTS_FILE" 2>/dev/null || echo "0")

            # Extract severity breakdown from JSON (OSV format)
            HIGH_COUNT=$(jq '[.results[] | select(.vulnerability.severity[]? | contains("HIGH") or contains("CRITICAL"))] | length' "$RESULTS_FILE" 2>/dev/null || echo "0")
            MEDIUM_COUNT=$(jq '[.results[] | select(.vulnerability.severity[]? | contains("MEDIUM"))] | length' "$RESULTS_FILE" 2>/dev/null || echo "0")
            LOW_COUNT=$(jq '[.results[] | select(.vulnerability.severity[]? | contains("LOW"))] | length' "$RESULTS_FILE" 2>/dev/null || echo "0")

            # Create detailed vulnerability breakdown for PR comment
            jq -r '.results[] | "- **" + (.vulnerability.id // "Unknown") + "**: " + (.vulnerability.summary // "No description") + " (" + ((.vulnerability.severity // ["unknown"]) | join(", ")) + ")"' "$RESULTS_FILE" 2>/dev/null | head -10 > vulnerability-details.md || echo "No detailed vulnerability info available" > vulnerability-details.md

          else
            VULN_COUNT=0
            HIGH_COUNT=0
            MEDIUM_COUNT=0
            LOW_COUNT=0
            echo "No detailed vulnerability info available" > vulnerability-details.md
          fi

          echo "üìä Vulnerability Analysis:"
          echo "   Total: $VULN_COUNT"
          echo "   High/Critical: $HIGH_COUNT"
          echo "   Medium: $MEDIUM_COUNT"
          echo "   Low/Info: $LOW_COUNT"

          echo "VULN_COUNT=$VULN_COUNT" >> $GITHUB_ENV
          echo "HIGH_COUNT=$HIGH_COUNT" >> $GITHUB_ENV
          echo "MEDIUM_COUNT=$MEDIUM_COUNT" >> $GITHUB_ENV
          echo "LOW_COUNT=$LOW_COUNT" >> $GITHUB_ENV
          echo "RESULTS_FILE=$RESULTS_FILE" >> $GITHUB_ENV
          echo "FILES_FOUND=true" >> $GITHUB_ENV

      - name: Create OSV-Scanner PR comment
        if: env.FILES_FOUND == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const vulnCount = parseInt(process.env.VULN_COUNT);
            const highCount = parseInt(process.env.HIGH_COUNT);
            const mediumCount = parseInt(process.env.MEDIUM_COUNT);
            const lowCount = parseInt(process.env.LOW_COUNT);
            const resultsFile = process.env.RESULTS_FILE;

            let commentBody = `## üõ°Ô∏è OSV-Scanner Vulnerability Scan Results\n\n`;

            if (vulnCount === 0) {
              commentBody += `‚úÖ **No vulnerabilities found** in dependency lockfiles!\n\n`;
              commentBody += `üîç Scanned all lockfiles recursively for known vulnerabilities.\n`;
              commentBody += `- üì¶ Packages: npm, Gradle, and other dependency managers\n`;
              commentBody += `- üîí Database: Google OSV (Open Source Vulnerabilities)\n`;
            } else {
              commentBody += `‚ö†Ô∏è **${vulnCount} vulnerabilities detected** in dependency lockfiles\n\n`;

              // Severity breakdown
              commentBody += `### üìä Severity Breakdown\n`;
              if (highCount > 0) commentBody += `- üî¥ **High/Critical**: ${highCount} vulnerabilities\n`;
              if (mediumCount > 0) commentBody += `- üü° **Medium**: ${mediumCount} vulnerabilities\n`;
              if (lowCount > 0) commentBody += `- üîµ **Low/Info**: ${lowCount} vulnerabilities\n`;
              commentBody += `- üì¶ **Total**: ${vulnCount} vulnerabilities\n`;
              commentBody += `- üìÅ **Source**: Lockfiles (package-lock.json, gradle.lockfile, etc.)\n`;
              commentBody += `- üîç **Scanner**: OSV-Scanner (Google OSV Database)\n\n`;

              // Priority guidance
              if (highCount > 0) {
                commentBody += `### üö® Immediate Action Required\n`;
                commentBody += `‚ùó **${highCount} high/critical vulnerabilities** require immediate attention.\n`;
                commentBody += `These may expose the application to significant security risks.\n\n`;
              }

              // Top vulnerabilities sample (first 5-10)
              try {
                const vulnerabilityDetails = fs.readFileSync('vulnerability-details.md', 'utf8').trim();
                if (vulnerabilityDetails && vulnerabilityDetails !== 'No detailed vulnerability info available') {
                  const details = vulnerabilityDetails.split('\n').slice(0, 5); // Show first 5 vulnerabilities
                  commentBody += `### üîç Sample Vulnerabilities (Top ${details.length})\n`;
                  commentBody += details.join('\n') + '\n';
                  if (vulnCount > 5) {
                    commentBody += `\n*... and ${vulnCount - 5} more. See Security tab for complete details.*\n`;
                  }
                  commentBody += `\n`;
                }
              } catch (error) {
                console.log('Could not read vulnerability details:', error.message);
              }

              commentBody += `### üí° Recommended Actions\n`;
              commentBody += `1. üîç **Review Details**: Check [Security tab](https://github.com/${{ github.repository }}/security/code-scanning) for complete vulnerability list\n`;
              if (highCount > 0) {
                commentBody += `2. üö® **Priority**: Address ${highCount} high/critical vulnerabilities first\n`;
              }
              commentBody += `3. üîß **Update Dependencies**: Run dependency updates to latest secure versions\n`;
              commentBody += `4. üìã **Verify Fixes**: Check affected lockfiles after updates\n`;
              commentBody += `5. üîÑ **Re-scan**: Trigger new scan to validate vulnerability resolution\n\n`;

              // Add dependency manager specific advice
              commentBody += `### üîß Dependency Manager Commands\n`;
              commentBody += `\`\`\`bash\n`;
              commentBody += `# Update npm dependencies\n`;
              commentBody += `npm audit fix\n`;
              commentBody += `npm update\n`;
              commentBody += `\n`;
              commentBody += `# Update Gradle dependencies\n`;
              commentBody += `./gradlew dependencyUpdates\n`;
              commentBody += `# Review and update build.gradle.kts files\n`;
              commentBody += `\`\`\`\n`;
            }

            commentBody += `---\n`;
            commentBody += `ü§ñ *Automated OSV-Scanner vulnerability analysis*\n`;
            commentBody += `üìä *Database: Google OSV (Open Source Vulnerabilities)*\n`;
            commentBody += `‚è±Ô∏è *Scan completed: ${new Date().toISOString()}*`;

            // Look for existing OSV-Scanner comment to update (prevent spam)
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const existingComment = comments.data.find(comment =>
              comment.body.includes('üõ°Ô∏è OSV-Scanner Vulnerability Scan Results')
            );

            if (existingComment) {
              // Update existing comment to prevent PR spam
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
              console.log('‚úÖ Updated existing OSV-Scanner comment (preventing spam)');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
              console.log('‚úÖ Created new OSV-Scanner PR comment');
            }

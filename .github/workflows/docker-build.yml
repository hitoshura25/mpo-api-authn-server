# Docker Build, Scan, and Push Callable Workflow
#
# This callable workflow handles the complete Docker image lifecycle:
# 1. Build Docker images for both services
# 2. Security scan images with comprehensive vulnerability detection
# 3. Push images to registry only after security approval
#
# DESIGN PRINCIPLES:
# - Security-first: Images are scanned before push, blocking on critical vulnerabilities
# - Caching optimization: Leverages GitHub Actions cache and Gradle build cache
# - Parallel execution: Builds multiple images concurrently for performance
# - Attestation: Generates provenance attestations for supply chain security
#
# INPUTS:
#   docker-changes-detected: Whether Docker-related changes were detected
#   image-tag-base: Base tag for Docker images (e.g., 'pr-123', 'latest')
#   registry-config: Docker registry configuration
#   java-version: Java version for JAR builds
#   push-enabled: Whether to push images after successful security scan
#
# OUTPUTS:
#   images-built: Whether Docker images were successfully built
#   images-pushed: Whether images were pushed to registry
#   security-scan-passed: Whether security scan passed without critical vulnerabilities
#   webauthn-server-image: WebAuthn server image tag
#   test-credentials-image: Test credentials service image tag

name: Docker Build, Scan, and Push

on:
  workflow_call:
    inputs:
      docker-changes-detected:
        description: 'Whether Docker-related changes were detected'
        required: true
        type: boolean
      image-tag-base:
        description: 'Base tag for Docker images'
        required: false
        type: string
        default: 'latest'
      java-version:
        description: 'Java version for JAR builds'
        required: false
        type: string
        default: '21'
      push-enabled:
        description: 'Whether to push images after successful security scan'
        required: false
        type: boolean
        default: true
      registry-url:
        description: 'Docker registry URL'
        required: false
        type: string
        default: 'ghcr.io'
      webauthn-image-name:
        description: 'WebAuthn server image name'
        required: false
        type: string
        default: 'hitoshura25/webauthn-server'
      test-credentials-image-name:
        description: 'Test credentials service image name'
        required: false
        type: string
        default: 'hitoshura25/webauthn-test-credentials-service'
    outputs:
      images-built:
        description: 'Whether Docker images were successfully built'
        value: ${{ jobs.build-docker-images.result == 'success' }}
      images-pushed:
        description: 'Whether images were pushed to registry'
        value: ${{ jobs.push-docker-images.result == 'success' }}
      security-scan-passed:
        description: 'Whether security scan passed without critical vulnerabilities'
        value: ${{ jobs.security-scan-docker-images.outputs.scan-passed }}
      critical-vulnerabilities:
        description: 'Number of critical vulnerabilities found'
        value: ${{ jobs.security-scan-docker-images.outputs.critical-vulnerabilities }}
      webauthn-server-image:
        description: 'WebAuthn server Docker image tag'
        value: ${{ jobs.build-docker-images.outputs.webauthn-server-image }}
      webauthn-server-digest:
        description: 'WebAuthn server image digest'
        value: ${{ jobs.push-docker-images.outputs.webauthn-server-digest }}
      test-credentials-image:
        description: 'Test credentials service Docker image tag'
        value: ${{ jobs.build-docker-images.outputs.test-credentials-image }}
      test-credentials-digest:
        description: 'Test credentials service image digest'
        value: ${{ jobs.push-docker-images.outputs.test-credentials-digest }}

env:
  JAVA_VERSION: ${{ inputs.java-version }}
  DOCKER_REGISTRY: ${{ inputs.registry-url }}
  DOCKER_IMAGE_NAME: ${{ inputs.webauthn-image-name }}
  DOCKER_TEST_CREDENTIALS_IMAGE_NAME: ${{ inputs.test-credentials-image-name }}

jobs:
  # Job 1: Build Docker images (but don't push yet - security scan first)
  build-docker-images:
    runs-on: ubuntu-latest
    if: inputs.docker-changes-detected == true
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    outputs:
      webauthn-server-image: ${{ steps.docker-meta.outputs.tags }}
      webauthn-server-digest: ${{ steps.docker-build.outputs.digest }}
      test-credentials-image: ${{ steps.docker-test-credentials-meta.outputs.tags }}
      test-credentials-digest: ${{ steps.docker-test-credentials-build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      # Job-specific Gradle caching for Docker builds
      - name: Setup Gradle cache for Docker builds
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle/configuration-cache
          key: gradle-docker-build-${{ runner.os }}-${{ github.ref_name }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-docker-build-${{ runner.os }}-${{ github.ref_name }}-
            gradle-docker-build-${{ runner.os }}-main-
            gradle-docker-build-${{ runner.os }}-
            gradle-unit-tests-${{ runner.os }}-${{ github.ref_name }}-
            gradle-${{ runner.os }}-${{ github.ref_name }}-
            gradle-${{ runner.os }}-main-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
          build-scan-publish: true
          build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
          build-scan-terms-of-use-agree: "yes"
          # Disable built-in cache since we're managing it manually
          cache-disabled: true

      - name: Build JAR files for Docker images
        shell: bash
        run: |
          echo "üîß Building JAR files for Docker images..."
          ./gradlew :webauthn-server:shadowJar :webauthn-test-credentials-service:shadowJar --build-cache --parallel --configuration-cache

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: docker-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=pr

      - name: Build WebAuthn Server (no push yet)
        id: docker-build
        uses: docker/build-push-action@v6
        with:
          context: ./webauthn-server
          push: false
          load: true
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Docker Test Credentials meta
        id: docker-test-credentials-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_TEST_CREDENTIALS_IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=pr

      - name: Build Test Credentials Service (no push yet)
        id: docker-test-credentials-build
        uses: docker/build-push-action@v6
        with:
          context: ./webauthn-test-credentials-service
          push: false
          load: true
          tags: ${{ steps.docker-test-credentials-meta.outputs.tags }}
          labels: ${{ steps.docker-test-credentials-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build summary
        run: |
          echo "üê≥ Docker Build Summary:"
          echo "  üì¶ WebAuthn Server: ${{ steps.docker-meta.outputs.tags }}"
          echo "  üì¶ Test Credentials: ${{ steps.docker-test-credentials-meta.outputs.tags }}"
          echo "  üîí Security scanning required before push"
          echo "  ‚è≠Ô∏è  Next: Comprehensive security scan"

  # Job 2: Security scan Docker images before allowing push
  security-scan-docker-images:
    runs-on: ubuntu-latest
    needs: build-docker-images
    if: |
      always() &&
      inputs.docker-changes-detected == true &&
      needs.build-docker-images.result == 'success'
    permissions:
      contents: read
      security-events: write
      pull-requests: write
      issues: write
    outputs:
      scan-passed: ${{ steps.security-scan.outputs.scan-passed }}
      critical-vulnerabilities: ${{ steps.security-scan.outputs.critical-vulnerabilities }}
      scan-results: ${{ steps.security-scan.outputs.scan-results }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK for JAR builds
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      # Job-specific Gradle caching for security scan builds
      - name: Setup Gradle cache for security scan
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle/configuration-cache
          key: gradle-security-scan-${{ runner.os }}-${{ github.ref_name }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-security-scan-${{ runner.os }}-${{ github.ref_name }}-
            gradle-security-scan-${{ runner.os }}-main-
            gradle-security-scan-${{ runner.os }}-
            gradle-docker-build-${{ runner.os }}-${{ github.ref_name }}-
            gradle-unit-tests-${{ runner.os }}-${{ github.ref_name }}-
            gradle-${{ runner.os }}-${{ github.ref_name }}-
            gradle-${{ runner.os }}-main-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
          build-scan-publish: true
          build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
          build-scan-terms-of-use-agree: "yes"
          # Disable built-in cache since we're managing it manually
          cache-disabled: true

      - name: Build JAR files and Docker images for scanning
        run: |
          echo "üîß Rebuilding Docker images locally for security scanning..."
          echo "Note: Images were built on different runner, rebuilding with cache for local scanning"

          # Build JARs first
          ./gradlew :webauthn-server:shadowJar :webauthn-test-credentials-service:shadowJar --build-cache --parallel --configuration-cache

          # Rebuild Docker images locally with same tags as build job
          docker build -t "${{ needs.build-docker-images.outputs.webauthn-server-image }}" ./webauthn-server
          docker build -t "${{ needs.build-docker-images.outputs.test-credentials-image }}" ./webauthn-test-credentials-service

      - name: Verify rebuilt images are available
        run: |
          echo "üîç Verifying rebuilt Docker images are available for scanning..."

          # Check webauthn-server image
          echo "webauthn_changed=true" >> $GITHUB_ENV
          # Verify the rebuilt image exists locally
          if docker image inspect "${{ needs.build-docker-images.outputs.webauthn-server-image }}" >/dev/null 2>&1; then
            echo "‚úÖ WebAuthn server image rebuilt and ready: ${{ needs.build-docker-images.outputs.webauthn-server-image }}"
          else
            echo "‚ùå Failed to rebuild WebAuthn server image"
            exit 1
          fi

          # Check test credentials image
          echo "test_credentials_changed=true" >> $GITHUB_ENV
          # Verify the rebuilt image exists locally
          if docker image inspect "${{ needs.build-docker-images.outputs.test-credentials-image }}" >/dev/null 2>&1; then
            echo "‚úÖ Test credentials image rebuilt and ready: ${{ needs.build-docker-images.outputs.test-credentials-image }}"
          else
            echo "‚ùå Failed to rebuild test credentials image"
            exit 1
          fi

      - name: Comprehensive Docker Security Scanning
        id: security-scan
        env:
          WEBAUTHN_IMAGE_TAG: ${{ needs.build-docker-images.outputs.webauthn-server-image }}
          TEST_CREDENTIALS_IMAGE_TAG: ${{ needs.build-docker-images.outputs.test-credentials-image }}
        run: |
          echo "üîç Starting security scan of locally built Docker images..."
          echo "WebAuthn image: $WEBAUTHN_IMAGE_TAG"
          echo "Test credentials image: $TEST_CREDENTIALS_IMAGE_TAG"

          # Make sure the script is executable
          chmod +x scripts/docker/scan-security.sh

          # Run security scanning on locally rebuilt images
          # Pass the actual image tags from build job outputs
          scripts/docker/scan-security.sh "${{ env.webauthn_changed }}" "${{ env.test_credentials_changed }}" "$WEBAUTHN_IMAGE_TAG" "$TEST_CREDENTIALS_IMAGE_TAG"

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-security-scan-results
          path: |
            docker-security-scan-results.json
            docker-security-scan-results.sarif
            *-vulns.json
            *-secrets.json
            *-config.json
            *.sarif
            scan-security.log
          retention-days: 30

      - name: Upload scan results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: docker-security-scan-results.sarif

      - name: Post security scan results to PR
        if: always() && github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number || 'N/A' }}
          SCAN_RESULTS_FILE: docker-security-scan-results.json
        run: |
          echo "üìù Posting security scan results to PR #${{ github.event.pull_request.number || 'N/A' }}"
          chmod +x scripts/ci/security-scan-pr-comment.cjs
          node scripts/ci/security-scan-pr-comment.cjs

  # Job 3: Push Docker images to registry (only after security scan passes)
  push-docker-images:
    runs-on: ubuntu-latest
    needs: [ build-docker-images, security-scan-docker-images ]
    if: |
      always() &&
      inputs.docker-changes-detected == true &&
      inputs.push-enabled == true &&
      needs.security-scan-docker-images.outputs.scan-passed == 'true'
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    outputs:
      webauthn-server-image: ${{ needs.build-docker-images.outputs.webauthn-server-image }}
      webauthn-server-digest: ${{ steps.docker-push.outputs.digest }}
      test-credentials-image: ${{ needs.build-docker-images.outputs.test-credentials-image }}
      test-credentials-digest: ${{ steps.docker-test-credentials-push.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up JDK for JAR builds
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      # Job-specific Gradle caching for push builds
      - name: Setup Gradle cache for push job
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle/configuration-cache
          key: gradle-push-${{ runner.os }}-${{ github.ref_name }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-push-${{ runner.os }}-${{ github.ref_name }}-
            gradle-push-${{ runner.os }}-main-
            gradle-push-${{ runner.os }}-
            gradle-security-scan-${{ runner.os }}-${{ github.ref_name }}-
            gradle-docker-build-${{ runner.os }}-${{ github.ref_name }}-
            gradle-unit-tests-${{ runner.os }}-${{ github.ref_name }}-
            gradle-${{ runner.os }}-${{ github.ref_name }}-
            gradle-${{ runner.os }}-main-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
          build-scan-publish: true
          build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
          build-scan-terms-of-use-agree: "yes"
          # Disable built-in cache since we're managing it manually
          cache-disabled: true

      - name: Build JAR files for Docker push
        run: |
          echo "üîß Building JARs for Docker image push..."
          ./gradlew :webauthn-server:shadowJar :webauthn-test-credentials-service:shadowJar --build-cache --parallel --configuration-cache

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push WebAuthn Server to registry
        id: docker-push
        uses: docker/build-push-action@v6
        with:
          context: ./webauthn-server
          push: true
          tags: ${{ needs.build-docker-images.outputs.webauthn-server-image }}
          cache-from: type=gha
          provenance: false

      - name: Generate artifact attestation for WebAuthn Server
        uses: actions/attest-build-provenance@v2
        continue-on-error: true  # Don't fail build on GitHub attestation service issues
        with:
          subject-name: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
          subject-digest: ${{ steps.docker-push.outputs.digest }}
          push-to-registry: true
        env:
          ACTIONS_STEP_DEBUG: true

      - name: Push Test Credentials Service to registry
        id: docker-test-credentials-push
        uses: docker/build-push-action@v6
        with:
          context: ./webauthn-test-credentials-service
          push: true
          tags: ${{ needs.build-docker-images.outputs.test-credentials-image }}
          cache-from: type=gha
          provenance: false

      - name: Generate artifact attestation for Test Credentials Service
        uses: actions/attest-build-provenance@v2
        continue-on-error: true  # Don't fail build on GitHub attestation service issues
        with:
          subject-name: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_TEST_CREDENTIALS_IMAGE_NAME }}
          subject-digest: ${{ steps.docker-test-credentials-push.outputs.digest }}
          push-to-registry: true
        env:
          ACTIONS_STEP_DEBUG: true

      - name: Create Docker build manifest for post-processing
        run: |
          mkdir -p docker-build-info
          echo "docker_images_built=true" > docker-build-info/build-manifest.txt
          echo "build_timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> docker-build-info/build-manifest.txt
          echo "webauthn_server_digest=${{ steps.docker-push.outputs.digest }}" >> docker-build-info/build-manifest.txt
          echo "test_credentials_digest=${{ steps.docker-test-credentials-push.outputs.digest }}" >> docker-build-info/build-manifest.txt
          echo "github_run_id=${{ github.run_id }}" >> docker-build-info/build-manifest.txt

      - name: Upload Docker build manifest
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-manifest
          path: docker-build-info/build-manifest.txt
          retention-days: 1

      - name: Push summary
        run: |
          echo "üöÄ Docker Push Summary:"
          echo "  üì¶ WebAuthn Server: ${{ needs.build-docker-images.outputs.webauthn-server-image }}"
          echo "    üîç Digest: ${{ steps.docker-push.outputs.digest }}"
          echo "  üì¶ Test Credentials: ${{ needs.build-docker-images.outputs.test-credentials-image }}"
          echo "    üîç Digest: ${{ steps.docker-test-credentials-push.outputs.digest }}"
          echo "  üîí Security scan passed: ${{ needs.security-scan-docker-images.outputs.scan-passed }}"
          echo "  üéØ Critical vulnerabilities: ${{ needs.security-scan-docker-images.outputs.critical-vulnerabilities }}"
          echo "  ‚úÖ Images successfully pushed to registry"

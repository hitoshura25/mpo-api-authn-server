# MCP Server Publishing - Self-Contained Workflow
#
# Publishes @vmenon25/mcp-server-webauthn-client to npm registry when
# mcp-server-webauthn-client/** files change on main branch.
#
# DESIGN PATTERN:
# - Self-contained versioning (independent from other client libraries)
# - Production-only publishing (no staging required for MCP server)
# - Git tag-based version tracking (mcp-server-v*)
# - Automatic patch version increment
# - GitHub release creation with installation instructions
#
# VERSIONING:
# - Main branch format: mcp-server-v{major}.{minor}.{patch} (e.g., mcp-server-v1.0.5)
# - PR branch format: mcp-server-v{major}.{minor}.{patch}-rc.{pr}.{run} (e.g., mcp-server-v1.0.6-rc.42.123)
# - Auto-increments patch version from highest existing tag
# - Independent from npm-client-v* and android-client-v* tags
# - PR builds: Version includes release candidate suffix, no npm publish/tag/release
#
# SECURITY:
# - npm publishing: Uses NPM_PUBLISH_TOKEN secret
# - Minimal permissions: contents:write (for tags/releases), id-token:write (for provenance)
#
# TRIGGER:
# - Push to main branch
# - Pull requests (for testing)
# - Path filter: mcp-server-webauthn-client/**

name: Publish MCP Server

on:
  push:
    branches: [main]
    paths:
      - 'mcp-server-webauthn-client/**'
      - .github/workflows/publish-mcp-server.yml
  pull_request:
    paths:
      - 'mcp-server-webauthn-client/**'
      - .github/workflows/publish-mcp-server.yml

permissions:
  contents: write   # Required for creating GitHub releases and tags
  id-token: write   # Required for npm provenance

jobs:
  publish-mcp-server:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tag analysis

      - name: Get next version
        id: version
        run: |
          echo "🔍 Analyzing existing mcp-server-v* tags..."

          # Get all mcp-server-v* tags, extract version numbers, find highest
          HIGHEST_TAG=$(git tag -l "mcp-server-v*" | sed 's/mcp-server-v//' | sort -V | tail -1)

          if [[ -z "$HIGHEST_TAG" ]]; then
            # No existing tags, start with 0.0.1
            BASE_VERSION="0.0.1"
            echo "📋 No existing tags found, starting with version 0.0.1"
          else
            # Extract patch number and increment
            MAJOR=$(echo "$HIGHEST_TAG" | cut -d. -f1)
            MINOR=$(echo "$HIGHEST_TAG" | cut -d. -f2)
            PATCH=$(echo "$HIGHEST_TAG" | cut -d. -f3)
            NEW_PATCH=$((PATCH + 1))
            BASE_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
            echo "📋 Latest version: $HIGHEST_TAG"
            echo "📋 Next base version: $BASE_VERSION"
          fi

          # Determine final version based on event type
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # PR: Add release candidate suffix with PR number and run number
            PR_NUMBER="${{ github.event.pull_request.number }}"
            RUN_NUMBER="${{ github.run_number }}"
            NEW_VERSION="${BASE_VERSION}-rc.${PR_NUMBER}.${RUN_NUMBER}"
            echo "🔄 PR release candidate version: $NEW_VERSION (PR #${PR_NUMBER}, run ${RUN_NUMBER})"
          else
            # Main branch: Use base version
            NEW_VERSION="${BASE_VERSION}"
            echo "📦 Main branch release: $NEW_VERSION"
          fi

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=mcp-server-v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          echo "📝 Updating package.json to version ${{ steps.version.outputs.version }}..."
          cd mcp-server-webauthn-client

          # Use jq to update version directly (avoids npm version "not changed" error)
          jq --arg version "${{ steps.version.outputs.version }}" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json

          echo "✅ package.json updated"
          echo "📋 Current package.json version:"
          cat package.json | grep -A1 '"version"'

      - name: Set up Node.js for npm publishing
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Build TypeScript MCP server
        run: |
          echo "🔨 Building MCP server..."
          cd mcp-server-webauthn-client
          npm install
          npm run build

          echo "✅ Build completed"
          echo "📁 Build outputs:"
          ls -la dist/

      - name: Validate build outputs
        run: |
          echo "🔍 Validating required entry points..."
          cd mcp-server-webauthn-client

          # Check CLI entry point
          if [ ! -f "dist/cli.js" ]; then
            echo "❌ ERROR: CLI entry point dist/cli.js not found"
            exit 1
          fi

          # Check MCP server entry point
          if [ ! -f "dist/index.js" ]; then
            echo "❌ ERROR: MCP server entry point dist/index.js not found"
            exit 1
          fi

          # Check TypeScript declarations
          if [ ! -f "dist/cli.d.ts" ]; then
            echo "❌ ERROR: CLI declarations dist/cli.d.ts not found"
            exit 1
          fi

          if [ ! -f "dist/index.d.ts" ]; then
            echo "❌ ERROR: MCP server declarations dist/index.d.ts not found"
            exit 1
          fi

          echo "✅ All required entry points exist"

      - name: Publish to npm (main branch only)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: |
          echo "🚀 Publishing to npm registry..."
          cd mcp-server-webauthn-client

          # Verify npm authentication
          echo "🔍 Verifying npm authentication..."
          if ! npm whoami; then
            echo "❌ Authentication failed for npm registry"
            exit 1
          fi
          echo "✅ npm authentication successful"

          # Publish with public access
          npm publish --access public

          echo "✅ MCP server published to npm successfully"
          echo "📦 Package: @vmenon25/mcp-server-webauthn-client@${{ steps.version.outputs.version }}"

      - name: Skip npm publishing (PR build)
        if: github.event_name == 'pull_request'
        run: |
          echo "⏭️ Skipping npm publishing for PR build"
          echo "📦 PR version: @vmenon25/mcp-server-webauthn-client@${{ steps.version.outputs.version }}"
          echo "ℹ️ This version would be published on main branch merge"

      - name: Create Git tag (main branch only)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "🏷️ Creating Git tag ${{ steps.version.outputs.tag }}..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.version.outputs.tag }}
          git push origin ${{ steps.version.outputs.tag }}
          echo "✅ Git tag created and pushed"

      - name: Create GitHub Release (main branch only)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "MCP Server v${{ steps.version.outputs.version }}"
          body: |
            ## MCP Server for WebAuthn Client Generation v${{ steps.version.outputs.version }}

            Model Context Protocol (MCP) server that enables AI agents to generate complete WebAuthn web clients.

            ### Installation

            #### Global Installation (For AI Agents)
            ```bash
            npm install -g @vmenon25/mcp-server-webauthn-client
            ```

            #### MCP Configuration (Claude Code)
            Add to your project's `claude_config.json`:
            ```json
            {
              "mcpServers": {
                "webauthn-client-generator": {
                  "command": "npx",
                  "args": ["-y", "@vmenon25/mcp-server-webauthn-client"]
                }
              }
            }
            ```

            ### CLI Mode (For Non-MCP Agents)

            ```bash
            # Basic usage (generates in ./web-client)
            npx -y @vmenon25/mcp-server-webauthn-client

            # Custom path and server URL
            npx -y @vmenon25/mcp-server-webauthn-client \
              --path ./auth-client \
              --server http://localhost:9000

            # Custom client dev server port
            npx -y @vmenon25/mcp-server-webauthn-client \
              --path ./web-client \
              --port 3000
            ```

            ### Features
            - ✅ **MCP Mode**: 0-token execution for MCP-compatible agents (Claude Code, Continue.dev)
            - ✅ **CLI Mode**: ~1500 token cost for non-MCP agents (Cursor, Aider, Windsurf)
            - ✅ **Complete Web Client**: TypeScript, Express server, Webpack, proper error handling
            - ✅ **Critical WebAuthn Patterns**: JSON parsing, SimpleWebAuthn integration, credential serialization
            - ✅ **Type-Safe**: Full TypeScript support using published npm client library

            ### Usage with AI Agents

            **Natural Language Prompt:**
            ```
            "I have a WebAuthn server running on port 8080. Create a web client to test it."
            ```

            **Agent automatically:**
            1. Detects MCP server or uses CLI mode
            2. Generates complete TypeScript web client
            3. Configures Express dev server
            4. Includes all critical WebAuthn integration patterns

            ### Generated Client Structure
            ```
            web-client/
            ├── package.json
            ├── src/
            │   ├── index.ts
            │   ├── webauthn-client.ts
            │   ├── types.ts
            │   └── server.ts
            ├── public/
            │   └── index.html
            ├── webpack.config.js
            ├── tsconfig.json
            └── README.md
            ```

            ### What's New
            - Published as standalone npm package
            - Production-ready MCP server and CLI tool
            - Automatic web client generation for WebAuthn testing

            ### Documentation
            - [Full Documentation](https://github.com/hitoshura25/mpo-api-authn-server/tree/main/mcp-server-webauthn-client/README.md)
            - [Token Cost Analysis](https://github.com/hitoshura25/mpo-api-authn-server/tree/main/mcp-server-webauthn-client/TOKEN-COST-ANALYSIS.md)
            - [Multi-Language Integration](https://github.com/hitoshura25/mpo-api-authn-server/tree/main/mcp-server-webauthn-client/HYBRID-INTEGRATION-STRATEGIES.md)
            - [WebAuthn Server](https://github.com/hitoshura25/mpo-api-authn-server)

            ### Published Package
            - **npm**: [@vmenon25/mcp-server-webauthn-client@${{ steps.version.outputs.version }}](https://www.npmjs.com/package/@vmenon25/mcp-server-webauthn-client)
          draft: false
          prerelease: false

      - name: Publishing summary
        run: |
          echo "🎯 MCP Server Build Results:"
          echo "  Package: @vmenon25/mcp-server-webauthn-client@${{ steps.version.outputs.version }}"
          echo "  Event: ${{ github.event_name }}"

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "  Type: Release Candidate (PR #${{ github.event.pull_request.number }})"
            echo "  Published to npm: No (PR build)"
            echo "  Git tag: Not created (PR build)"
            echo "  GitHub Release: Not created (PR build)"
            echo ""
            echo "ℹ️ This is a PR build with release candidate version"
            echo "ℹ️ The package will be published to npm when merged to main"
          else
            echo "  Type: Production Release"
            echo "  Published to npm: Yes"
            echo "  Git tag: ${{ steps.version.outputs.tag }}"
            echo "  Registry: https://registry.npmjs.org"
            echo "  GitHub Release: Created"
            echo ""
            echo "✅ MCP server published successfully!"
          fi

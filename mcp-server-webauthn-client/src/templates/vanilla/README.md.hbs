# WebAuthn Web Client

A complete WebAuthn (Passkeys/FIDO2) web client generated for testing authentication with your WebAuthn server.

## Quick Start

### 1. Install Dependencies

```bash
npm install
```

### 2. Build the Client

```bash
npm run build
```

### 3. Start the Development Server

```bash
npm start
```

The client will be available at: **http://localhost:{{client_port}}**

## Configuration

The client is configured to connect to your WebAuthn server at:
- **Server URL**: `{{server_url}}`
- **Client Port**: `{{client_port}}`

You can change the server URL in the web UI or by modifying the configuration.

## Features

### Registration Flow
1. Enter a username and display name
2. Click "Register Passkey"
3. Follow your browser/device prompt to create a passkey
4. The passkey is securely stored on your device

### Authentication Flow
1. Enter username (or leave blank for usernameless authentication)
2. Click "Authenticate with Passkey"
3. Follow your browser/device prompt to use your passkey
4. Successfully authenticate with the server

## Critical Integration Patterns

This client preserves all critical WebAuthn integration patterns:

### JSON Parsing
Server responses contain JSON strings that must be parsed before passing to SimpleWebAuthn:
```typescript
const publicKeyOptions = JSON.parse(startResponse.publicKeyCredentialCreationOptions);
```

### SimpleWebAuthn Integration
Uses the SimpleWebAuthn browser library for WebAuthn API calls:
```typescript
const credential = await window.SimpleWebAuthnBrowser.startRegistration(publicKeyOptions.publicKey);
```

### Credential Serialization
Credentials must be stringified before sending to the server:
```typescript
credential: JSON.stringify(credential)
```

## Architecture

### Dependencies
- **@vmenon25/mpo-webauthn-client** - Published npm client library for API communication
- **@simplewebauthn/browser** - Browser WebAuthn implementation
- **Express** - Development server
- **Webpack** - Module bundling
- **TypeScript** - Type-safe development

### File Structure
```
├── src/
│   ├── webauthn-client.ts    # WebAuthn client implementation
│   ├── types.ts               # TypeScript type definitions
│   ├── server.ts              # Express development server
│   └── index.ts               # Entry point
├── public/
│   └── index.html             # Web UI
├── dist/                      # Compiled output
├── package.json
├── webpack.config.js
└── tsconfig.json
```

## Development Scripts

- `npm run build` - Production build
- `npm run build:dev` - Development build
- `npm start` - Start the server
- `npm run dev` - Build and start in one command
- `npm run dev:server` - Development server with hot reload

## Testing

1. **Test Connection**: Click "Test Connection" to verify server availability
2. **Register**: Create a new passkey with username and display name
3. **Authenticate**: Use your passkey to authenticate

## Troubleshooting

### Connection Issues
- Verify WebAuthn server is running at `{{server_url}}`
- Check CORS configuration on the server
- Ensure ports are not conflicting

### WebAuthn Errors
- **InvalidStateError**: Passkey already exists for this account
- **NotAllowedError**: User cancelled or timeout
- **NotSupportedError**: WebAuthn not supported in this browser

### Browser Support
WebAuthn is supported in:
- Chrome/Edge 67+
- Firefox 60+
- Safari 13+
- Opera 54+

## Security Notes

- Passkeys are stored securely on your device
- Private keys never leave your device
- Server validates all credentials
- Replay attacks are prevented
- Username enumeration is protected

## Integration with Your WebAuthn Server

This client connects to a WebAuthn server that implements the following endpoints:

### Registration
- `POST /register/start` - Start passkey registration
- `POST /register/finish` - Complete passkey registration

### Authentication
- `POST /authenticate/start` - Start passkey authentication
- `POST /authenticate/finish` - Complete passkey authentication

### Health Check
- `GET /health` - Server health status

## License

Apache-2.0

## Generated By

This client was generated using the [@vmenon25/mcp-server-webauthn-client](https://github.com/hitoshura25/mpo-api-authn-server/tree/main/mcp-server-webauthn-client) MCP server.

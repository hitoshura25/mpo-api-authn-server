# Smart PR Testing Workflow with Conditional Execution
#
# This workflow implements intelligent change detection and conditional execution
# to optimize CI/CD performance for pull requests.
#
# WORKFLOW DECISION MATRIX:
# | Change Type        | Unit Tests | Docker Build | E2E Tests |
# |--------------------|-----------:|-------------:|----------:|
# | Documentation only |    ❌ Skip |     ❌ Skip |  ❌ Skip |
# | Workflow changes   |    ❌ Skip |     ❌ Skip |  ❌ Skip |
# | Source code        |     ✅ Run |      ✅ Build |   ✅ Run |
# | Tests only         |     ✅ Run |     ❌ Skip |  ❌ Skip |
# | Dockerfile only    |    ❌ Skip |      ✅ Build |   ✅ Run |
# | Build config       |     ✅ Run |      ✅ Build |   ✅ Run |
#
# PERFORMANCE BENEFITS:
# - Fast path: Documentation/workflow changes complete in ~30 seconds
# - Standard path: Full CI pipeline takes ~8 minutes when needed
# - Smart detection: Only run tests/builds for relevant changes

name: Smart PR Tests - Conditional Unit Tests, Docker Build & E2E Trigger

on:
  pull_request:
    branches:
      - main

env:
  BASE_VERSION: "1.0"
  ANDROID_API_VERSION: "29"
  JAVA_VERSION: "21"
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: hitoshura25/webauthn-server
  DOCKER_TEST_CREDENTIALS_IMAGE_NAME: hitoshura25/webauthn-test-credentials-service

jobs:
  # Job 1: Detect what changed to determine execution strategy
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      docs-only: ${{ steps.changes.outputs.docs-only }}
      workflows-only: ${{ steps.changes.outputs.workflows-only }}
      webauthn-server-tests: ${{ steps.changes.outputs.webauthn-server-tests }}
      webauthn-server-docker: ${{ steps.changes.outputs.webauthn-server-docker }}
      test-credentials-tests: ${{ steps.changes.outputs.test-credentials-tests }}
      test-credentials-docker: ${{ steps.changes.outputs.test-credentials-docker }}
      any-docker-changes: ${{ steps.changes.outputs.webauthn-server-docker == 'true' || steps.changes.outputs.test-credentials-docker == 'true' }}
      any-test-changes: ${{ steps.changes.outputs.webauthn-server-tests == 'true' || steps.changes.outputs.test-credentials-tests == 'true' }}
      fast-path-eligible: ${{ steps.changes.outputs.docs-only == 'true' || steps.changes.outputs.workflows-only == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect file changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            docs-only:
              - '**.md'
              - 'docs/**'
              - '!.github/workflows/**'
            workflows-only:
              - '.github/workflows/**'
              - '!.github/workflows/webauthn-server-tests-publish-docker-client-libs.yml'
            webauthn-server-tests:
              - 'webauthn-server/src/**'
              - 'webauthn-server/build.gradle.kts'
              - 'webauthn-test-lib/**'
              - 'settings.gradle.kts'
              - 'build.gradle.kts'
              - 'gradle.properties'
              - 'gradle/**'
            webauthn-server-docker:
              - 'webauthn-server/src/main/**'
              - 'webauthn-server/Dockerfile'
              - 'webauthn-server/build.gradle.kts'
              - 'webauthn-test-lib/src/main/**'
              - 'settings.gradle.kts'
              - 'build.gradle.kts'
              - 'gradle.properties'
            test-credentials-tests:
              - 'webauthn-test-credentials-service/src/**'
              - 'webauthn-test-credentials-service/build.gradle.kts'
              - 'webauthn-test-lib/**'
              - 'settings.gradle.kts'
              - 'build.gradle.kts'
              - 'gradle.properties'
              - 'gradle/**'
            test-credentials-docker:
              - 'webauthn-test-credentials-service/src/main/**'
              - 'webauthn-test-credentials-service/Dockerfile'
              - 'webauthn-test-credentials-service/build.gradle.kts'
              - 'webauthn-test-lib/src/main/**'
              - 'settings.gradle.kts'
              - 'build.gradle.kts'
              - 'gradle.properties'

      - name: Print change detection results
        run: |
          echo "🔍 Change Detection Results:"
          echo "docs-only: ${{ steps.changes.outputs.docs-only }}"
          echo "workflows-only: ${{ steps.changes.outputs.workflows-only }}"
          echo "webauthn-server-tests: ${{ steps.changes.outputs.webauthn-server-tests }}"
          echo "webauthn-server-docker: ${{ steps.changes.outputs.webauthn-server-docker }}"
          echo "test-credentials-tests: ${{ steps.changes.outputs.test-credentials-tests }}"
          echo "test-credentials-docker: ${{ steps.changes.outputs.test-credentials-docker }}"
          echo ""
          echo "🚀 Execution Strategy:"
          if [[ "${{ steps.changes.outputs.docs-only }}" == "true" ]]; then
            echo "✅ Documentation-only changes - Fast path (no tests/builds needed)"
          elif [[ "${{ steps.changes.outputs.workflows-only }}" == "true" ]]; then
            echo "✅ Workflow-only changes - Fast path (no tests/builds needed)"
          elif [[ "${{ steps.changes.outputs.webauthn-server-tests }}" == "true" || "${{ steps.changes.outputs.test-credentials-tests }}" == "true" ]]; then
            echo "🧪 Code changes detected - Will run unit tests"
            if [[ "${{ steps.changes.outputs.webauthn-server-docker }}" == "true" || "${{ steps.changes.outputs.test-credentials-docker }}" == "true" ]]; then
              echo "🐳 Docker-relevant changes detected - Will build Docker images and trigger E2E tests"
            else
              echo "🏃‍♂️ Test-only changes - Will skip Docker build and E2E tests"
            fi
          fi

  # Job 2: Fast path for non-code changes
  fast-path-success:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.docs-only == 'true' || needs.detect-changes.outputs.workflows-only == 'true'
    steps:
      - name: Fast path success
        run: |
          echo "🎉 Fast path: No code changes detected"
          echo "📝 Changes are documentation or workflow-only"
          echo "✅ PR checks passed without running tests or builds"

  # Job 3: Run unit tests when code changes detected
  run-unit-tests:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any-test-changes == 'true'
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate published library version number
        id: generate-library-version
        env:
          BASE_VERSION: ${{ env.BASE_VERSION }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_PR_NUMBER: ${{ github.event.number }}
        run: |
          echo "🎯 Using unified version manager"
          echo "Event: $GITHUB_EVENT_NAME, PR: $GITHUB_PR_NUMBER"
          ./scripts/version-manager.sh generate

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      # Job-specific Gradle caching for unit tests
      - name: Setup Gradle cache for unit tests
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle/configuration-cache
          key: gradle-unit-tests-${{ runner.os }}-${{ github.ref_name }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-unit-tests-${{ runner.os }}-${{ github.ref_name }}-
            gradle-unit-tests-${{ runner.os }}-main-
            gradle-unit-tests-${{ runner.os }}-
            gradle-${{ runner.os }}-${{ github.ref_name }}-
            gradle-${{ runner.os }}-main-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
          build-scan-publish: true
          build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
          build-scan-terms-of-use-agree: "yes"
          # Disable built-in cache since we're managing it manually
          cache-disabled: true

      - name: Run code quality checks, tests, coverage, and build JARs
        shell: bash
        run: ./gradlew detekt :webauthn-server:koverXmlReport :webauthn-server:shadowJar :webauthn-test-credentials-service:koverXmlReport :webauthn-test-credentials-service:shadowJar --build-cache --parallel --configuration-cache

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: webauthn-server-reports
          path: |
            webauthn-server/build/reports/
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          slug: hitoshura25/mpo-api-authn-server
          files: ./webauthn-server/build/reports/kover/report.xml
          flags: unit
          name: codecov-unit
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  # Job 4: Build and push Docker images when Docker-relevant changes detected
  build-docker-images:
    runs-on: ubuntu-latest
    needs: [ detect-changes, run-unit-tests ]
    if: needs.detect-changes.outputs.any-docker-changes == 'true' && (needs.run-unit-tests.result == 'success' || needs.run-unit-tests.result == 'skipped')
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    outputs:
      webauthn-server-image: ${{ steps.docker-meta.outputs.tags }}
      webauthn-server-digest: ${{ steps.docker-push.outputs.digest }}
      test-credentials-image: ${{ steps.docker-test-credentials-meta.outputs.tags }}
      test-credentials-digest: ${{ steps.docker-test-credentials-push.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate published library version number
        id: generate-library-version
        env:
          BASE_VERSION: ${{ env.BASE_VERSION }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_PR_NUMBER: ${{ github.event.number }}
        run: |
          echo "🎯 Using unified version manager"
          echo "Event: $GITHUB_EVENT_NAME, PR: $GITHUB_PR_NUMBER"
          ./scripts/version-manager.sh generate

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      # Job-specific Gradle caching for Docker builds
      - name: Setup Gradle cache for Docker builds
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle/configuration-cache
          key: gradle-docker-build-${{ runner.os }}-${{ github.ref_name }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-docker-build-${{ runner.os }}-${{ github.ref_name }}-
            gradle-docker-build-${{ runner.os }}-main-
            gradle-docker-build-${{ runner.os }}-
            gradle-unit-tests-${{ runner.os }}-${{ github.ref_name }}-
            gradle-${{ runner.os }}-${{ github.ref_name }}-
            gradle-${{ runner.os }}-main-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
          build-scan-publish: true
          build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
          build-scan-terms-of-use-agree: "yes"
          # Disable built-in cache since we're managing it manually
          cache-disabled: true

      - name: Build JAR files for Docker images
        shell: bash
        run: ./gradlew :webauthn-server:shadowJar :webauthn-test-credentials-service:shadowJar --build-cache --parallel --configuration-cache

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: docker-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=pr

      - name: Build and push WebAuthn Server
        id: docker-push
        uses: docker/build-push-action@v6
        with:
          context: ./webauthn-server
          push: true
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}

      - name: Generate artifact attestation for WebAuthn Server
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME}}
          subject-digest: ${{ steps.docker-push.outputs.digest }}
          push-to-registry: true

      - name: Docker Test Credentials meta
        id: docker-test-credentials-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_TEST_CREDENTIALS_IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=pr

      - name: Build and push Test Credentials Service
        id: docker-test-credentials-push
        uses: docker/build-push-action@v6
        with:
          context: ./webauthn-test-credentials-service
          push: true
          tags: ${{ steps.docker-test-credentials-meta.outputs.tags }}
          labels: ${{ steps.docker-test-credentials-meta.outputs.labels }}

      - name: Generate artifact attestation for Test Credentials Service
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_TEST_CREDENTIALS_IMAGE_NAME}}
          subject-digest: ${{ steps.docker-test-credentials-push.outputs.digest }}
          push-to-registry: true

  # Job 5: Trigger E2E tests when Docker images are built
  trigger-e2e-tests:
    runs-on: ubuntu-latest
    needs: [ detect-changes, build-docker-images ]
    if: needs.build-docker-images.result == 'success'
    steps:
      - name: Trigger E2E Test Workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_WORKFLOW_DISPATCH }}
          retries: 3
          script: |
            const { data: dispatch } = await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'trigger-e2e-tests',
              client_payload: {
                pr_number: '${{ github.event.number }}',
                webauthn_server_image: '${{ needs.build-docker-images.outputs.webauthn-server-image }}',
                test_credentials_image: '${{ needs.build-docker-images.outputs.test-credentials-image }}',
                branch: '${{ github.head_ref }}',
                commit_sha: '${{ github.event.pull_request.head.sha }}'
              }
            });

            console.log('🚀 Triggered E2E tests workflow');
            console.log('WebAuthn Server Image:', '${{ needs.build-docker-images.outputs.webauthn-server-image }}');
            console.log('Test Credentials Image:', '${{ needs.build-docker-images.outputs.test-credentials-image }}');

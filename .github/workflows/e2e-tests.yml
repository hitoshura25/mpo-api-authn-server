# E2E Tests Orchestrator - Cross-Platform Integration
#
# This workflow orchestrates comprehensive end-to-end tests using built Docker images
# to ensure full system integration works correctly across all platforms.
#
# ARCHITECTURE:
# - Orchestrates parallel execution of platform-specific E2E workflows
# - Web E2E: Delegates to web-e2e-tests.yml (Playwright testing)
# - Android E2E: Delegates to android-e2e-tests.yml (emulator testing)
# - Results aggregation: Collects and reports results from both platforms
#
# TRIGGER CONDITIONS:
# - Called by main orchestrator workflow (main-ci-cd.yml)
# - Only runs when Docker images have been successfully built
# - Uses the exact images that were built for the PR
#
# TEST COVERAGE:
# - Cross-platform WebAuthn functionality (Android + Web)
# - Full API contract validation
# - Integration between all services
# - Real Docker image validation
#
# BENEFITS:
# - True parallel execution of platform tests
# - Independent platform team ownership
# - Selective test execution capabilities
# - Improved maintainability and specialization

name: E2E Tests - Cross-Platform Orchestrator

on:
  workflow_call:
    inputs:
      webauthn_server_image:
        description: 'WebAuthn server Docker image tag'
        required: true
        type: string
      test_credentials_image:
        description: 'Test credentials service Docker image tag'
        required: true
        type: string
      pr-number:
        description: 'PR number'
        required: false
        type: string

env:
  ANDROID_API_VERSION: "29"
  JAVA_VERSION: "21"
  DOCKER_REGISTRY: ghcr.io
  # Use workflow inputs directly
  PR_NUMBER: ${{ github.event.pull_request.number }}
  WEBAUTHN_SERVER_IMAGE: ${{ inputs.webauthn_server_image }}
  TEST_CREDENTIALS_IMAGE: ${{ inputs.test_credentials_image }}
  BASE_VERSION: "1.0"
  NPM_SCOPE: "@hitoshura25"

jobs:
  # Job 1: Setup configuration for callable workflows (convert env vars to job outputs)
  setup-config:
    runs-on: ubuntu-latest
    outputs:
      java-version: ${{ steps.config.outputs.java-version }}
      android-api-version: ${{ steps.config.outputs.android-api-version }}
      npm-scope: ${{ steps.config.outputs.npm-scope }}
    steps:
      - name: Setup configuration outputs
        id: config
        run: |
          echo "java-version=${{ env.JAVA_VERSION }}" >> $GITHUB_OUTPUT
          echo "android-api-version=${{ env.ANDROID_API_VERSION }}" >> $GITHUB_OUTPUT
          echo "npm-scope=${{ env.NPM_SCOPE }}" >> $GITHUB_OUTPUT

  # Job 2: Check E2E test cache to avoid redundant runs
  check-e2e-cache:
    runs-on: ubuntu-latest
    needs: setup-config
    outputs:
      web-cache-hit: ${{ steps.web-cache.outputs.cache-hit }}
      android-cache-hit: ${{ steps.android-cache.outputs.cache-hit }}
      cache-key-web: ${{ steps.cache-keys.outputs.web-key }}
      cache-key-android: ${{ steps.cache-keys.outputs.android-key }}
      skip-web-e2e: ${{ steps.web-cache.outputs.cache-hit == 'true' }}
      skip-android-e2e: ${{ steps.android-cache.outputs.cache-hit == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate E2E cache keys
        id: cache-keys
        run: |
          # Extract image digests from full image tags for cache key
          WEBAUTHN_DIGEST="${{ inputs.webauthn_server_image }}"
          TEST_CREDS_DIGEST="${{ inputs.test_credentials_image }}"
          
          # Generate hash of E2E test files and configurations
          WEB_FILES_HASH=$(find web-test-client .github/workflows/web-e2e-tests.yml -type f -exec sha256sum {} \; 2>/dev/null | sha256sum | cut -d' ' -f1 || echo "no-files")
          ANDROID_FILES_HASH=$(find android-test-client .github/workflows/android-e2e-tests.yml -type f -exec sha256sum {} \; 2>/dev/null | sha256sum | cut -d' ' -f1 || echo "no-files")
          
          # Create platform-specific cache keys
          WEB_CACHE_KEY="web-e2e-results-${WEBAUTHN_DIGEST##*:}-${TEST_CREDS_DIGEST##*:}-${WEB_FILES_HASH}"
          ANDROID_CACHE_KEY="android-e2e-results-${WEBAUTHN_DIGEST##*:}-${TEST_CREDS_DIGEST##*:}-${ANDROID_FILES_HASH}"
          
          echo "web-key=${WEB_CACHE_KEY}" >> $GITHUB_OUTPUT
          echo "android-key=${ANDROID_CACHE_KEY}" >> $GITHUB_OUTPUT
          
          echo "🔑 Cache Keys Generated:"
          echo "  Web E2E: ${WEB_CACHE_KEY}"
          echo "  Android E2E: ${ANDROID_CACHE_KEY}"

      - name: Check Web E2E cache
        id: web-cache
        uses: actions/cache@v4
        with:
          key: ${{ steps.cache-keys.outputs.web-key }}
          path: |
            web-e2e-cache/
            web-e2e-results.json
          lookup-only: true

      - name: Check Android E2E cache
        id: android-cache  
        uses: actions/cache@v4
        with:
          key: ${{ steps.cache-keys.outputs.android-key }}
          path: |
            android-e2e-cache/
            android-e2e-results.json
          lookup-only: true

      - name: Cache check summary
        run: |
          echo "📊 E2E Cache Check Results:"
          echo "  Web E2E cache hit: ${{ steps.web-cache.outputs.cache-hit }}"
          echo "  Android E2E cache hit: ${{ steps.android-cache.outputs.cache-hit }}"
          echo "  Web E2E will be: ${{ steps.web-cache.outputs.cache-hit == 'true' && 'SKIPPED (cached)' || 'RUN' }}"
          echo "  Android E2E will be: ${{ steps.android-cache.outputs.cache-hit == 'true' && 'SKIPPED (cached)' || 'RUN' }}"

  # Job 3: Validate Docker images are available
  validate-images:
    runs-on: ubuntu-latest
    needs: check-e2e-cache
    outputs:
      webauthn-server-ready: ${{ steps.check-webauthn.outputs.available }}
      test-credentials-ready: ${{ steps.check-test-credentials.outputs.available }}
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check WebAuthn Server image availability
        id: check-webauthn
        run: |
          echo "🔍 Checking WebAuthn Server image: ${{ env.WEBAUTHN_SERVER_IMAGE }}"
          if docker manifest inspect "${{ env.WEBAUTHN_SERVER_IMAGE }}" > /dev/null 2>&1; then
            echo "✅ WebAuthn Server image is available"
            echo "available=true" >> $GITHUB_OUTPUT
          else
            echo "❌ WebAuthn Server image not found"
            echo "available=false" >> $GITHUB_OUTPUT
          fi

      - name: Check Test Credentials Service image availability
        id: check-test-credentials
        run: |
          echo "🔍 Checking Test Credentials Service image: ${{ env.TEST_CREDENTIALS_IMAGE }}"
          if docker manifest inspect "${{ env.TEST_CREDENTIALS_IMAGE }}" > /dev/null 2>&1; then
            echo "✅ Test Credentials Service image is available"
            echo "available=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Test Credentials Service image not found"
            echo "available=false" >> $GITHUB_OUTPUT
          fi

  generate-version:
    name: Generate version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.generate-version.outputs.version }}
      is-prerelease: ${{ steps.generate-version.outputs.is-prerelease }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags for version continuity

      - name: Generate library version
        id: generate-version
        env:
          BASE_VERSION: ${{ env.BASE_VERSION }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "🎯 Generating client version with centralized version manager"
          ./scripts/core/version-manager.sh generate

  # Phase 4 Integration: Replace legacy file copying with client-publish workflow call
  # VERSION PATTERN: pr-{PR_NUMBER}.{RUN_NUMBER} for staging packages
  # REGISTRY: GitHub Packages (staging registry for E2E testing)
  # SCOPE: @vmenon25/*-staging packages for isolated testing
  publish-client-libraries:
    uses: ./.github/workflows/client-publish.yml
    needs: [ setup-config, validate-images, generate-version ]
    if: needs.validate-images.outputs.webauthn-server-ready == 'true' && needs.validate-images.outputs.test-credentials-ready == 'true'
    permissions:
      contents: read
      packages: write  # Required for publishing to GitHub Packages
      id-token: write  # Required for npm publishing
    with:
      publish-type: "staging"
      client-version: ${{ needs.generate-version.outputs.version }}
      pr-number: ${{ github.event.pull_request.number }}
      npm-scope: ${{ needs.setup-config.outputs.npm-scope }}

  # Job 3: Call Web E2E tests workflow
  call-web-e2e-tests:
    uses: ./.github/workflows/web-e2e-tests.yml
    needs: [ setup-config, validate-images, generate-version, publish-client-libraries, check-e2e-cache ]
    if: |
      needs.validate-images.outputs.webauthn-server-ready == 'true' &&
      needs.validate-images.outputs.test-credentials-ready == 'true' &&
      needs.publish-client-libraries.result == 'success' &&
      needs.check-e2e-cache.outputs.skip-web-e2e != 'true'
    secrets: inherit
    with:
      webauthn-server-image: ${{ inputs.webauthn_server_image }}
      test-credentials-image: ${{ inputs.test_credentials_image }}
      pr-number: ${{ github.event.pull_request.number }}
      java-version: ${{ needs.setup-config.outputs.java-version }}
      typescript-package-name: ${{ needs.publish-client-libraries.outputs.typescript-package-name }}
      client-version: ${{ needs.generate-version.outputs.version }}
      cache-key: ${{ needs.check-e2e-cache.outputs.cache-key-web }}

  # Job 4: Call Android E2E tests workflow
  call-android-e2e-tests:
    uses: ./.github/workflows/android-e2e-tests.yml
    needs: [ setup-config, validate-images, generate-version, publish-client-libraries, check-e2e-cache ]
    if: |
      needs.validate-images.outputs.webauthn-server-ready == 'true' &&
      needs.validate-images.outputs.test-credentials-ready == 'true' &&
      needs.publish-client-libraries.result == 'success' &&
      needs.check-e2e-cache.outputs.skip-android-e2e != 'true'
    secrets: inherit
    with:
      webauthn-server-image: ${{ inputs.webauthn_server_image }}
      test-credentials-image: ${{ inputs.test_credentials_image }}
      pr-number: ${{ github.event.pull_request.number }}
      java-version: ${{ needs.setup-config.outputs.java-version }}
      android-api-version: ${{ needs.setup-config.outputs.android-api-version }}
      android-package-name: ${{ needs.publish-client-libraries.outputs.android-package-name }}
      client-version: ${{ needs.generate-version.outputs.version }}
      cache-key: ${{ needs.check-e2e-cache.outputs.cache-key-android }}

  # Job 5: Handle cached Web E2E results
  web-e2e-cached:
    runs-on: ubuntu-latest
    needs: [ check-e2e-cache ]
    if: needs.check-e2e-cache.outputs.skip-web-e2e == 'true'
    outputs:
      tests-passed: "true"
      artifact-name: "web-e2e-cached-results"
    steps:
      - name: Restore cached Web E2E results
        uses: actions/cache@v4
        with:
          key: ${{ needs.check-e2e-cache.outputs.cache-key-web }}
          path: |
            web-e2e-cache/
            web-e2e-results.json
          fail-on-cache-miss: true

      - name: Report cached results
        run: |
          echo "✅ Web E2E tests skipped - using cached results"
          echo "Cache key: ${{ needs.check-e2e-cache.outputs.cache-key-web }}"
          echo "Previous test run was successful for identical conditions"
          if [ -f web-e2e-results.json ]; then
            echo "📊 Cached test results available"
            cat web-e2e-results.json || echo "{\"status\": \"cached\", \"tests_passed\": true}"
          fi

  # Job 6: Handle cached Android E2E results
  android-e2e-cached:
    runs-on: ubuntu-latest
    needs: [ check-e2e-cache ]
    if: needs.check-e2e-cache.outputs.skip-android-e2e == 'true'
    outputs:
      tests-passed: "true"
      artifact-name: "android-e2e-cached-results"
    steps:
      - name: Restore cached Android E2E results
        uses: actions/cache@v4
        with:
          key: ${{ needs.check-e2e-cache.outputs.cache-key-android }}
          path: |
            android-e2e-cache/
            android-e2e-results.json
          fail-on-cache-miss: true

      - name: Report cached results
        run: |
          echo "✅ Android E2E tests skipped - using cached results"
          echo "Cache key: ${{ needs.check-e2e-cache.outputs.cache-key-android }}"
          echo "Previous test run was successful for identical conditions"
          if [ -f android-e2e-results.json ]; then
            echo "📊 Cached test results available"
            cat android-e2e-results.json || echo "{\"status\": \"cached\", \"tests_passed\": true}"
          fi

  # Job 7: Report E2E test results back to PR
  report-results:
    runs-on: ubuntu-latest
    needs: [ validate-images, call-web-e2e-tests, call-android-e2e-tests, web-e2e-cached, android-e2e-cached ]
    if: always() && github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Comment on PR with E2E test results
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
          PR_NUMBER: ${{ env.PR_NUMBER }}
          VALIDATION_RESULT: ${{ needs.validate-images.result }}
          WEB_E2E_RESULT: ${{ needs.call-web-e2e-tests.result }}
          ANDROID_E2E_RESULT: ${{ needs.call-android-e2e-tests.result }}
          WEB_TESTS_PASSED: ${{ needs.call-web-e2e-tests.outputs.tests-passed }}
          ANDROID_TESTS_PASSED: ${{ needs.call-android-e2e-tests.outputs.tests-passed }}
          WEB_ARTIFACT_NAME: ${{ needs.call-web-e2e-tests.outputs.artifact-name }}
          ANDROID_ARTIFACT_NAME: ${{ needs.call-android-e2e-tests.outputs.artifact-name }}
          WEBAUTHN_SERVER_IMAGE: ${{ env.WEBAUTHN_SERVER_IMAGE }}
          TEST_CREDENTIALS_IMAGE: ${{ env.TEST_CREDENTIALS_IMAGE }}
        run: |
          chmod +x scripts/ci/create-e2e-results-comment.cjs
          node scripts/ci/create-e2e-results-comment.cjs
